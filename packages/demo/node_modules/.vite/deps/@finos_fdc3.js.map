{
  "version": 3,
  "sources": ["../../../../../../../../../.yarn/berry/cache/@finos-fdc3-npm-2.1.0-beta.4-a2c7cde941-10c0.zip/node_modules/@finos/fdc3/src/bridging/BridgingTypes.ts", "../../../../../../../../../.yarn/berry/cache/@finos-fdc3-npm-2.1.0-beta.4-a2c7cde941-10c0.zip/node_modules/@finos/fdc3/src/api/Errors.ts", "../../../../../../../../../.yarn/berry/cache/@finos-fdc3-npm-2.1.0-beta.4-a2c7cde941-10c0.zip/node_modules/@finos/fdc3/src/api/Methods.ts", "../../../../../../../../../.yarn/berry/cache/@finos-fdc3-npm-2.1.0-beta.4-a2c7cde941-10c0.zip/node_modules/@finos/fdc3/src/context/ContextType.ts", "../../../../../../../../../.yarn/berry/cache/@finos-fdc3-npm-2.1.0-beta.4-a2c7cde941-10c0.zip/node_modules/@finos/fdc3/src/context/ContextTypes.ts", "../../../../../../../../../.yarn/berry/cache/@finos-fdc3-npm-2.1.0-beta.4-a2c7cde941-10c0.zip/node_modules/@finos/fdc3/src/intents/Intents.ts"],
  "sourcesContent": ["// To parse this data:\n//\n//   import { Convert, BaseImplementationMetadata, AgentErrorResponseMessage, AgentRequestMessage, AgentResponseMessage, BridgeErrorResponseMessage, BridgeRequestMessage, BridgeResponseMessage, BroadcastAgentRequest, BroadcastBridgeRequest, ConnectionStepMessage, ConnectionStep2Hello, ConnectionStep3Handshake, ConnectionStep4AuthenticationFailed, ConnectionStep6ConnectedAgentsUpdate, FindInstancesAgentErrorResponse, FindInstancesAgentRequest, FindInstancesAgentResponse, FindInstancesBridgeErrorResponse, FindInstancesBridgeRequest, FindInstancesBridgeResponse, FindIntentAgentErrorResponse, FindIntentAgentRequest, FindIntentAgentResponse, FindIntentBridgeErrorResponse, FindIntentBridgeRequest, FindIntentBridgeResponse, FindIntentsByContextAgentErrorResponse, FindIntentsByContextAgentRequest, FindIntentsByContextAgentResponse, FindIntentsByContextBridgeErrorResponse, FindIntentsByContextBridgeRequest, FindIntentsByContextBridgeResponse, GetAppMetadataAgentErrorResponse, GetAppMetadataAgentRequest, GetAppMetadataAgentResponse, GetAppMetadataBridgeErrorResponse, GetAppMetadataBridgeRequest, GetAppMetadataBridgeResponse, OpenAgentErrorResponse, OpenAgentRequest, OpenAgentResponse, OpenBridgeErrorResponse, OpenBridgeRequest, OpenBridgeResponse, PrivateChannelBroadcastAgentRequest, PrivateChannelBroadcastBridgeRequest, PrivateChannelEventListenerAddedAgentRequest, PrivateChannelEventListenerAddedBridgeRequest, PrivateChannelEventListenerRemovedAgentRequest, PrivateChannelEventListenerRemovedBridgeRequest, PrivateChannelOnAddContextListenerAgentRequest, PrivateChannelOnAddContextListenerBridgeRequest, PrivateChannelOnDisconnectAgentRequest, PrivateChannelOnDisconnectBridgeRequest, PrivateChannelOnUnsubscribeAgentRequest, PrivateChannelOnUnsubscribeBridgeRequest, RaiseIntentAgentErrorResponse, RaiseIntentAgentRequest, RaiseIntentAgentResponse, RaiseIntentBridgeErrorResponse, RaiseIntentBridgeRequest, RaiseIntentBridgeResponse, RaiseIntentResultAgentErrorResponse, RaiseIntentResultAgentResponse, RaiseIntentResultBridgeErrorResponse, RaiseIntentResultBridgeResponse, Context } from \"./file\";\n//\n//   const fDC3DesktopAgentAPISchema = Convert.toFDC3DesktopAgentAPISchema(json);\n//   const baseImplementationMetadata = Convert.toBaseImplementationMetadata(json);\n//   const agentErrorResponseMessage = Convert.toAgentErrorResponseMessage(json);\n//   const agentRequestMessage = Convert.toAgentRequestMessage(json);\n//   const agentResponseMessage = Convert.toAgentResponseMessage(json);\n//   const bridgeErrorResponseMessage = Convert.toBridgeErrorResponseMessage(json);\n//   const bridgeRequestMessage = Convert.toBridgeRequestMessage(json);\n//   const bridgeResponseMessage = Convert.toBridgeResponseMessage(json);\n//   const broadcastAgentRequest = Convert.toBroadcastAgentRequest(json);\n//   const broadcastBridgeRequest = Convert.toBroadcastBridgeRequest(json);\n//   const bridgingCommons = Convert.toBridgingCommons(json);\n//   const connectionStepMessage = Convert.toConnectionStepMessage(json);\n//   const connectionStep2Hello = Convert.toConnectionStep2Hello(json);\n//   const connectionStep3Handshake = Convert.toConnectionStep3Handshake(json);\n//   const connectionStep4AuthenticationFailed = Convert.toConnectionStep4AuthenticationFailed(json);\n//   const connectionStep6ConnectedAgentsUpdate = Convert.toConnectionStep6ConnectedAgentsUpdate(json);\n//   const findInstancesAgentErrorResponse = Convert.toFindInstancesAgentErrorResponse(json);\n//   const findInstancesAgentRequest = Convert.toFindInstancesAgentRequest(json);\n//   const findInstancesAgentResponse = Convert.toFindInstancesAgentResponse(json);\n//   const findInstancesBridgeErrorResponse = Convert.toFindInstancesBridgeErrorResponse(json);\n//   const findInstancesBridgeRequest = Convert.toFindInstancesBridgeRequest(json);\n//   const findInstancesBridgeResponse = Convert.toFindInstancesBridgeResponse(json);\n//   const findIntentAgentErrorResponse = Convert.toFindIntentAgentErrorResponse(json);\n//   const findIntentAgentRequest = Convert.toFindIntentAgentRequest(json);\n//   const findIntentAgentResponse = Convert.toFindIntentAgentResponse(json);\n//   const findIntentBridgeErrorResponse = Convert.toFindIntentBridgeErrorResponse(json);\n//   const findIntentBridgeRequest = Convert.toFindIntentBridgeRequest(json);\n//   const findIntentBridgeResponse = Convert.toFindIntentBridgeResponse(json);\n//   const findIntentsByContextAgentErrorResponse = Convert.toFindIntentsByContextAgentErrorResponse(json);\n//   const findIntentsByContextAgentRequest = Convert.toFindIntentsByContextAgentRequest(json);\n//   const findIntentsByContextAgentResponse = Convert.toFindIntentsByContextAgentResponse(json);\n//   const findIntentsByContextBridgeErrorResponse = Convert.toFindIntentsByContextBridgeErrorResponse(json);\n//   const findIntentsByContextBridgeRequest = Convert.toFindIntentsByContextBridgeRequest(json);\n//   const findIntentsByContextBridgeResponse = Convert.toFindIntentsByContextBridgeResponse(json);\n//   const getAppMetadataAgentErrorResponse = Convert.toGetAppMetadataAgentErrorResponse(json);\n//   const getAppMetadataAgentRequest = Convert.toGetAppMetadataAgentRequest(json);\n//   const getAppMetadataAgentResponse = Convert.toGetAppMetadataAgentResponse(json);\n//   const getAppMetadataBridgeErrorResponse = Convert.toGetAppMetadataBridgeErrorResponse(json);\n//   const getAppMetadataBridgeRequest = Convert.toGetAppMetadataBridgeRequest(json);\n//   const getAppMetadataBridgeResponse = Convert.toGetAppMetadataBridgeResponse(json);\n//   const openAgentErrorResponse = Convert.toOpenAgentErrorResponse(json);\n//   const openAgentRequest = Convert.toOpenAgentRequest(json);\n//   const openAgentResponse = Convert.toOpenAgentResponse(json);\n//   const openBridgeErrorResponse = Convert.toOpenBridgeErrorResponse(json);\n//   const openBridgeRequest = Convert.toOpenBridgeRequest(json);\n//   const openBridgeResponse = Convert.toOpenBridgeResponse(json);\n//   const privateChannelBroadcastAgentRequest = Convert.toPrivateChannelBroadcastAgentRequest(json);\n//   const privateChannelBroadcastBridgeRequest = Convert.toPrivateChannelBroadcastBridgeRequest(json);\n//   const privateChannelEventListenerAddedAgentRequest = Convert.toPrivateChannelEventListenerAddedAgentRequest(json);\n//   const privateChannelEventListenerAddedBridgeRequest = Convert.toPrivateChannelEventListenerAddedBridgeRequest(json);\n//   const privateChannelEventListenerRemovedAgentRequest = Convert.toPrivateChannelEventListenerRemovedAgentRequest(json);\n//   const privateChannelEventListenerRemovedBridgeRequest = Convert.toPrivateChannelEventListenerRemovedBridgeRequest(json);\n//   const privateChannelOnAddContextListenerAgentRequest = Convert.toPrivateChannelOnAddContextListenerAgentRequest(json);\n//   const privateChannelOnAddContextListenerBridgeRequest = Convert.toPrivateChannelOnAddContextListenerBridgeRequest(json);\n//   const privateChannelOnDisconnectAgentRequest = Convert.toPrivateChannelOnDisconnectAgentRequest(json);\n//   const privateChannelOnDisconnectBridgeRequest = Convert.toPrivateChannelOnDisconnectBridgeRequest(json);\n//   const privateChannelOnUnsubscribeAgentRequest = Convert.toPrivateChannelOnUnsubscribeAgentRequest(json);\n//   const privateChannelOnUnsubscribeBridgeRequest = Convert.toPrivateChannelOnUnsubscribeBridgeRequest(json);\n//   const raiseIntentAgentErrorResponse = Convert.toRaiseIntentAgentErrorResponse(json);\n//   const raiseIntentAgentRequest = Convert.toRaiseIntentAgentRequest(json);\n//   const raiseIntentAgentResponse = Convert.toRaiseIntentAgentResponse(json);\n//   const raiseIntentBridgeErrorResponse = Convert.toRaiseIntentBridgeErrorResponse(json);\n//   const raiseIntentBridgeRequest = Convert.toRaiseIntentBridgeRequest(json);\n//   const raiseIntentBridgeResponse = Convert.toRaiseIntentBridgeResponse(json);\n//   const raiseIntentResultAgentErrorResponse = Convert.toRaiseIntentResultAgentErrorResponse(json);\n//   const raiseIntentResultAgentResponse = Convert.toRaiseIntentResultAgentResponse(json);\n//   const raiseIntentResultBridgeErrorResponse = Convert.toRaiseIntentResultBridgeErrorResponse(json);\n//   const raiseIntentResultBridgeResponse = Convert.toRaiseIntentResultBridgeResponse(json);\n//   const context = Convert.toContext(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\n/**\n * Metadata relating to the FDC3 Desktop Agent implementation and its provider.\n */\nexport interface BaseImplementationMetadata {\n  /**\n   * The version number of the FDC3 specification that the implementation provides.\n   * The string must be a numeric semver version, e.g. 1.2 or 1.2.1.\n   */\n  fdc3Version: string;\n  /**\n   * Metadata indicating whether the Desktop Agent implements optional features of\n   * the Desktop Agent API.\n   */\n  optionalFeatures: BaseImplementationMetadataOptionalFeatures;\n  /**\n   * The name of the provider of the Desktop Agent implementation (e.g. Finsemble, Glue42,\n   * OpenFin etc.).\n   */\n  provider: string;\n  /**\n   * The version of the provider of the Desktop Agent implementation (e.g. 5.3.0).\n   */\n  providerVersion?: string;\n}\n\n/**\n * Metadata indicating whether the Desktop Agent implements optional features of\n * the Desktop Agent API.\n */\nexport interface BaseImplementationMetadataOptionalFeatures {\n  /**\n   * Used to indicate whether the experimental Desktop Agent Bridging\n   * feature is implemented by the Desktop Agent.\n   */\n  DesktopAgentBridging: boolean;\n  /**\n   * Used to indicate whether the exposure of 'originating app metadata' for\n   * context and intent messages is supported by the Desktop Agent.\n   */\n  OriginatingAppMetadata: boolean;\n  /**\n   * Used to indicate whether the optional `fdc3.joinUserChannel`,\n   * `fdc3.getCurrentChannel` and `fdc3.leaveCurrentChannel` are implemented by\n   * the Desktop Agent.\n   */\n  UserChannelMembershipAPIs: boolean;\n}\n\n/**\n * A response message from a Desktop Agent to the Bridge containing an error, to be used in\n * preference to the standard response when an error needs to be returned.\n */\nexport interface AgentErrorResponseMessage {\n  meta: AgentResponseMetadata;\n  /**\n   * Error message payload containing an standardized error string.\n   */\n  payload: ErrorResponseMessagePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: ResponseMessageType;\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface AgentResponseMetadata {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * Error message payload containing an standardized error string.\n */\nexport interface ErrorResponseMessagePayload {\n  error: ResponseErrorDetail;\n  [property: string]: any;\n}\n\n/**\n * Array of error message strings for responses that were not returned to the bridge before\n * the timeout or because an error occurred. Should be the same length as the `errorSources`\n * array and ordered the same. May be omitted if all sources responded without errors.\n *\n * Constants representing the errors that can be encountered when calling the `open` method\n * on the DesktopAgent object (`fdc3`).\n *\n * Constants representing the errors that can be encountered when calling the `findIntent`,\n * `findIntentsByContext`, `raiseIntent` or `raiseIntentForContext` methods on the\n * DesktopAgent (`fdc3`).\n */\nexport type ResponseErrorDetail =\n  | 'AccessDenied'\n  | 'CreationFailed'\n  | 'MalformedContext'\n  | 'NoChannelFound'\n  | 'AppNotFound'\n  | 'AppTimeout'\n  | 'DesktopAgentNotFound'\n  | 'ErrorOnLaunch'\n  | 'ResolverUnavailable'\n  | 'IntentDeliveryFailed'\n  | 'NoAppsFound'\n  | 'ResolverTimeout'\n  | 'TargetAppUnavailable'\n  | 'TargetInstanceUnavailable'\n  | 'UserCancelledResolution'\n  | 'IntentHandlerRejected'\n  | 'NoResultReturned'\n  | 'AgentDisconnected'\n  | 'NotConnectedToBridge'\n  | 'ResponseToBridgeTimedOut'\n  | 'MalformedMessage';\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Response' appended.\n */\nexport type ResponseMessageType =\n  | 'findInstancesResponse'\n  | 'findIntentResponse'\n  | 'findIntentsByContextResponse'\n  | 'getAppMetadataResponse'\n  | 'openResponse'\n  | 'raiseIntentResponse'\n  | 'raiseIntentResultResponse';\n\n/**\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface AgentRequestMessage {\n  meta: AgentRequestMetadata;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: { [key: string]: any };\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: RequestMessageType;\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface AgentRequestMetadata {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: BridgeParticipantIdentifier;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source?: SourceIdentifier;\n  timestamp: Date;\n}\n\n/**\n * Optional field that represents the destination that the request should be routed to. Must\n * be set by the Desktop Agent for API calls that include a target app parameter and must\n * include the name of the Desktop Agent hosting the target application.\n *\n * Represents identifiers that MUST include the Desktop Agent name and MAY identify a\n * specific app or instance.\n *\n * Field that represents the source application that the request was received from, or the\n * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n * be set by the bridge.\n *\n * Identifies a particular Desktop Agent in Desktop Agent Bridging scenarios\n * where a request needs to be directed to a Desktop Agent rather than a specific app, or a\n * response message is returned by the Desktop Agent (or more specifically its resolver)\n * rather than a specific app. Used as a substitute for `AppIdentifier` in cases where no\n * app details are available or are appropriate.\n *\n * Array of DesktopAgentIdentifiers for responses that were not returned to the bridge\n * before the timeout or because an error occurred. May be omitted if all sources responded\n * without errors. MUST include the `desktopAgent` field when returned by the bridge.\n *\n * Array of DesktopAgentIdentifiers for the sources that generated responses to the request.\n * Will contain a single value for individual responses and multiple values for responses\n * that were collated by the bridge. May be omitted if all sources errored. MUST include the\n * `desktopAgent` field when returned by the bridge.\n *\n * Field that represents a destination Desktop Agent that a request is to be sent to.\n *\n * Field that represents a destination App on a remote Desktop Agent that a request is to be\n * sent to.\n *\n * Identifies an application, or instance of an application, and is used to target FDC3 API\n * calls, such as `fdc3.open` or `fdc3.raiseIntent` at specific applications or application\n * instances.\n *\n * Will always include at least an `appId` field, which uniquely identifies a specific app.\n *\n * If the `instanceId` field is set then the `AppMetadata` object represents a specific\n * instance of the application that may be addressed using that Id.\n *\n * Field that represents the source application that a request or response was received\n * from.\n *\n * Identifier for the app instance that was selected (or started) to resolve the intent.\n * `source.instanceId` MUST be set, indicating the specific app instance that\n * received the intent.\n */\nexport interface BridgeParticipantIdentifier {\n  /**\n   * Used in Desktop Agent Bridging to attribute or target a message to a\n   * particular Desktop Agent.\n   *\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   */\n  desktopAgent: string;\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId?: string;\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  [property: string]: any;\n}\n\n/**\n * Field that represents the source application that the request was received from, or the\n * source Desktop Agent if it issued the request itself.\n *\n * Field that represents the source application that a request or response was received\n * from, or the source Desktop Agent if it issued the request or response itself.\n *\n * Identifies an application, or instance of an application, and is used to target FDC3 API\n * calls, such as `fdc3.open` or `fdc3.raiseIntent` at specific applications or application\n * instances.\n *\n * Will always include at least an `appId` field, which uniquely identifies a specific app.\n *\n * If the `instanceId` field is set then the `AppMetadata` object represents a specific\n * instance of the application that may be addressed using that Id.\n *\n * Field that represents the source application that a request or response was received\n * from.\n *\n * Identifier for the app instance that was selected (or started) to resolve the intent.\n * `source.instanceId` MUST be set, indicating the specific app instance that\n * received the intent.\n *\n * Identifies a particular Desktop Agent in Desktop Agent Bridging scenarios\n * where a request needs to be directed to a Desktop Agent rather than a specific app, or a\n * response message is returned by the Desktop Agent (or more specifically its resolver)\n * rather than a specific app. Used as a substitute for `AppIdentifier` in cases where no\n * app details are available or are appropriate.\n *\n * Array of DesktopAgentIdentifiers for responses that were not returned to the bridge\n * before the timeout or because an error occurred. May be omitted if all sources responded\n * without errors. MUST include the `desktopAgent` field when returned by the bridge.\n *\n * Array of DesktopAgentIdentifiers for the sources that generated responses to the request.\n * Will contain a single value for individual responses and multiple values for responses\n * that were collated by the bridge. May be omitted if all sources errored. MUST include the\n * `desktopAgent` field when returned by the bridge.\n *\n * Field that represents a destination Desktop Agent that a request is to be sent to.\n */\nexport interface SourceIdentifier {\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId?: string;\n  /**\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   *\n   * Used in Desktop Agent Bridging to attribute or target a message to a\n   * particular Desktop Agent.\n   */\n  desktopAgent?: string;\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  [property: string]: any;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n */\nexport type RequestMessageType =\n  | 'broadcastRequest'\n  | 'findInstancesRequest'\n  | 'findIntentRequest'\n  | 'findIntentsByContextRequest'\n  | 'getAppMetadataRequest'\n  | 'openRequest'\n  | 'PrivateChannel.broadcast'\n  | 'PrivateChannel.eventListenerAdded'\n  | 'PrivateChannel.eventListenerRemoved'\n  | 'PrivateChannel.onAddContextListener'\n  | 'PrivateChannel.onDisconnect'\n  | 'PrivateChannel.onUnsubscribe'\n  | 'raiseIntentRequest';\n\n/**\n * A response message from a Desktop Agent to the Bridge.\n */\nexport interface AgentResponseMessage {\n  meta: AgentResponseMetadata;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: { [key: string]: any };\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: ResponseMessageType;\n}\n\n/**\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request, used where all connected agents returned errors.\n */\nexport interface BridgeErrorResponseMessage {\n  meta: BridgeErrorResponseMessageMeta;\n  /**\n   * The error message payload contains details of an error return to the app or agent that\n   * raised the original request.\n   */\n  payload: ResponseErrorMessagePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: string;\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface BridgeErrorResponseMessageMeta {\n  errorDetails: ResponseErrorDetail[];\n  errorSources: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * Identifies a particular Desktop Agent in Desktop Agent Bridging scenarios\n * where a request needs to be directed to a Desktop Agent rather than a specific app, or a\n * response message is returned by the Desktop Agent (or more specifically its resolver)\n * rather than a specific app. Used as a substitute for `AppIdentifier` in cases where no\n * app details are available or are appropriate.\n *\n * Array of DesktopAgentIdentifiers for responses that were not returned to the bridge\n * before the timeout or because an error occurred. May be omitted if all sources responded\n * without errors. MUST include the `desktopAgent` field when returned by the bridge.\n *\n * Array of DesktopAgentIdentifiers for the sources that generated responses to the request.\n * Will contain a single value for individual responses and multiple values for responses\n * that were collated by the bridge. May be omitted if all sources errored. MUST include the\n * `desktopAgent` field when returned by the bridge.\n *\n * Field that represents a destination Desktop Agent that a request is to be sent to.\n */\nexport interface DesktopAgentIdentifier {\n  /**\n   * Used in Desktop Agent Bridging to attribute or target a message to a\n   * particular Desktop Agent.\n   */\n  desktopAgent: string;\n  [property: string]: any;\n}\n\n/**\n * The error message payload contains details of an error return to the app or agent that\n * raised the original request.\n */\nexport interface ResponseErrorMessagePayload {\n  error?: ResponseErrorDetail;\n  [property: string]: any;\n}\n\n/**\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface BridgeRequestMessage {\n  meta: BridgeRequestMetadata;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: { [key: string]: any };\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: string;\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface BridgeRequestMetadata {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: BridgeParticipantIdentifier;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: BridgeParticipantIdentifier;\n  timestamp: Date;\n}\n\n/**\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request.\n */\nexport interface BridgeResponseMessage {\n  meta: BridgeResponseMessageMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: { [key: string]: any };\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: string;\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface BridgeResponseMessageMeta {\n  errorDetails?: ResponseErrorDetail[];\n  errorSources?: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  sources?: DesktopAgentIdentifier[];\n  timestamp: Date;\n}\n\n/**\n * A request to broadcast context on a channel.\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface BroadcastAgentRequest {\n  meta: BroadcastAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: BroadcastAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'broadcastRequest';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface BroadcastAgentRequestMeta {\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source: SourceObject;\n  timestamp: Date;\n}\n\n/**\n * Identifies an application, or instance of an application, and is used to target FDC3 API\n * calls, such as `fdc3.open` or `fdc3.raiseIntent` at specific applications or application\n * instances.\n *\n * Will always include at least an `appId` field, which uniquely identifies a specific app.\n *\n * If the `instanceId` field is set then the `AppMetadata` object represents a specific\n * instance of the application that may be addressed using that Id.\n *\n * Field that represents the source application that a request or response was received\n * from.\n *\n * Identifier for the app instance that was selected (or started) to resolve the intent.\n * `source.instanceId` MUST be set, indicating the specific app instance that\n * received the intent.\n *\n * Field that represents the source application that the request was received from, or the\n * source Desktop Agent if it issued the request itself.\n *\n * Field that represents the source application that a request or response was received\n * from, or the source Desktop Agent if it issued the request or response itself.\n *\n * Identifies a particular Desktop Agent in Desktop Agent Bridging scenarios\n * where a request needs to be directed to a Desktop Agent rather than a specific app, or a\n * response message is returned by the Desktop Agent (or more specifically its resolver)\n * rather than a specific app. Used as a substitute for `AppIdentifier` in cases where no\n * app details are available or are appropriate.\n *\n * Array of DesktopAgentIdentifiers for responses that were not returned to the bridge\n * before the timeout or because an error occurred. May be omitted if all sources responded\n * without errors. MUST include the `desktopAgent` field when returned by the bridge.\n *\n * Array of DesktopAgentIdentifiers for the sources that generated responses to the request.\n * Will contain a single value for individual responses and multiple values for responses\n * that were collated by the bridge. May be omitted if all sources errored. MUST include the\n * `desktopAgent` field when returned by the bridge.\n *\n * Field that represents a destination Desktop Agent that a request is to be sent to.\n */\nexport interface SourceObject {\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId: string;\n  /**\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   *\n   * Used in Desktop Agent Bridging to attribute or target a message to a\n   * particular Desktop Agent.\n   */\n  desktopAgent?: string;\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  [property: string]: any;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface BroadcastAgentRequestPayload {\n  /**\n   * The Id of the Channel that the broadcast was sent on\n   */\n  channelId: string;\n  /**\n   * The context object that was the payload of a broadcast message.\n   */\n  context: ContextElement;\n}\n\n/**\n * The context object that was the payload of a broadcast message.\n *\n * The `fdc3.context` type defines the basic contract or \"shape\" for all data exchanged by\n * FDC3 operations. As such, it is not really meant to be used on its own, but is imported\n * by more specific type definitions (standardized or custom) to provide the structure and\n * properties shared by all FDC3 context data types.\n *\n * The key element of FDC3 context types is their mandatory `type` property, which is used\n * to identify what type of data the object represents, and what shape it has.\n *\n * The FDC3 context type, and all derived types, define the minimum set of fields a context\n * data object of a particular type can be expected to have, but this can always be extended\n * with custom fields as appropriate.\n */\nexport interface ContextElement {\n  /**\n   * Context data objects may include a set of equivalent key-value pairs that can be used to\n   * help applications identify and look up the context type they receive in their own domain.\n   * The idea behind this design is that applications can provide as many equivalent\n   * identifiers to a target application as possible, e.g. an instrument may be represented by\n   * an ISIN, CUSIP or Bloomberg identifier.\n   *\n   * Identifiers do not make sense for all types of data, so the `id` property is therefore\n   * optional, but some derived types may choose to require at least one identifier.\n   */\n  id?: { [key: string]: any };\n  /**\n   * Context data objects may include a name property that can be used for more information,\n   * or display purposes. Some derived types may require the name object as mandatory,\n   * depending on use case.\n   */\n  name?: string;\n  /**\n   * The type property is the only _required_ part of the FDC3 context data schema. The FDC3\n   * [API](https://fdc3.finos.org/docs/api/spec) relies on the `type` property being present\n   * to route shared context data appropriately.\n   *\n   * FDC3 [Intents](https://fdc3.finos.org/docs/intents/spec) also register the context data\n   * types they support in an FDC3 [App\n   * Directory](https://fdc3.finos.org/docs/app-directory/overview), used for intent discovery\n   * and routing.\n   *\n   * Standardized FDC3 context types have well-known `type` properties prefixed with the\n   * `fdc3` namespace, e.g. `fdc3.instrument`. For non-standard types, e.g. those defined and\n   * used by a particular organization, the convention is to prefix them with an\n   * organization-specific namespace, e.g. `blackrock.fund`.\n   *\n   * See the [Context Data Specification](https://fdc3.finos.org/docs/context/spec) for more\n   * information about context data types.\n   */\n  type: string;\n  [property: string]: any;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request to broadcast context on a channel.\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface BroadcastBridgeRequest {\n  meta: BroadcastBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: BroadcastBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'broadcastRequest';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface BroadcastBridgeRequestMeta {\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSource;\n  timestamp: Date;\n}\n\n/**\n * Identifies an application, or instance of an application, and is used to target FDC3 API\n * calls, such as `fdc3.open` or `fdc3.raiseIntent` at specific applications or application\n * instances.\n *\n * Will always include at least an `appId` field, which uniquely identifies a specific app.\n *\n * If the `instanceId` field is set then the `AppMetadata` object represents a specific\n * instance of the application that may be addressed using that Id.\n *\n * Field that represents the source application that a request or response was received\n * from.\n *\n * Identifier for the app instance that was selected (or started) to resolve the intent.\n * `source.instanceId` MUST be set, indicating the specific app instance that\n * received the intent.\n *\n * Optional field that represents the destination that the request should be routed to. Must\n * be set by the Desktop Agent for API calls that include a target app parameter and must\n * include the name of the Desktop Agent hosting the target application.\n *\n * Represents identifiers that MUST include the Desktop Agent name and MAY identify a\n * specific app or instance.\n *\n * Field that represents the source application that the request was received from, or the\n * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n * be set by the bridge.\n *\n * Identifies a particular Desktop Agent in Desktop Agent Bridging scenarios\n * where a request needs to be directed to a Desktop Agent rather than a specific app, or a\n * response message is returned by the Desktop Agent (or more specifically its resolver)\n * rather than a specific app. Used as a substitute for `AppIdentifier` in cases where no\n * app details are available or are appropriate.\n *\n * Array of DesktopAgentIdentifiers for responses that were not returned to the bridge\n * before the timeout or because an error occurred. May be omitted if all sources responded\n * without errors. MUST include the `desktopAgent` field when returned by the bridge.\n *\n * Array of DesktopAgentIdentifiers for the sources that generated responses to the request.\n * Will contain a single value for individual responses and multiple values for responses\n * that were collated by the bridge. May be omitted if all sources errored. MUST include the\n * `desktopAgent` field when returned by the bridge.\n *\n * Field that represents a destination Desktop Agent that a request is to be sent to.\n *\n * Field that represents a destination App on a remote Desktop Agent that a request is to be\n * sent to.\n */\nexport interface MetaSource {\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId: string;\n  /**\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   *\n   * Used in Desktop Agent Bridging to attribute or target a message to a\n   * particular Desktop Agent.\n   */\n  desktopAgent: string;\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  [property: string]: any;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface BroadcastBridgeRequestPayload {\n  /**\n   * The Id of the Channel that the broadcast was sent on\n   */\n  channelId: string;\n  /**\n   * The context object that was the payload of a broadcast message.\n   */\n  context: ContextElement;\n}\n\n/**\n * A message used during the connection flow for a Desktop Agent to the Bridge. Used for\n * messages sent in either direction.\n */\nexport interface ConnectionStepMessage {\n  meta: ConnectionStepMetadata;\n  /**\n   * The message payload, containing data pertaining to this connection step.\n   */\n  payload: { [key: string]: any };\n  /**\n   * Identifies the type of the connection step message.\n   */\n  type: ConnectionStepMessageType;\n}\n\n/**\n * Metadata for this connection step message.\n */\nexport interface ConnectionStepMetadata {\n  requestUuid?: string;\n  responseUuid?: string;\n  timestamp: Date;\n}\n\n/**\n * Identifies the type of the connection step message.\n */\nexport type ConnectionStepMessageType = 'hello' | 'handshake' | 'authenticationFailed' | 'connectedAgentsUpdate';\n\n/**\n * Hello message sent by the Bridge to anyone connecting to the Bridge (enables\n * identification as a bridge and confirmation of whether authentication is required)\n *\n * A message used during the connection flow for a Desktop Agent to the Bridge. Used for\n * messages sent in either direction.\n */\nexport interface ConnectionStep2Hello {\n  meta: ConnectionStep2HelloMeta;\n  /**\n   * The message payload, containing data pertaining to this connection step.\n   */\n  payload: ConnectionStep2HelloPayload;\n  /**\n   * Identifies the type of the connection step message.\n   */\n  type: 'hello';\n}\n\n/**\n * Metadata for this connection step message.\n */\nexport interface ConnectionStep2HelloMeta {\n  timestamp: Date;\n}\n\n/**\n * The message payload, containing data pertaining to this connection step.\n */\nexport interface ConnectionStep2HelloPayload {\n  /**\n   * A flag indicating whether the Desktop Agent Bridge requires authentication or not.\n   */\n  authRequired: boolean;\n  /**\n   * An optional Desktop Agent Bridge JWT authentication token if the Desktop Agent want to\n   * authenticate a bridge.\n   */\n  authToken?: string;\n  /**\n   * The version of the Bridge\n   */\n  desktopAgentBridgeVersion: string;\n  /**\n   * The FDC3 versions supported by the Bridge\n   */\n  supportedFDC3Versions: string[];\n}\n\n/**\n * Identifies the type of the connection step message.\n */\n\n/**\n * Handshake message sent by the Desktop Agent to the Bridge (including requested name,\n * channel state and authentication data)\n *\n * A message used during the connection flow for a Desktop Agent to the Bridge. Used for\n * messages sent in either direction.\n */\nexport interface ConnectionStep3Handshake {\n  meta: ConnectionStep3HandshakeMeta;\n  /**\n   * The message payload, containing data pertaining to this connection step.\n   */\n  payload: ConnectionStep3HandshakePayload;\n  /**\n   * Identifies the type of the connection step message.\n   */\n  type: 'handshake';\n}\n\n/**\n * Metadata for this connection step message.\n */\nexport interface ConnectionStep3HandshakeMeta {\n  requestUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The message payload, containing data pertaining to this connection step.\n */\nexport interface ConnectionStep3HandshakePayload {\n  authToken?: string;\n  /**\n   * The current state of the Desktop Agent's channels, excluding any private channels, as a\n   * mapping of channel id to an array of Context objects, most recent first.\n   */\n  channelsState: { [key: string]: ContextElement[] };\n  /**\n   * Desktop Agent ImplementationMetadata trying to connect to the bridge.\n   */\n  implementationMetadata: ImplementationMetadataElement;\n  /**\n   * The requested Desktop Agent name\n   */\n  requestedName: string;\n}\n\n/**\n * Desktop Agent ImplementationMetadata trying to connect to the bridge.\n *\n * Metadata relating to the FDC3 Desktop Agent implementation and its provider.\n */\nexport interface ImplementationMetadataElement {\n  /**\n   * The version number of the FDC3 specification that the implementation provides.\n   * The string must be a numeric semver version, e.g. 1.2 or 1.2.1.\n   */\n  fdc3Version: string;\n  /**\n   * Metadata indicating whether the Desktop Agent implements optional features of\n   * the Desktop Agent API.\n   */\n  optionalFeatures: ImplementationMetadataOptionalFeatures;\n  /**\n   * The name of the provider of the Desktop Agent implementation (e.g. Finsemble, Glue42,\n   * OpenFin etc.).\n   */\n  provider: string;\n  /**\n   * The version of the provider of the Desktop Agent implementation (e.g. 5.3.0).\n   */\n  providerVersion?: string;\n}\n\n/**\n * Metadata indicating whether the Desktop Agent implements optional features of\n * the Desktop Agent API.\n */\nexport interface ImplementationMetadataOptionalFeatures {\n  /**\n   * Used to indicate whether the experimental Desktop Agent Bridging\n   * feature is implemented by the Desktop Agent.\n   */\n  DesktopAgentBridging: boolean;\n  /**\n   * Used to indicate whether the exposure of 'originating app metadata' for\n   * context and intent messages is supported by the Desktop Agent.\n   */\n  OriginatingAppMetadata: boolean;\n  /**\n   * Used to indicate whether the optional `fdc3.joinUserChannel`,\n   * `fdc3.getCurrentChannel` and `fdc3.leaveCurrentChannel` are implemented by\n   * the Desktop Agent.\n   */\n  UserChannelMembershipAPIs: boolean;\n}\n\n/**\n * Identifies the type of the connection step message.\n */\n\n/**\n * Message sent by Bridge to Desktop Agent if their authentication fails.\n *\n * A message used during the connection flow for a Desktop Agent to the Bridge. Used for\n * messages sent in either direction.\n */\nexport interface ConnectionStep4AuthenticationFailed {\n  meta: ConnectionStep4AuthenticationFailedMeta;\n  /**\n   * The message payload, containing data pertaining to this connection step.\n   */\n  payload: ConnectionStep4AuthenticationFailedPayload;\n  /**\n   * Identifies the type of the connection step message.\n   */\n  type: 'authenticationFailed';\n}\n\n/**\n * Metadata for this connection step message.\n */\nexport interface ConnectionStep4AuthenticationFailedMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The message payload, containing data pertaining to this connection step.\n */\nexport interface ConnectionStep4AuthenticationFailedPayload {\n  message?: string;\n}\n\n/**\n * Identifies the type of the connection step message.\n */\n\n/**\n * Message sent by Bridge to all Desktop Agent when an agent joins or leaves the bridge,\n * includes the details of all agents, the change made and the expected channel state for\n * all agents.\n *\n * A message used during the connection flow for a Desktop Agent to the Bridge. Used for\n * messages sent in either direction.\n */\nexport interface ConnectionStep6ConnectedAgentsUpdate {\n  meta: ConnectionStep6ConnectedAgentsUpdateMeta;\n  /**\n   * The message payload, containing data pertaining to this connection step.\n   */\n  payload: ConnectionStep6ConnectedAgentsUpdatePayload;\n  /**\n   * Identifies the type of the connection step message.\n   */\n  type: 'connectedAgentsUpdate';\n}\n\n/**\n * Metadata for this connection step message.\n */\nexport interface ConnectionStep6ConnectedAgentsUpdateMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The message payload, containing data pertaining to this connection step.\n */\nexport interface ConnectionStep6ConnectedAgentsUpdatePayload {\n  /**\n   * Should be set when an agent first connects to the bridge and provide its assigned name.\n   */\n  addAgent?: string;\n  /**\n   * Desktop Agent Bridge implementation metadata of all connected agents.\n   */\n  allAgents: ImplementationMetadataElement[];\n  /**\n   * The updated state of channels that should be adopted by the agents. Should only be set\n   * when an agent is connecting to the bridge.\n   */\n  channelsState?: { [key: string]: ContextElement[] };\n  /**\n   * Should be set when an agent disconnects from the bridge and provide the name that no\n   * longer is assigned.\n   */\n  removeAgent?: string;\n}\n\n/**\n * Identifies the type of the connection step message.\n */\n\n/**\n * A response to a findInstances request that contains an error.\n *\n * A response message from a Desktop Agent to the Bridge containing an error, to be used in\n * preference to the standard response when an error needs to be returned.\n */\nexport interface FindInstancesAgentErrorResponse {\n  meta: FindInstancesAgentErrorResponseMeta;\n  /**\n   * Error message payload containing an standardized error string.\n   */\n  payload: FindInstancesAgentErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findInstancesResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface FindInstancesAgentErrorResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * Error message payload containing an standardized error string.\n */\nexport interface FindInstancesAgentErrorResponsePayload {\n  error: ErrorMessage;\n}\n\n/**\n * Constants representing the errors that can be encountered when calling the `findIntent`,\n * `findIntentsByContext`, `raiseIntent` or `raiseIntentForContext` methods on the\n * DesktopAgent (`fdc3`).\n *\n * Array of error message strings for responses that were not returned to the bridge before\n * the timeout or because an error occurred. Should be the same length as the `errorSources`\n * array and ordered the same. May be omitted if all sources responded without errors.\n *\n * Constants representing the errors that can be encountered when calling the `open` method\n * on the DesktopAgent object (`fdc3`).\n */\nexport type ErrorMessage =\n  | 'DesktopAgentNotFound'\n  | 'IntentDeliveryFailed'\n  | 'MalformedContext'\n  | 'NoAppsFound'\n  | 'ResolverTimeout'\n  | 'ResolverUnavailable'\n  | 'TargetAppUnavailable'\n  | 'TargetInstanceUnavailable'\n  | 'UserCancelledResolution'\n  | 'AgentDisconnected'\n  | 'NotConnectedToBridge'\n  | 'ResponseToBridgeTimedOut'\n  | 'MalformedMessage';\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Response' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request for details of instances of a particular app\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface FindInstancesAgentRequest {\n  meta: FindInstancesAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: FindInstancesAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'findInstancesRequest';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface FindInstancesAgentRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: DestinationObject;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source?: SourceIdentifier;\n  timestamp: Date;\n}\n\n/**\n * Identifies a particular Desktop Agent in Desktop Agent Bridging scenarios\n * where a request needs to be directed to a Desktop Agent rather than a specific app, or a\n * response message is returned by the Desktop Agent (or more specifically its resolver)\n * rather than a specific app. Used as a substitute for `AppIdentifier` in cases where no\n * app details are available or are appropriate.\n *\n * Array of DesktopAgentIdentifiers for responses that were not returned to the bridge\n * before the timeout or because an error occurred. May be omitted if all sources responded\n * without errors. MUST include the `desktopAgent` field when returned by the bridge.\n *\n * Array of DesktopAgentIdentifiers for the sources that generated responses to the request.\n * Will contain a single value for individual responses and multiple values for responses\n * that were collated by the bridge. May be omitted if all sources errored. MUST include the\n * `desktopAgent` field when returned by the bridge.\n *\n * Field that represents a destination Desktop Agent that a request is to be sent to.\n *\n * Optional field that represents the destination that the request should be routed to. Must\n * be set by the Desktop Agent for API calls that include a target app parameter and must\n * include the name of the Desktop Agent hosting the target application.\n *\n * Represents identifiers that MUST include the Desktop Agent name and MAY identify a\n * specific app or instance.\n *\n * Field that represents the source application that the request was received from, or the\n * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n * be set by the bridge.\n *\n * Field that represents a destination App on a remote Desktop Agent that a request is to be\n * sent to.\n *\n * Identifies an application, or instance of an application, and is used to target FDC3 API\n * calls, such as `fdc3.open` or `fdc3.raiseIntent` at specific applications or application\n * instances.\n *\n * Will always include at least an `appId` field, which uniquely identifies a specific app.\n *\n * If the `instanceId` field is set then the `AppMetadata` object represents a specific\n * instance of the application that may be addressed using that Id.\n *\n * Field that represents the source application that a request or response was received\n * from.\n *\n * Identifier for the app instance that was selected (or started) to resolve the intent.\n * `source.instanceId` MUST be set, indicating the specific app instance that\n * received the intent.\n */\nexport interface DestinationObject {\n  /**\n   * Used in Desktop Agent Bridging to attribute or target a message to a\n   * particular Desktop Agent.\n   *\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   */\n  desktopAgent: string;\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId?: string;\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  [property: string]: any;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface FindInstancesAgentRequestPayload {\n  app: AppIdentifier;\n}\n\n/**\n * Identifies an application, or instance of an application, and is used to target FDC3 API\n * calls, such as `fdc3.open` or `fdc3.raiseIntent` at specific applications or application\n * instances.\n *\n * Will always include at least an `appId` field, which uniquely identifies a specific app.\n *\n * If the `instanceId` field is set then the `AppMetadata` object represents a specific\n * instance of the application that may be addressed using that Id.\n *\n * Field that represents the source application that a request or response was received\n * from.\n *\n * Identifier for the app instance that was selected (or started) to resolve the intent.\n * `source.instanceId` MUST be set, indicating the specific app instance that\n * received the intent.\n */\nexport interface AppIdentifier {\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId: string;\n  /**\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   */\n  desktopAgent?: string;\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  [property: string]: any;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A response to a findInstances request.\n *\n * A response message from a Desktop Agent to the Bridge.\n */\nexport interface FindInstancesAgentResponse {\n  meta: FindInstancesAgentResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: FindInstancesAgentResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findInstancesResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface FindInstancesAgentResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface FindInstancesAgentResponsePayload {\n  appIdentifiers: AppMetadata[];\n}\n\n/**\n * Extends an `AppIdentifier`, describing an application or instance of an application, with\n * additional descriptive metadata that is usually provided by an FDC3 App Directory that\n * the desktop agent connects to.\n *\n * The additional information from an app directory can aid in rendering UI elements, such\n * as a launcher menu or resolver UI. This includes a title, description, tooltip and icon\n * and screenshot URLs.\n *\n * Note that as `AppMetadata` instances are also `AppIdentifiers` they may be passed to the\n * `app` argument of `fdc3.open`, `fdc3.raiseIntent` etc.\n */\nexport interface AppMetadata {\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId: string;\n  /**\n   * A longer, multi-paragraph description for the application that could include markup\n   */\n  description?: string;\n  /**\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   */\n  desktopAgent?: string;\n  /**\n   * A list of icon URLs for the application that can be used to render UI elements\n   */\n  icons?: Icon[];\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  /**\n   * An optional set of, implementation specific, metadata fields that can be used to\n   * disambiguate instances, such as a window title or screen position. Must only be set if\n   * `instanceId` is set.\n   */\n  instanceMetadata?: { [key: string]: any };\n  /**\n   * The 'friendly' app name.\n   * This field was used with the `open` and `raiseIntent` calls in FDC3 <2.0, which now\n   * require an `AppIdentifier` wth `appId` set.\n   * Note that for display purposes the `title` field should be used, if set, in preference to\n   * this field.\n   */\n  name?: string;\n  /**\n   * The type of output returned for any intent specified during resolution. May express a\n   * particular context type (e.g. \"fdc3.instrument\"), channel (e.g. \"channel\") or a channel\n   * that will receive a specified type (e.g. \"channel<fdc3.instrument>\").\n   */\n  resultType?: null | string;\n  /**\n   * Images representing the app in common usage scenarios that can be used to render UI\n   * elements\n   */\n  screenshots?: Image[];\n  /**\n   * A more user-friendly application title that can be used to render UI elements\n   */\n  title?: string;\n  /**\n   * A tooltip for the application that can be used to render UI elements\n   */\n  tooltip?: string;\n  /**\n   * The Version of the application.\n   */\n  version?: string;\n}\n\n/**\n * SPDX-License-Identifier: Apache-2.0\n * Copyright FINOS FDC3 contributors - see NOTICE file\n */\nexport interface Icon {\n  /**\n   * The icon dimension, formatted as `<height>x<width>`.\n   */\n  size?: string;\n  /**\n   * The icon url\n   */\n  src: string;\n  /**\n   * Icon media type. If not present the Desktop Agent may use the src file extension.\n   */\n  type?: string;\n}\n\n/**\n * SPDX-License-Identifier: Apache-2.0\n * Copyright FINOS FDC3 contributors - see NOTICE file\n */\nexport interface Image {\n  /**\n   * Caption for the image.\n   */\n  label?: string;\n  /**\n   * The image dimension, formatted as `<height>x<width>`.\n   */\n  size?: string;\n  /**\n   * The image url.\n   */\n  src: string;\n  /**\n   * Image media type. If not present the Desktop Agent may use the src file extension.\n   */\n  type?: string;\n}\n\n/**\n * A response to a findInstances request that contains an error.\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request, used where all connected agents returned errors.\n */\nexport interface FindInstancesBridgeErrorResponse {\n  meta: FindInstancesBridgeErrorResponseMeta;\n  /**\n   * The error message payload contains details of an error return to the app or agent that\n   * raised the original request.\n   */\n  payload: FindInstancesBridgeErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findInstancesResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface FindInstancesBridgeErrorResponseMeta {\n  errorDetails: ResponseErrorDetail[];\n  errorSources: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The error message payload contains details of an error return to the app or agent that\n * raised the original request.\n */\nexport interface FindInstancesBridgeErrorResponsePayload {\n  error: ErrorMessage;\n}\n\n/**\n * A request for details of instances of a particular app\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface FindInstancesBridgeRequest {\n  meta: FindInstancesBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: FindInstancesBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'findInstancesRequest';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface FindInstancesBridgeRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: DestinationObject;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSourceObject;\n  timestamp: Date;\n}\n\n/**\n * Field that represents the source application that the request was received from, or the\n * source Desktop Agent if it issued the request itself.\n *\n * Field that represents the source application that a request or response was received\n * from, or the source Desktop Agent if it issued the request or response itself.\n *\n * Identifies an application, or instance of an application, and is used to target FDC3 API\n * calls, such as `fdc3.open` or `fdc3.raiseIntent` at specific applications or application\n * instances.\n *\n * Will always include at least an `appId` field, which uniquely identifies a specific app.\n *\n * If the `instanceId` field is set then the `AppMetadata` object represents a specific\n * instance of the application that may be addressed using that Id.\n *\n * Field that represents the source application that a request or response was received\n * from.\n *\n * Identifier for the app instance that was selected (or started) to resolve the intent.\n * `source.instanceId` MUST be set, indicating the specific app instance that\n * received the intent.\n *\n * Identifies a particular Desktop Agent in Desktop Agent Bridging scenarios\n * where a request needs to be directed to a Desktop Agent rather than a specific app, or a\n * response message is returned by the Desktop Agent (or more specifically its resolver)\n * rather than a specific app. Used as a substitute for `AppIdentifier` in cases where no\n * app details are available or are appropriate.\n *\n * Array of DesktopAgentIdentifiers for responses that were not returned to the bridge\n * before the timeout or because an error occurred. May be omitted if all sources responded\n * without errors. MUST include the `desktopAgent` field when returned by the bridge.\n *\n * Array of DesktopAgentIdentifiers for the sources that generated responses to the request.\n * Will contain a single value for individual responses and multiple values for responses\n * that were collated by the bridge. May be omitted if all sources errored. MUST include the\n * `desktopAgent` field when returned by the bridge.\n *\n * Field that represents a destination Desktop Agent that a request is to be sent to.\n *\n * Optional field that represents the destination that the request should be routed to. Must\n * be set by the Desktop Agent for API calls that include a target app parameter and must\n * include the name of the Desktop Agent hosting the target application.\n *\n * Represents identifiers that MUST include the Desktop Agent name and MAY identify a\n * specific app or instance.\n *\n * Field that represents the source application that the request was received from, or the\n * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n * be set by the bridge.\n *\n * Field that represents a destination App on a remote Desktop Agent that a request is to be\n * sent to.\n */\nexport interface MetaSourceObject {\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId?: string;\n  /**\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   *\n   * Used in Desktop Agent Bridging to attribute or target a message to a\n   * particular Desktop Agent.\n   */\n  desktopAgent: string;\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  [property: string]: any;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface FindInstancesBridgeRequestPayload {\n  app: AppIdentifier;\n}\n\n/**\n * A response to a findInstances request.\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request.\n */\nexport interface FindInstancesBridgeResponse {\n  meta: FindInstancesBridgeResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: FindInstancesBridgeResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findInstancesResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface FindInstancesBridgeResponseMeta {\n  errorDetails?: ResponseErrorDetail[];\n  errorSources?: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  sources?: DesktopAgentIdentifier[];\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface FindInstancesBridgeResponsePayload {\n  appIdentifiers: AppMetadata[];\n}\n\n/**\n * A response to a findIntent request that contains an error.\n *\n * A response message from a Desktop Agent to the Bridge containing an error, to be used in\n * preference to the standard response when an error needs to be returned.\n */\nexport interface FindIntentAgentErrorResponse {\n  meta: FindIntentAgentErrorResponseMeta;\n  /**\n   * Error message payload containing an standardized error string.\n   */\n  payload: FindIntentAgentErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findIntentResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface FindIntentAgentErrorResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * Error message payload containing an standardized error string.\n */\nexport interface FindIntentAgentErrorResponsePayload {\n  error: ErrorMessage;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Response' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request for details of apps available to resolve a particular intent and context pair.\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface FindIntentAgentRequest {\n  meta: FindIntentAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: FindIntentAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'findIntentRequest';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface FindIntentAgentRequestMeta {\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source?: SourceIdentifier;\n  timestamp: Date;\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: BridgeParticipantIdentifier;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface FindIntentAgentRequestPayload {\n  context?: ContextElement;\n  intent: string;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A response to a findIntent request.\n *\n * A response message from a Desktop Agent to the Bridge.\n */\nexport interface FindIntentAgentResponse {\n  meta: FindIntentAgentResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: FindIntentAgentResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findIntentResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface FindIntentAgentResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface FindIntentAgentResponsePayload {\n  appIntent: AppIntent;\n}\n\n/**\n * An interface that relates an intent to apps\n */\nexport interface AppIntent {\n  /**\n   * Details of applications that can resolve the intent.\n   */\n  apps: AppMetadata[];\n  /**\n   * Details of the intent whose relationship to resolving applications is being described.\n   */\n  intent: IntentMetadata;\n}\n\n/**\n * Details of the intent whose relationship to resolving applications is being described.\n *\n * Intent descriptor\n */\nexport interface IntentMetadata {\n  /**\n   * Display name for the intent.\n   */\n  displayName: string;\n  /**\n   * The unique name of the intent that can be invoked by the raiseIntent call\n   */\n  name: string;\n}\n\n/**\n * A response to a findIntent request that contains an error.\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request, used where all connected agents returned errors.\n */\nexport interface FindIntentBridgeErrorResponse {\n  meta: FindIntentBridgeErrorResponseMeta;\n  /**\n   * The error message payload contains details of an error return to the app or agent that\n   * raised the original request.\n   */\n  payload: FindIntentBridgeErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findIntentResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface FindIntentBridgeErrorResponseMeta {\n  errorDetails: ResponseErrorDetail[];\n  errorSources: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The error message payload contains details of an error return to the app or agent that\n * raised the original request.\n */\nexport interface FindIntentBridgeErrorResponsePayload {\n  error: ErrorMessage;\n}\n\n/**\n * A request for details of apps available to resolve a particular intent and context pair.\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface FindIntentBridgeRequest {\n  meta: FindIntentBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: FindIntentBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'findIntentRequest';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface FindIntentBridgeRequestMeta {\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: BridgeParticipantIdentifier;\n  timestamp: Date;\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: BridgeParticipantIdentifier;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface FindIntentBridgeRequestPayload {\n  context?: ContextElement;\n  intent: string;\n}\n\n/**\n * A response to a findIntent request.\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request.\n */\nexport interface FindIntentBridgeResponse {\n  meta: FindIntentBridgeResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: FindIntentBridgeResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findIntentResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface FindIntentBridgeResponseMeta {\n  errorDetails?: ResponseErrorDetail[];\n  errorSources?: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  sources?: DesktopAgentIdentifier[];\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface FindIntentBridgeResponsePayload {\n  appIntent: AppIntent;\n}\n\n/**\n * A response to a findIntentsByContext request that contains an error.\n *\n * A response message from a Desktop Agent to the Bridge containing an error, to be used in\n * preference to the standard response when an error needs to be returned.\n */\nexport interface FindIntentsByContextAgentErrorResponse {\n  meta: FindIntentsByContextAgentErrorResponseMeta;\n  /**\n   * Error message payload containing an standardized error string.\n   */\n  payload: FindIntentsByContextAgentErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findIntentsByContextResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface FindIntentsByContextAgentErrorResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * Error message payload containing an standardized error string.\n */\nexport interface FindIntentsByContextAgentErrorResponsePayload {\n  error: ErrorMessage;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Response' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request for details of intents and apps available to resolve them for a particular\n * context.\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface FindIntentsByContextAgentRequest {\n  meta: FindIntentsByContextAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: FindIntentsByContextAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'findIntentsByContextRequest';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface FindIntentsByContextAgentRequestMeta {\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source?: SourceObject;\n  timestamp: Date;\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: BridgeParticipantIdentifier;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface FindIntentsByContextAgentRequestPayload {\n  context: ContextElement;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A response to a findIntentsByContext request.\n *\n * A response message from a Desktop Agent to the Bridge.\n */\nexport interface FindIntentsByContextAgentResponse {\n  meta: FindIntentsByContextAgentResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: FindIntentsByContextAgentResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findIntentsByContextResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface FindIntentsByContextAgentResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface FindIntentsByContextAgentResponsePayload {\n  appIntents: AppIntent[];\n}\n\n/**\n * A response to a findIntentsByContext request that contains an error.\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request, used where all connected agents returned errors.\n */\nexport interface FindIntentsByContextBridgeErrorResponse {\n  meta: FindIntentsByContextBridgeErrorResponseMeta;\n  /**\n   * The error message payload contains details of an error return to the app or agent that\n   * raised the original request.\n   */\n  payload: FindIntentsByContextBridgeErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findIntentsByContextResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface FindIntentsByContextBridgeErrorResponseMeta {\n  errorDetails: ResponseErrorDetail[];\n  errorSources: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The error message payload contains details of an error return to the app or agent that\n * raised the original request.\n */\nexport interface FindIntentsByContextBridgeErrorResponsePayload {\n  error: ErrorMessage;\n}\n\n/**\n * A request for details of intents and apps available to resolve them for a particular\n * context.\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface FindIntentsByContextBridgeRequest {\n  meta: FindIntentsByContextBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: FindIntentsByContextBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'findIntentsByContextRequest';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface FindIntentsByContextBridgeRequestMeta {\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSource;\n  timestamp: Date;\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: BridgeParticipantIdentifier;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface FindIntentsByContextBridgeRequestPayload {\n  context: ContextElement;\n}\n\n/**\n * A response to a findIntentsByContext request.\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request.\n */\nexport interface FindIntentsByContextBridgeResponse {\n  meta: FindIntentsByContextBridgeResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: FindIntentsByContextBridgeResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'findIntentsByContextResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface FindIntentsByContextBridgeResponseMeta {\n  errorDetails?: ResponseErrorDetail[];\n  errorSources?: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  sources?: DesktopAgentIdentifier[];\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface FindIntentsByContextBridgeResponsePayload {\n  appIntents: AppIntent[];\n}\n\n/**\n * A response to a getAppMetadata request that contains an error.\n *\n * A response message from a Desktop Agent to the Bridge containing an error, to be used in\n * preference to the standard response when an error needs to be returned.\n */\nexport interface GetAppMetadataAgentErrorResponse {\n  meta: GetAppMetadataAgentErrorResponseMeta;\n  /**\n   * Error message payload containing an standardized error string.\n   */\n  payload: GetAppMetadataAgentErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'getAppMetadataResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface GetAppMetadataAgentErrorResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * Error message payload containing an standardized error string.\n */\nexport interface GetAppMetadataAgentErrorResponsePayload {\n  error: ErrorMessage;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Response' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request for metadata about an app\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface GetAppMetadataAgentRequest {\n  meta: GetAppMetadataAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: GetAppMetadataAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'getAppMetadataRequest';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface GetAppMetadataAgentRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: DestinationObject;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source?: SourceIdentifier;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface GetAppMetadataAgentRequestPayload {\n  app: AppDestinationIdentifier;\n}\n\n/**\n * Field that represents a destination App on a remote Desktop Agent that a request is to be\n * sent to.\n *\n * Identifies a particular Desktop Agent in Desktop Agent Bridging scenarios\n * where a request needs to be directed to a Desktop Agent rather than a specific app, or a\n * response message is returned by the Desktop Agent (or more specifically its resolver)\n * rather than a specific app. Used as a substitute for `AppIdentifier` in cases where no\n * app details are available or are appropriate.\n *\n * Array of DesktopAgentIdentifiers for responses that were not returned to the bridge\n * before the timeout or because an error occurred. May be omitted if all sources responded\n * without errors. MUST include the `desktopAgent` field when returned by the bridge.\n *\n * Array of DesktopAgentIdentifiers for the sources that generated responses to the request.\n * Will contain a single value for individual responses and multiple values for responses\n * that were collated by the bridge. May be omitted if all sources errored. MUST include the\n * `desktopAgent` field when returned by the bridge.\n *\n * Field that represents a destination Desktop Agent that a request is to be sent to.\n *\n * Identifies an application, or instance of an application, and is used to target FDC3 API\n * calls, such as `fdc3.open` or `fdc3.raiseIntent` at specific applications or application\n * instances.\n *\n * Will always include at least an `appId` field, which uniquely identifies a specific app.\n *\n * If the `instanceId` field is set then the `AppMetadata` object represents a specific\n * instance of the application that may be addressed using that Id.\n *\n * Field that represents the source application that a request or response was received\n * from.\n *\n * Identifier for the app instance that was selected (or started) to resolve the intent.\n * `source.instanceId` MUST be set, indicating the specific app instance that\n * received the intent.\n */\nexport interface AppDestinationIdentifier {\n  /**\n   * Used in Desktop Agent Bridging to attribute or target a message to a\n   * particular Desktop Agent.\n   *\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   */\n  desktopAgent: string;\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId: string;\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  [property: string]: any;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A response to a getAppMetadata request.\n *\n * A response message from a Desktop Agent to the Bridge.\n */\nexport interface GetAppMetadataAgentResponse {\n  meta: GetAppMetadataAgentResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: GetAppMetadataAgentResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'getAppMetadataResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface GetAppMetadataAgentResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface GetAppMetadataAgentResponsePayload {\n  appMetadata: AppMetadata;\n}\n\n/**\n * A response to a getAppMetadata request that contains an error.\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request, used where all connected agents returned errors.\n */\nexport interface GetAppMetadataBridgeErrorResponse {\n  meta: GetAppMetadataBridgeErrorResponseMeta;\n  /**\n   * The error message payload contains details of an error return to the app or agent that\n   * raised the original request.\n   */\n  payload: GetAppMetadataBridgeErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'getAppMetadataResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface GetAppMetadataBridgeErrorResponseMeta {\n  errorDetails: ResponseErrorDetail[];\n  errorSources: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The error message payload contains details of an error return to the app or agent that\n * raised the original request.\n */\nexport interface GetAppMetadataBridgeErrorResponsePayload {\n  error: ErrorMessage;\n}\n\n/**\n * A request for metadata about an app\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface GetAppMetadataBridgeRequest {\n  meta: GetAppMetadataBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: GetAppMetadataBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'getAppMetadataRequest';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface GetAppMetadataBridgeRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: DestinationObject;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSourceObject;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface GetAppMetadataBridgeRequestPayload {\n  app: AppDestinationIdentifier;\n}\n\n/**\n * A response to a getAppMetadata request.\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request.\n */\nexport interface GetAppMetadataBridgeResponse {\n  meta: GetAppMetadataBridgeResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: GetAppMetadataBridgeResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'getAppMetadataResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface GetAppMetadataBridgeResponseMeta {\n  errorDetails?: ResponseErrorDetail[];\n  errorSources?: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  sources?: DesktopAgentIdentifier[];\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface GetAppMetadataBridgeResponsePayload {\n  appMetadata: AppMetadata;\n}\n\n/**\n * A response to an open request that contains an error\n *\n * A response message from a Desktop Agent to the Bridge containing an error, to be used in\n * preference to the standard response when an error needs to be returned.\n */\nexport interface OpenAgentErrorResponse {\n  meta: OpenAgentErrorResponseMeta;\n  /**\n   * Error message payload containing an standardized error string.\n   */\n  payload: OpenAgentErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'openResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface OpenAgentErrorResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * Error message payload containing an standardized error string.\n */\nexport interface OpenAgentErrorResponsePayload {\n  error: OpenErrorMessage;\n}\n\n/**\n * Constants representing the errors that can be encountered when calling the `open` method\n * on the DesktopAgent object (`fdc3`).\n *\n * Array of error message strings for responses that were not returned to the bridge before\n * the timeout or because an error occurred. Should be the same length as the `errorSources`\n * array and ordered the same. May be omitted if all sources responded without errors.\n *\n * Constants representing the errors that can be encountered when calling the `findIntent`,\n * `findIntentsByContext`, `raiseIntent` or `raiseIntentForContext` methods on the\n * DesktopAgent (`fdc3`).\n */\nexport type OpenErrorMessage =\n  | 'AppNotFound'\n  | 'AppTimeout'\n  | 'DesktopAgentNotFound'\n  | 'ErrorOnLaunch'\n  | 'MalformedContext'\n  | 'ResolverUnavailable'\n  | 'AgentDisconnected'\n  | 'NotConnectedToBridge'\n  | 'ResponseToBridgeTimedOut'\n  | 'MalformedMessage';\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Response' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request to open an application\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface OpenAgentRequest {\n  meta: OpenAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: OpenAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'openRequest';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface OpenAgentRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: DestinationObject;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source: SourceObject;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface OpenAgentRequestPayload {\n  /**\n   * The application to open on the specified Desktop Agent\n   */\n  app: AppToOpen;\n  context?: ContextElement;\n}\n\n/**\n * The application to open on the specified Desktop Agent\n *\n * Identifies a particular Desktop Agent in Desktop Agent Bridging scenarios\n * where a request needs to be directed to a Desktop Agent rather than a specific app, or a\n * response message is returned by the Desktop Agent (or more specifically its resolver)\n * rather than a specific app. Used as a substitute for `AppIdentifier` in cases where no\n * app details are available or are appropriate.\n *\n * Array of DesktopAgentIdentifiers for responses that were not returned to the bridge\n * before the timeout or because an error occurred. May be omitted if all sources responded\n * without errors. MUST include the `desktopAgent` field when returned by the bridge.\n *\n * Array of DesktopAgentIdentifiers for the sources that generated responses to the request.\n * Will contain a single value for individual responses and multiple values for responses\n * that were collated by the bridge. May be omitted if all sources errored. MUST include the\n * `desktopAgent` field when returned by the bridge.\n *\n * Field that represents a destination Desktop Agent that a request is to be sent to.\n *\n * Identifies an application, or instance of an application, and is used to target FDC3 API\n * calls, such as `fdc3.open` or `fdc3.raiseIntent` at specific applications or application\n * instances.\n *\n * Will always include at least an `appId` field, which uniquely identifies a specific app.\n *\n * If the `instanceId` field is set then the `AppMetadata` object represents a specific\n * instance of the application that may be addressed using that Id.\n *\n * Field that represents the source application that a request or response was received\n * from.\n *\n * Identifier for the app instance that was selected (or started) to resolve the intent.\n * `source.instanceId` MUST be set, indicating the specific app instance that\n * received the intent.\n */\nexport interface AppToOpen {\n  /**\n   * Used in Desktop Agent Bridging to attribute or target a message to a\n   * particular Desktop Agent.\n   *\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   */\n  desktopAgent: string;\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId: string;\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  [property: string]: any;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A response to an open request\n *\n * A response message from a Desktop Agent to the Bridge.\n */\nexport interface OpenAgentResponse {\n  meta: OpenAgentResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: OpenAgentResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'openResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface OpenAgentResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface OpenAgentResponsePayload {\n  appIdentifier: AppIdentifier;\n}\n\n/**\n * A response to an open request that contains an error\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request, used where all connected agents returned errors.\n */\nexport interface OpenBridgeErrorResponse {\n  meta: OpenBridgeErrorResponseMeta;\n  /**\n   * The error message payload contains details of an error return to the app or agent that\n   * raised the original request.\n   */\n  payload: OpenBridgeErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'openResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface OpenBridgeErrorResponseMeta {\n  errorDetails: ResponseErrorDetail[];\n  errorSources: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The error message payload contains details of an error return to the app or agent that\n * raised the original request.\n */\nexport interface OpenBridgeErrorResponsePayload {\n  error: OpenErrorMessage;\n}\n\n/**\n * A request to open an application\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface OpenBridgeRequest {\n  meta: OpenBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: OpenBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'openRequest';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface OpenBridgeRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: DestinationObject;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSource;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface OpenBridgeRequestPayload {\n  /**\n   * The application to open on the specified Desktop Agent\n   */\n  app: AppToOpen;\n  context?: ContextElement;\n}\n\n/**\n * A response to an open request\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request.\n */\nexport interface OpenBridgeResponse {\n  meta: OpenBridgeResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: OpenBridgeResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'openResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface OpenBridgeResponseMeta {\n  errorDetails?: ResponseErrorDetail[];\n  errorSources?: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  sources?: DesktopAgentIdentifier[];\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface OpenBridgeResponsePayload {\n  appIdentifier: AppIdentifier;\n}\n\n/**\n * A request to broadcast on a PrivateChannel.\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface PrivateChannelBroadcastAgentRequest {\n  meta: PrivateChannelBroadcastAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelBroadcastAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.broadcast';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface PrivateChannelBroadcastAgentRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source?: SourceObject;\n  timestamp: Date;\n}\n\n/**\n * Field that represents a destination App on a remote Desktop Agent that a request is to be\n * sent to.\n *\n * Identifies a particular Desktop Agent in Desktop Agent Bridging scenarios\n * where a request needs to be directed to a Desktop Agent rather than a specific app, or a\n * response message is returned by the Desktop Agent (or more specifically its resolver)\n * rather than a specific app. Used as a substitute for `AppIdentifier` in cases where no\n * app details are available or are appropriate.\n *\n * Array of DesktopAgentIdentifiers for responses that were not returned to the bridge\n * before the timeout or because an error occurred. May be omitted if all sources responded\n * without errors. MUST include the `desktopAgent` field when returned by the bridge.\n *\n * Array of DesktopAgentIdentifiers for the sources that generated responses to the request.\n * Will contain a single value for individual responses and multiple values for responses\n * that were collated by the bridge. May be omitted if all sources errored. MUST include the\n * `desktopAgent` field when returned by the bridge.\n *\n * Field that represents a destination Desktop Agent that a request is to be sent to.\n *\n * Identifies an application, or instance of an application, and is used to target FDC3 API\n * calls, such as `fdc3.open` or `fdc3.raiseIntent` at specific applications or application\n * instances.\n *\n * Will always include at least an `appId` field, which uniquely identifies a specific app.\n *\n * If the `instanceId` field is set then the `AppMetadata` object represents a specific\n * instance of the application that may be addressed using that Id.\n *\n * Field that represents the source application that a request or response was received\n * from.\n *\n * Identifier for the app instance that was selected (or started) to resolve the intent.\n * `source.instanceId` MUST be set, indicating the specific app instance that\n * received the intent.\n *\n * Optional field that represents the destination that the request should be routed to. Must\n * be set by the Desktop Agent for API calls that include a target app parameter and must\n * include the name of the Desktop Agent hosting the target application.\n *\n * Represents identifiers that MUST include the Desktop Agent name and MAY identify a\n * specific app or instance.\n *\n * Field that represents the source application that the request was received from, or the\n * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n * be set by the bridge.\n */\nexport interface MetaDestination {\n  /**\n   * Used in Desktop Agent Bridging to attribute or target a message to a\n   * particular Desktop Agent.\n   *\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   */\n  desktopAgent: string;\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId: string;\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  [property: string]: any;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelBroadcastAgentRequestPayload {\n  /**\n   * The Id of the PrivateChannel that the broadcast was sent on\n   */\n  channelId: string;\n  /**\n   * The context object that was the payload of a broadcast message.\n   */\n  context: ContextElement;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request to broadcast on a PrivateChannel.\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface PrivateChannelBroadcastBridgeRequest {\n  meta: PrivateChannelBroadcastBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelBroadcastBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.broadcast';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface PrivateChannelBroadcastBridgeRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSource;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelBroadcastBridgeRequestPayload {\n  /**\n   * The Id of the PrivateChannel that the broadcast was sent on\n   */\n  channelId: string;\n  /**\n   * The context object that was the payload of a broadcast message.\n   */\n  context: ContextElement;\n}\n\n/**\n * A request to forward on an EventListenerAdded event, relating to a PrivateChannel\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface PrivateChannelEventListenerAddedAgentRequest {\n  meta: PrivateChannelEventListenerAddedAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelEventListenerAddedAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.eventListenerAdded';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface PrivateChannelEventListenerAddedAgentRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source?: SourceObject;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelEventListenerAddedAgentRequestPayload {\n  channelId: string;\n  listenerType: PrivateChannelEventListenerTypes;\n}\n\n/**\n * Event listener type names for Private Channel events\n */\nexport type PrivateChannelEventListenerTypes = 'onAddContextListener' | 'onUnsubscribe' | 'onDisconnect';\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request to forward on an EventListenerAdded event, relating to a PrivateChannel\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface PrivateChannelEventListenerAddedBridgeRequest {\n  meta: PrivateChannelEventListenerAddedBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelEventListenerAddedBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.eventListenerAdded';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface PrivateChannelEventListenerAddedBridgeRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSource;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelEventListenerAddedBridgeRequestPayload {\n  channelId: string;\n  listenerType: PrivateChannelEventListenerTypes;\n}\n\n/**\n * A request to forward on an EventListenerRemoved event, relating to a PrivateChannel\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface PrivateChannelEventListenerRemovedAgentRequest {\n  meta: PrivateChannelEventListenerRemovedAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelEventListenerRemovedAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.eventListenerRemoved';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface PrivateChannelEventListenerRemovedAgentRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source?: SourceObject;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelEventListenerRemovedAgentRequestPayload {\n  channelId: string;\n  listenerType: PrivateChannelEventListenerTypes;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request to forward on an EventListenerRemoved event, relating to a PrivateChannel\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface PrivateChannelEventListenerRemovedBridgeRequest {\n  meta: PrivateChannelEventListenerRemovedBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelEventListenerRemovedBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.eventListenerRemoved';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface PrivateChannelEventListenerRemovedBridgeRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSource;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelEventListenerRemovedBridgeRequestPayload {\n  channelId: string;\n  listenerType: PrivateChannelEventListenerTypes;\n}\n\n/**\n * A request to forward on an AddContextListener event, relating to a PrivateChannel\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface PrivateChannelOnAddContextListenerAgentRequest {\n  meta: PrivateChannelOnAddContextListenerAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelOnAddContextListenerAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.onAddContextListener';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface PrivateChannelOnAddContextListenerAgentRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source?: SourceObject;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelOnAddContextListenerAgentRequestPayload {\n  channelId: string;\n  contextType: string;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request to forward on an AddContextListener event, relating to a PrivateChannel\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface PrivateChannelOnAddContextListenerBridgeRequest {\n  meta: PrivateChannelOnAddContextListenerBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelOnAddContextListenerBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.onAddContextListener';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface PrivateChannelOnAddContextListenerBridgeRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSource;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelOnAddContextListenerBridgeRequestPayload {\n  channelId: string;\n  contextType: string;\n}\n\n/**\n * A request to forward on a Disconnect event, relating to a PrivateChannel\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface PrivateChannelOnDisconnectAgentRequest {\n  meta: PrivateChannelOnDisconnectAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelOnDisconnectAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.onDisconnect';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface PrivateChannelOnDisconnectAgentRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source?: SourceObject;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelOnDisconnectAgentRequestPayload {\n  channelId: string;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request to forward on a Disconnect event, relating to a PrivateChannel\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface PrivateChannelOnDisconnectBridgeRequest {\n  meta: PrivateChannelOnDisconnectBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelOnDisconnectBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.onDisconnect';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface PrivateChannelOnDisconnectBridgeRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSource;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelOnDisconnectBridgeRequestPayload {\n  channelId: string;\n}\n\n/**\n * A request to forward on an Unsubscribe event, relating to a PrivateChannel\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface PrivateChannelOnUnsubscribeAgentRequest {\n  meta: PrivateChannelOnUnsubscribeAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelOnUnsubscribeAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.onUnsubscribe';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface PrivateChannelOnUnsubscribeAgentRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source?: SourceObject;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelOnUnsubscribeAgentRequestPayload {\n  channelId: string;\n  contextType: string;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request to forward on an Unsubscribe event, relating to a PrivateChannel\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface PrivateChannelOnUnsubscribeBridgeRequest {\n  meta: ERequestMetadata;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: PrivateChannelOnUnsubscribeBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'PrivateChannel.onUnsubscribe';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface ERequestMetadata {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination?: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSource;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface PrivateChannelOnUnsubscribeBridgeRequestPayload {\n  channelId: string;\n  contextType: string;\n}\n\n/**\n * A response to a request to raise an intent that contains an error.\n *\n * A response message from a Desktop Agent to the Bridge containing an error, to be used in\n * preference to the standard response when an error needs to be returned.\n */\nexport interface RaiseIntentAgentErrorResponse {\n  meta: RaiseIntentAgentErrorResponseMeta;\n  /**\n   * Error message payload containing an standardized error string.\n   */\n  payload: RaiseIntentAgentErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'raiseIntentResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface RaiseIntentAgentErrorResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * Error message payload containing an standardized error string.\n */\nexport interface RaiseIntentAgentErrorResponsePayload {\n  error: ErrorMessage;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Response' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A request to raise an intent.\n *\n * A request message from a Desktop Agent to the Bridge.\n */\nexport interface RaiseIntentAgentRequest {\n  meta: RaiseIntentAgentRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: RaiseIntentAgentRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'raiseIntentRequest';\n}\n\n/**\n * Metadata for a request message sent by Desktop Agents to the Bridge.\n */\nexport interface RaiseIntentAgentRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself.\n   */\n  source: SourceObject;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface RaiseIntentAgentRequestPayload {\n  app: AppDestinationIdentifier;\n  context: ContextElement;\n  intent: string;\n}\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Request' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A response to a request to raise an intent.\n *\n * A response message from a Desktop Agent to the Bridge.\n */\nexport interface RaiseIntentAgentResponse {\n  meta: RaiseIntentAgentResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: RaiseIntentAgentResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'raiseIntentResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface RaiseIntentAgentResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface RaiseIntentAgentResponsePayload {\n  intentResolution: IntentResolution;\n}\n\n/**\n * IntentResolution provides a standard format for data returned upon resolving an intent.\n *\n * ```javascript\n * //resolve a \"Chain\" type intent\n * let resolution = await agent.raiseIntent(\"intentName\", context);\n *\n * //resolve a \"Client-Service\" type intent with a data response or a Channel\n * let resolution = await agent.raiseIntent(\"intentName\", context);\n * try {\n * const result = await resolution.getResult();\n * if (result && result.broadcast) {\n * console.log(`${resolution.source} returned a channel with id ${result.id}`);\n * } else if (result){\n * console.log(`${resolution.source} returned data: ${JSON.stringify(result)}`);\n * } else {\n * console.error(`${resolution.source} didn't return data`\n * }\n * } catch(error) {\n * console.error(`${resolution.source} returned an error: ${error}`);\n * }\n *\n * // Use metadata about the resolving app instance to target a further intent\n * await agent.raiseIntent(\"intentName\", context, resolution.source);\n * ```\n */\nexport interface IntentResolution {\n  /**\n   * The intent that was raised. May be used to determine which intent the user\n   * chose in response to `fdc3.raiseIntentForContext()`.\n   */\n  intent: string;\n  /**\n   * Identifier for the app instance that was selected (or started) to resolve the intent.\n   * `source.instanceId` MUST be set, indicating the specific app instance that\n   * received the intent.\n   */\n  source: AppIdentifier;\n  /**\n   * The version number of the Intents schema being used.\n   */\n  version?: string;\n}\n\n/**\n * A response to a request to raise an intent that contains an error.\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request, used where all connected agents returned errors.\n */\nexport interface RaiseIntentBridgeErrorResponse {\n  meta: RaiseIntentBridgeErrorResponseMeta;\n  /**\n   * The error message payload contains details of an error return to the app or agent that\n   * raised the original request.\n   */\n  payload: RaiseIntentBridgeErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'raiseIntentResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface RaiseIntentBridgeErrorResponseMeta {\n  errorDetails: ResponseErrorDetail[];\n  errorSources: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The error message payload contains details of an error return to the app or agent that\n * raised the original request.\n */\nexport interface RaiseIntentBridgeErrorResponsePayload {\n  error: ErrorMessage;\n}\n\n/**\n * A request to raise an intent.\n *\n * A request message forwarded from the Bridge onto a Desktop Agent connected to it.\n */\nexport interface RaiseIntentBridgeRequest {\n  meta: RaiseIntentBridgeRequestMeta;\n  /**\n   * The message payload typically contains the arguments to FDC3 API functions.\n   */\n  payload: RaiseIntentBridgeRequestPayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Request' appended.\n   */\n  type: 'raiseIntentRequest';\n}\n\n/**\n * Metadata required in a request message forwarded on by the Bridge\n */\nexport interface RaiseIntentBridgeRequestMeta {\n  /**\n   * Optional field that represents the destination that the request should be routed to. Must\n   * be set by the Desktop Agent for API calls that include a target app parameter and must\n   * include the name of the Desktop Agent hosting the target application.\n   */\n  destination: MetaDestination;\n  requestUuid: string;\n  /**\n   * Field that represents the source application that the request was received from, or the\n   * source Desktop Agent if it issued the request itself. The Desktop Agent identifier MUST\n   * be set by the bridge.\n   */\n  source: MetaSource;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains the arguments to FDC3 API functions.\n */\nexport interface RaiseIntentBridgeRequestPayload {\n  app: AppDestinationIdentifier;\n  context: ContextElement;\n  intent: string;\n}\n\n/**\n * A response to a request to raise an intent.\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request.\n */\nexport interface RaiseIntentBridgeResponse {\n  meta: RaiseIntentBridgeResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: RaiseIntentBridgeResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'raiseIntentResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface RaiseIntentBridgeResponseMeta {\n  errorDetails?: ResponseErrorDetail[];\n  errorSources?: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  sources?: DesktopAgentIdentifier[];\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface RaiseIntentBridgeResponsePayload {\n  intentResolution: IntentResolution;\n}\n\n/**\n * A secondary response to a request to raise an intent used to deliver the intent result,\n * which contains an error\n *\n * A response message from a Desktop Agent to the Bridge containing an error, to be used in\n * preference to the standard response when an error needs to be returned.\n */\nexport interface RaiseIntentResultAgentErrorResponse {\n  meta: RaiseIntentResultAgentErrorResponseMeta;\n  /**\n   * Error message payload containing an standardized error string.\n   */\n  payload: RaiseIntentResultAgentErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'raiseIntentResultResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface RaiseIntentResultAgentErrorResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * Error message payload containing an standardized error string.\n */\nexport interface RaiseIntentResultAgentErrorResponsePayload {\n  error: RaiseIntentResultErrorMessage;\n}\n\n/**\n * Array of error message strings for responses that were not returned to the bridge before\n * the timeout or because an error occurred. Should be the same length as the `errorSources`\n * array and ordered the same. May be omitted if all sources responded without errors.\n *\n * Constants representing the errors that can be encountered when calling the `open` method\n * on the DesktopAgent object (`fdc3`).\n *\n * Constants representing the errors that can be encountered when calling the `findIntent`,\n * `findIntentsByContext`, `raiseIntent` or `raiseIntentForContext` methods on the\n * DesktopAgent (`fdc3`).\n */\nexport type RaiseIntentResultErrorMessage =\n  | 'IntentHandlerRejected'\n  | 'NoResultReturned'\n  | 'AgentDisconnected'\n  | 'NotConnectedToBridge'\n  | 'ResponseToBridgeTimedOut'\n  | 'MalformedMessage';\n\n/**\n * Identifies the type of the message and it is typically set to the FDC3 function name that\n * the message relates to, e.g. 'findIntent', with 'Response' appended.\n *\n * UUID for the request\n *\n * UUID for this specific response message.\n */\n\n/**\n * A secondary response to a request to raise an intent used to deliver the intent result\n *\n * A response message from a Desktop Agent to the Bridge.\n */\nexport interface RaiseIntentResultAgentResponse {\n  meta: RaiseIntentResultAgentResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: RaiseIntentResultAgentResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'raiseIntentResultResponse';\n}\n\n/**\n * Metadata for a response messages sent by a Desktop Agent to the Bridge\n */\nexport interface RaiseIntentResultAgentResponseMeta {\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface RaiseIntentResultAgentResponsePayload {\n  intentResult: IntentResult;\n}\n\nexport interface IntentResult {\n  context?: ContextElement;\n  channel?: Channel;\n}\n\n/**\n * Represents a context channel that applications can use to send and receive\n * context data.\n *\n * Please note that There are differences in behavior when you interact with a\n * User channel via the `DesktopAgent` interface and the `Channel` interface.\n * Specifically, when 'joining' a User channel or adding a context listener\n * when already joined to a channel via the `DesktopAgent` interface, existing\n * context (matching the type of the context listener) on the channel is\n * received by the context listener immediately. Whereas, when a context\n * listener is added via the Channel interface, context is not received\n * automatically, but may be retrieved manually via the `getCurrentContext()`\n * function.\n */\nexport interface Channel {\n  /**\n   * Channels may be visualized and selectable by users. DisplayMetadata may be used to\n   * provide hints on how to see them.\n   * For App channels, displayMetadata would typically not be present.\n   */\n  displayMetadata?: DisplayMetadata;\n  /**\n   * Constant that uniquely identifies this channel.\n   */\n  id: string;\n  /**\n   * Uniquely defines each channel type.\n   * Can be \"user\", \"app\" or \"private\".\n   */\n  type: Type;\n}\n\n/**\n * Channels may be visualized and selectable by users. DisplayMetadata may be used to\n * provide hints on how to see them.\n * For App channels, displayMetadata would typically not be present.\n *\n * A system channel will be global enough to have a presence across many apps. This gives us\n * some hints\n * to render them in a standard way. It is assumed it may have other properties too, but if\n * it has these,\n * this is their meaning.\n */\nexport interface DisplayMetadata {\n  /**\n   * The color that should be associated within this channel when displaying this channel in a\n   * UI, e.g: `0xFF0000`.\n   */\n  color?: string;\n  /**\n   * A URL of an image that can be used to display this channel\n   */\n  glyph?: string;\n  /**\n   * A user-readable name for this channel, e.g: `\"Red\"`\n   */\n  name?: string;\n}\n\n/**\n * Uniquely defines each channel type.\n * Can be \"user\", \"app\" or \"private\".\n */\nexport type Type = 'app' | 'private' | 'user';\n\n/**\n * A secondary response to a request to raise an intent used to deliver the intent result,\n * which contains an error\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request, used where all connected agents returned errors.\n */\nexport interface RaiseIntentResultBridgeErrorResponse {\n  meta: RaiseIntentResultBridgeErrorResponseMeta;\n  /**\n   * The error message payload contains details of an error return to the app or agent that\n   * raised the original request.\n   */\n  payload: RaiseIntentResultBridgeErrorResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'raiseIntentResultResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface RaiseIntentResultBridgeErrorResponseMeta {\n  errorDetails: ResponseErrorDetail[];\n  errorSources: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  timestamp: Date;\n}\n\n/**\n * The error message payload contains details of an error return to the app or agent that\n * raised the original request.\n */\nexport interface RaiseIntentResultBridgeErrorResponsePayload {\n  error: RaiseIntentResultErrorMessage;\n}\n\n/**\n * A secondary response to a request to raise an intent used to deliver the intent result\n *\n * A response message from the Bridge back to the original Desktop Agent that raised the\n * request.\n */\nexport interface RaiseIntentResultBridgeResponse {\n  meta: RaiseIntentResultBridgeResponseMeta;\n  /**\n   * The message payload typically contains return values for FDC3 API functions.\n   */\n  payload: RaiseIntentResultBridgeResponsePayload;\n  /**\n   * Identifies the type of the message and it is typically set to the FDC3 function name that\n   * the message relates to, e.g. 'findIntent', with 'Response' appended.\n   */\n  type: 'raiseIntentResultResponse';\n}\n\n/**\n * Metadata required in a response message collated and/or forwarded on by the Bridge\n */\nexport interface RaiseIntentResultBridgeResponseMeta {\n  errorDetails?: ResponseErrorDetail[];\n  errorSources?: DesktopAgentIdentifier[];\n  requestUuid: string;\n  responseUuid: string;\n  sources?: DesktopAgentIdentifier[];\n  timestamp: Date;\n}\n\n/**\n * The message payload typically contains return values for FDC3 API functions.\n */\nexport interface RaiseIntentResultBridgeResponsePayload {\n  intentResult: IntentResult;\n}\n\n/**\n * The `fdc3.context` type defines the basic contract or \"shape\" for all data exchanged by\n * FDC3 operations. As such, it is not really meant to be used on its own, but is imported\n * by more specific type definitions (standardized or custom) to provide the structure and\n * properties shared by all FDC3 context data types.\n *\n * The key element of FDC3 context types is their mandatory `type` property, which is used\n * to identify what type of data the object represents, and what shape it has.\n *\n * The FDC3 context type, and all derived types, define the minimum set of fields a context\n * data object of a particular type can be expected to have, but this can always be extended\n * with custom fields as appropriate.\n */\nexport interface Context {\n  /**\n   * Context data objects may include a set of equivalent key-value pairs that can be used to\n   * help applications identify and look up the context type they receive in their own domain.\n   * The idea behind this design is that applications can provide as many equivalent\n   * identifiers to a target application as possible, e.g. an instrument may be represented by\n   * an ISIN, CUSIP or Bloomberg identifier.\n   *\n   * Identifiers do not make sense for all types of data, so the `id` property is therefore\n   * optional, but some derived types may choose to require at least one identifier.\n   */\n  id?: { [key: string]: any };\n  /**\n   * Context data objects may include a name property that can be used for more information,\n   * or display purposes. Some derived types may require the name object as mandatory,\n   * depending on use case.\n   */\n  name?: string;\n  /**\n   * The type property is the only _required_ part of the FDC3 context data schema. The FDC3\n   * [API](https://fdc3.finos.org/docs/api/spec) relies on the `type` property being present\n   * to route shared context data appropriately.\n   *\n   * FDC3 [Intents](https://fdc3.finos.org/docs/intents/spec) also register the context data\n   * types they support in an FDC3 [App\n   * Directory](https://fdc3.finos.org/docs/app-directory/overview), used for intent discovery\n   * and routing.\n   *\n   * Standardized FDC3 context types have well-known `type` properties prefixed with the\n   * `fdc3` namespace, e.g. `fdc3.instrument`. For non-standard types, e.g. those defined and\n   * used by a particular organization, the convention is to prefix them with an\n   * organization-specific namespace, e.g. `blackrock.fund`.\n   *\n   * See the [Context Data Specification](https://fdc3.finos.org/docs/context/spec) for more\n   * information about context data types.\n   */\n  type: string;\n  [property: string]: any;\n}\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toFDC3DesktopAgentAPISchema(json: string): any {\n    return cast(JSON.parse(json), 'any');\n  }\n\n  public static fDC3DesktopAgentAPISchemaToJson(value: any): string {\n    return JSON.stringify(uncast(value, 'any'), null, 2);\n  }\n\n  public static toBaseImplementationMetadata(json: string): BaseImplementationMetadata {\n    return cast(JSON.parse(json), r('BaseImplementationMetadata'));\n  }\n\n  public static baseImplementationMetadataToJson(value: BaseImplementationMetadata): string {\n    return JSON.stringify(uncast(value, r('BaseImplementationMetadata')), null, 2);\n  }\n\n  public static toAgentErrorResponseMessage(json: string): AgentErrorResponseMessage {\n    return cast(JSON.parse(json), r('AgentErrorResponseMessage'));\n  }\n\n  public static agentErrorResponseMessageToJson(value: AgentErrorResponseMessage): string {\n    return JSON.stringify(uncast(value, r('AgentErrorResponseMessage')), null, 2);\n  }\n\n  public static toAgentRequestMessage(json: string): AgentRequestMessage {\n    return cast(JSON.parse(json), r('AgentRequestMessage'));\n  }\n\n  public static agentRequestMessageToJson(value: AgentRequestMessage): string {\n    return JSON.stringify(uncast(value, r('AgentRequestMessage')), null, 2);\n  }\n\n  public static toAgentResponseMessage(json: string): AgentResponseMessage {\n    return cast(JSON.parse(json), r('AgentResponseMessage'));\n  }\n\n  public static agentResponseMessageToJson(value: AgentResponseMessage): string {\n    return JSON.stringify(uncast(value, r('AgentResponseMessage')), null, 2);\n  }\n\n  public static toBridgeErrorResponseMessage(json: string): BridgeErrorResponseMessage {\n    return cast(JSON.parse(json), r('BridgeErrorResponseMessage'));\n  }\n\n  public static bridgeErrorResponseMessageToJson(value: BridgeErrorResponseMessage): string {\n    return JSON.stringify(uncast(value, r('BridgeErrorResponseMessage')), null, 2);\n  }\n\n  public static toBridgeRequestMessage(json: string): BridgeRequestMessage {\n    return cast(JSON.parse(json), r('BridgeRequestMessage'));\n  }\n\n  public static bridgeRequestMessageToJson(value: BridgeRequestMessage): string {\n    return JSON.stringify(uncast(value, r('BridgeRequestMessage')), null, 2);\n  }\n\n  public static toBridgeResponseMessage(json: string): BridgeResponseMessage {\n    return cast(JSON.parse(json), r('BridgeResponseMessage'));\n  }\n\n  public static bridgeResponseMessageToJson(value: BridgeResponseMessage): string {\n    return JSON.stringify(uncast(value, r('BridgeResponseMessage')), null, 2);\n  }\n\n  public static toBroadcastAgentRequest(json: string): BroadcastAgentRequest {\n    return cast(JSON.parse(json), r('BroadcastAgentRequest'));\n  }\n\n  public static broadcastAgentRequestToJson(value: BroadcastAgentRequest): string {\n    return JSON.stringify(uncast(value, r('BroadcastAgentRequest')), null, 2);\n  }\n\n  public static toBroadcastBridgeRequest(json: string): BroadcastBridgeRequest {\n    return cast(JSON.parse(json), r('BroadcastBridgeRequest'));\n  }\n\n  public static broadcastBridgeRequestToJson(value: BroadcastBridgeRequest): string {\n    return JSON.stringify(uncast(value, r('BroadcastBridgeRequest')), null, 2);\n  }\n\n  public static toBridgingCommons(json: string): { [key: string]: any } {\n    return cast(JSON.parse(json), m('any'));\n  }\n\n  public static bridgingCommonsToJson(value: { [key: string]: any }): string {\n    return JSON.stringify(uncast(value, m('any')), null, 2);\n  }\n\n  public static toConnectionStepMessage(json: string): ConnectionStepMessage {\n    return cast(JSON.parse(json), r('ConnectionStepMessage'));\n  }\n\n  public static connectionStepMessageToJson(value: ConnectionStepMessage): string {\n    return JSON.stringify(uncast(value, r('ConnectionStepMessage')), null, 2);\n  }\n\n  public static toConnectionStep2Hello(json: string): ConnectionStep2Hello {\n    return cast(JSON.parse(json), r('ConnectionStep2Hello'));\n  }\n\n  public static connectionStep2HelloToJson(value: ConnectionStep2Hello): string {\n    return JSON.stringify(uncast(value, r('ConnectionStep2Hello')), null, 2);\n  }\n\n  public static toConnectionStep3Handshake(json: string): ConnectionStep3Handshake {\n    return cast(JSON.parse(json), r('ConnectionStep3Handshake'));\n  }\n\n  public static connectionStep3HandshakeToJson(value: ConnectionStep3Handshake): string {\n    return JSON.stringify(uncast(value, r('ConnectionStep3Handshake')), null, 2);\n  }\n\n  public static toConnectionStep4AuthenticationFailed(json: string): ConnectionStep4AuthenticationFailed {\n    return cast(JSON.parse(json), r('ConnectionStep4AuthenticationFailed'));\n  }\n\n  public static connectionStep4AuthenticationFailedToJson(value: ConnectionStep4AuthenticationFailed): string {\n    return JSON.stringify(uncast(value, r('ConnectionStep4AuthenticationFailed')), null, 2);\n  }\n\n  public static toConnectionStep6ConnectedAgentsUpdate(json: string): ConnectionStep6ConnectedAgentsUpdate {\n    return cast(JSON.parse(json), r('ConnectionStep6ConnectedAgentsUpdate'));\n  }\n\n  public static connectionStep6ConnectedAgentsUpdateToJson(value: ConnectionStep6ConnectedAgentsUpdate): string {\n    return JSON.stringify(uncast(value, r('ConnectionStep6ConnectedAgentsUpdate')), null, 2);\n  }\n\n  public static toFindInstancesAgentErrorResponse(json: string): FindInstancesAgentErrorResponse {\n    return cast(JSON.parse(json), r('FindInstancesAgentErrorResponse'));\n  }\n\n  public static findInstancesAgentErrorResponseToJson(value: FindInstancesAgentErrorResponse): string {\n    return JSON.stringify(uncast(value, r('FindInstancesAgentErrorResponse')), null, 2);\n  }\n\n  public static toFindInstancesAgentRequest(json: string): FindInstancesAgentRequest {\n    return cast(JSON.parse(json), r('FindInstancesAgentRequest'));\n  }\n\n  public static findInstancesAgentRequestToJson(value: FindInstancesAgentRequest): string {\n    return JSON.stringify(uncast(value, r('FindInstancesAgentRequest')), null, 2);\n  }\n\n  public static toFindInstancesAgentResponse(json: string): FindInstancesAgentResponse {\n    return cast(JSON.parse(json), r('FindInstancesAgentResponse'));\n  }\n\n  public static findInstancesAgentResponseToJson(value: FindInstancesAgentResponse): string {\n    return JSON.stringify(uncast(value, r('FindInstancesAgentResponse')), null, 2);\n  }\n\n  public static toFindInstancesBridgeErrorResponse(json: string): FindInstancesBridgeErrorResponse {\n    return cast(JSON.parse(json), r('FindInstancesBridgeErrorResponse'));\n  }\n\n  public static findInstancesBridgeErrorResponseToJson(value: FindInstancesBridgeErrorResponse): string {\n    return JSON.stringify(uncast(value, r('FindInstancesBridgeErrorResponse')), null, 2);\n  }\n\n  public static toFindInstancesBridgeRequest(json: string): FindInstancesBridgeRequest {\n    return cast(JSON.parse(json), r('FindInstancesBridgeRequest'));\n  }\n\n  public static findInstancesBridgeRequestToJson(value: FindInstancesBridgeRequest): string {\n    return JSON.stringify(uncast(value, r('FindInstancesBridgeRequest')), null, 2);\n  }\n\n  public static toFindInstancesBridgeResponse(json: string): FindInstancesBridgeResponse {\n    return cast(JSON.parse(json), r('FindInstancesBridgeResponse'));\n  }\n\n  public static findInstancesBridgeResponseToJson(value: FindInstancesBridgeResponse): string {\n    return JSON.stringify(uncast(value, r('FindInstancesBridgeResponse')), null, 2);\n  }\n\n  public static toFindIntentAgentErrorResponse(json: string): FindIntentAgentErrorResponse {\n    return cast(JSON.parse(json), r('FindIntentAgentErrorResponse'));\n  }\n\n  public static findIntentAgentErrorResponseToJson(value: FindIntentAgentErrorResponse): string {\n    return JSON.stringify(uncast(value, r('FindIntentAgentErrorResponse')), null, 2);\n  }\n\n  public static toFindIntentAgentRequest(json: string): FindIntentAgentRequest {\n    return cast(JSON.parse(json), r('FindIntentAgentRequest'));\n  }\n\n  public static findIntentAgentRequestToJson(value: FindIntentAgentRequest): string {\n    return JSON.stringify(uncast(value, r('FindIntentAgentRequest')), null, 2);\n  }\n\n  public static toFindIntentAgentResponse(json: string): FindIntentAgentResponse {\n    return cast(JSON.parse(json), r('FindIntentAgentResponse'));\n  }\n\n  public static findIntentAgentResponseToJson(value: FindIntentAgentResponse): string {\n    return JSON.stringify(uncast(value, r('FindIntentAgentResponse')), null, 2);\n  }\n\n  public static toFindIntentBridgeErrorResponse(json: string): FindIntentBridgeErrorResponse {\n    return cast(JSON.parse(json), r('FindIntentBridgeErrorResponse'));\n  }\n\n  public static findIntentBridgeErrorResponseToJson(value: FindIntentBridgeErrorResponse): string {\n    return JSON.stringify(uncast(value, r('FindIntentBridgeErrorResponse')), null, 2);\n  }\n\n  public static toFindIntentBridgeRequest(json: string): FindIntentBridgeRequest {\n    return cast(JSON.parse(json), r('FindIntentBridgeRequest'));\n  }\n\n  public static findIntentBridgeRequestToJson(value: FindIntentBridgeRequest): string {\n    return JSON.stringify(uncast(value, r('FindIntentBridgeRequest')), null, 2);\n  }\n\n  public static toFindIntentBridgeResponse(json: string): FindIntentBridgeResponse {\n    return cast(JSON.parse(json), r('FindIntentBridgeResponse'));\n  }\n\n  public static findIntentBridgeResponseToJson(value: FindIntentBridgeResponse): string {\n    return JSON.stringify(uncast(value, r('FindIntentBridgeResponse')), null, 2);\n  }\n\n  public static toFindIntentsByContextAgentErrorResponse(json: string): FindIntentsByContextAgentErrorResponse {\n    return cast(JSON.parse(json), r('FindIntentsByContextAgentErrorResponse'));\n  }\n\n  public static findIntentsByContextAgentErrorResponseToJson(value: FindIntentsByContextAgentErrorResponse): string {\n    return JSON.stringify(uncast(value, r('FindIntentsByContextAgentErrorResponse')), null, 2);\n  }\n\n  public static toFindIntentsByContextAgentRequest(json: string): FindIntentsByContextAgentRequest {\n    return cast(JSON.parse(json), r('FindIntentsByContextAgentRequest'));\n  }\n\n  public static findIntentsByContextAgentRequestToJson(value: FindIntentsByContextAgentRequest): string {\n    return JSON.stringify(uncast(value, r('FindIntentsByContextAgentRequest')), null, 2);\n  }\n\n  public static toFindIntentsByContextAgentResponse(json: string): FindIntentsByContextAgentResponse {\n    return cast(JSON.parse(json), r('FindIntentsByContextAgentResponse'));\n  }\n\n  public static findIntentsByContextAgentResponseToJson(value: FindIntentsByContextAgentResponse): string {\n    return JSON.stringify(uncast(value, r('FindIntentsByContextAgentResponse')), null, 2);\n  }\n\n  public static toFindIntentsByContextBridgeErrorResponse(json: string): FindIntentsByContextBridgeErrorResponse {\n    return cast(JSON.parse(json), r('FindIntentsByContextBridgeErrorResponse'));\n  }\n\n  public static findIntentsByContextBridgeErrorResponseToJson(value: FindIntentsByContextBridgeErrorResponse): string {\n    return JSON.stringify(uncast(value, r('FindIntentsByContextBridgeErrorResponse')), null, 2);\n  }\n\n  public static toFindIntentsByContextBridgeRequest(json: string): FindIntentsByContextBridgeRequest {\n    return cast(JSON.parse(json), r('FindIntentsByContextBridgeRequest'));\n  }\n\n  public static findIntentsByContextBridgeRequestToJson(value: FindIntentsByContextBridgeRequest): string {\n    return JSON.stringify(uncast(value, r('FindIntentsByContextBridgeRequest')), null, 2);\n  }\n\n  public static toFindIntentsByContextBridgeResponse(json: string): FindIntentsByContextBridgeResponse {\n    return cast(JSON.parse(json), r('FindIntentsByContextBridgeResponse'));\n  }\n\n  public static findIntentsByContextBridgeResponseToJson(value: FindIntentsByContextBridgeResponse): string {\n    return JSON.stringify(uncast(value, r('FindIntentsByContextBridgeResponse')), null, 2);\n  }\n\n  public static toGetAppMetadataAgentErrorResponse(json: string): GetAppMetadataAgentErrorResponse {\n    return cast(JSON.parse(json), r('GetAppMetadataAgentErrorResponse'));\n  }\n\n  public static getAppMetadataAgentErrorResponseToJson(value: GetAppMetadataAgentErrorResponse): string {\n    return JSON.stringify(uncast(value, r('GetAppMetadataAgentErrorResponse')), null, 2);\n  }\n\n  public static toGetAppMetadataAgentRequest(json: string): GetAppMetadataAgentRequest {\n    return cast(JSON.parse(json), r('GetAppMetadataAgentRequest'));\n  }\n\n  public static getAppMetadataAgentRequestToJson(value: GetAppMetadataAgentRequest): string {\n    return JSON.stringify(uncast(value, r('GetAppMetadataAgentRequest')), null, 2);\n  }\n\n  public static toGetAppMetadataAgentResponse(json: string): GetAppMetadataAgentResponse {\n    return cast(JSON.parse(json), r('GetAppMetadataAgentResponse'));\n  }\n\n  public static getAppMetadataAgentResponseToJson(value: GetAppMetadataAgentResponse): string {\n    return JSON.stringify(uncast(value, r('GetAppMetadataAgentResponse')), null, 2);\n  }\n\n  public static toGetAppMetadataBridgeErrorResponse(json: string): GetAppMetadataBridgeErrorResponse {\n    return cast(JSON.parse(json), r('GetAppMetadataBridgeErrorResponse'));\n  }\n\n  public static getAppMetadataBridgeErrorResponseToJson(value: GetAppMetadataBridgeErrorResponse): string {\n    return JSON.stringify(uncast(value, r('GetAppMetadataBridgeErrorResponse')), null, 2);\n  }\n\n  public static toGetAppMetadataBridgeRequest(json: string): GetAppMetadataBridgeRequest {\n    return cast(JSON.parse(json), r('GetAppMetadataBridgeRequest'));\n  }\n\n  public static getAppMetadataBridgeRequestToJson(value: GetAppMetadataBridgeRequest): string {\n    return JSON.stringify(uncast(value, r('GetAppMetadataBridgeRequest')), null, 2);\n  }\n\n  public static toGetAppMetadataBridgeResponse(json: string): GetAppMetadataBridgeResponse {\n    return cast(JSON.parse(json), r('GetAppMetadataBridgeResponse'));\n  }\n\n  public static getAppMetadataBridgeResponseToJson(value: GetAppMetadataBridgeResponse): string {\n    return JSON.stringify(uncast(value, r('GetAppMetadataBridgeResponse')), null, 2);\n  }\n\n  public static toOpenAgentErrorResponse(json: string): OpenAgentErrorResponse {\n    return cast(JSON.parse(json), r('OpenAgentErrorResponse'));\n  }\n\n  public static openAgentErrorResponseToJson(value: OpenAgentErrorResponse): string {\n    return JSON.stringify(uncast(value, r('OpenAgentErrorResponse')), null, 2);\n  }\n\n  public static toOpenAgentRequest(json: string): OpenAgentRequest {\n    return cast(JSON.parse(json), r('OpenAgentRequest'));\n  }\n\n  public static openAgentRequestToJson(value: OpenAgentRequest): string {\n    return JSON.stringify(uncast(value, r('OpenAgentRequest')), null, 2);\n  }\n\n  public static toOpenAgentResponse(json: string): OpenAgentResponse {\n    return cast(JSON.parse(json), r('OpenAgentResponse'));\n  }\n\n  public static openAgentResponseToJson(value: OpenAgentResponse): string {\n    return JSON.stringify(uncast(value, r('OpenAgentResponse')), null, 2);\n  }\n\n  public static toOpenBridgeErrorResponse(json: string): OpenBridgeErrorResponse {\n    return cast(JSON.parse(json), r('OpenBridgeErrorResponse'));\n  }\n\n  public static openBridgeErrorResponseToJson(value: OpenBridgeErrorResponse): string {\n    return JSON.stringify(uncast(value, r('OpenBridgeErrorResponse')), null, 2);\n  }\n\n  public static toOpenBridgeRequest(json: string): OpenBridgeRequest {\n    return cast(JSON.parse(json), r('OpenBridgeRequest'));\n  }\n\n  public static openBridgeRequestToJson(value: OpenBridgeRequest): string {\n    return JSON.stringify(uncast(value, r('OpenBridgeRequest')), null, 2);\n  }\n\n  public static toOpenBridgeResponse(json: string): OpenBridgeResponse {\n    return cast(JSON.parse(json), r('OpenBridgeResponse'));\n  }\n\n  public static openBridgeResponseToJson(value: OpenBridgeResponse): string {\n    return JSON.stringify(uncast(value, r('OpenBridgeResponse')), null, 2);\n  }\n\n  public static toPrivateChannelBroadcastAgentRequest(json: string): PrivateChannelBroadcastAgentRequest {\n    return cast(JSON.parse(json), r('PrivateChannelBroadcastAgentRequest'));\n  }\n\n  public static privateChannelBroadcastAgentRequestToJson(value: PrivateChannelBroadcastAgentRequest): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelBroadcastAgentRequest')), null, 2);\n  }\n\n  public static toPrivateChannelBroadcastBridgeRequest(json: string): PrivateChannelBroadcastBridgeRequest {\n    return cast(JSON.parse(json), r('PrivateChannelBroadcastBridgeRequest'));\n  }\n\n  public static privateChannelBroadcastBridgeRequestToJson(value: PrivateChannelBroadcastBridgeRequest): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelBroadcastBridgeRequest')), null, 2);\n  }\n\n  public static toPrivateChannelEventListenerAddedAgentRequest(\n    json: string\n  ): PrivateChannelEventListenerAddedAgentRequest {\n    return cast(JSON.parse(json), r('PrivateChannelEventListenerAddedAgentRequest'));\n  }\n\n  public static privateChannelEventListenerAddedAgentRequestToJson(\n    value: PrivateChannelEventListenerAddedAgentRequest\n  ): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelEventListenerAddedAgentRequest')), null, 2);\n  }\n\n  public static toPrivateChannelEventListenerAddedBridgeRequest(\n    json: string\n  ): PrivateChannelEventListenerAddedBridgeRequest {\n    return cast(JSON.parse(json), r('PrivateChannelEventListenerAddedBridgeRequest'));\n  }\n\n  public static privateChannelEventListenerAddedBridgeRequestToJson(\n    value: PrivateChannelEventListenerAddedBridgeRequest\n  ): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelEventListenerAddedBridgeRequest')), null, 2);\n  }\n\n  public static toPrivateChannelEventListenerRemovedAgentRequest(\n    json: string\n  ): PrivateChannelEventListenerRemovedAgentRequest {\n    return cast(JSON.parse(json), r('PrivateChannelEventListenerRemovedAgentRequest'));\n  }\n\n  public static privateChannelEventListenerRemovedAgentRequestToJson(\n    value: PrivateChannelEventListenerRemovedAgentRequest\n  ): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelEventListenerRemovedAgentRequest')), null, 2);\n  }\n\n  public static toPrivateChannelEventListenerRemovedBridgeRequest(\n    json: string\n  ): PrivateChannelEventListenerRemovedBridgeRequest {\n    return cast(JSON.parse(json), r('PrivateChannelEventListenerRemovedBridgeRequest'));\n  }\n\n  public static privateChannelEventListenerRemovedBridgeRequestToJson(\n    value: PrivateChannelEventListenerRemovedBridgeRequest\n  ): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelEventListenerRemovedBridgeRequest')), null, 2);\n  }\n\n  public static toPrivateChannelOnAddContextListenerAgentRequest(\n    json: string\n  ): PrivateChannelOnAddContextListenerAgentRequest {\n    return cast(JSON.parse(json), r('PrivateChannelOnAddContextListenerAgentRequest'));\n  }\n\n  public static privateChannelOnAddContextListenerAgentRequestToJson(\n    value: PrivateChannelOnAddContextListenerAgentRequest\n  ): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelOnAddContextListenerAgentRequest')), null, 2);\n  }\n\n  public static toPrivateChannelOnAddContextListenerBridgeRequest(\n    json: string\n  ): PrivateChannelOnAddContextListenerBridgeRequest {\n    return cast(JSON.parse(json), r('PrivateChannelOnAddContextListenerBridgeRequest'));\n  }\n\n  public static privateChannelOnAddContextListenerBridgeRequestToJson(\n    value: PrivateChannelOnAddContextListenerBridgeRequest\n  ): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelOnAddContextListenerBridgeRequest')), null, 2);\n  }\n\n  public static toPrivateChannelOnDisconnectAgentRequest(json: string): PrivateChannelOnDisconnectAgentRequest {\n    return cast(JSON.parse(json), r('PrivateChannelOnDisconnectAgentRequest'));\n  }\n\n  public static privateChannelOnDisconnectAgentRequestToJson(value: PrivateChannelOnDisconnectAgentRequest): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelOnDisconnectAgentRequest')), null, 2);\n  }\n\n  public static toPrivateChannelOnDisconnectBridgeRequest(json: string): PrivateChannelOnDisconnectBridgeRequest {\n    return cast(JSON.parse(json), r('PrivateChannelOnDisconnectBridgeRequest'));\n  }\n\n  public static privateChannelOnDisconnectBridgeRequestToJson(value: PrivateChannelOnDisconnectBridgeRequest): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelOnDisconnectBridgeRequest')), null, 2);\n  }\n\n  public static toPrivateChannelOnUnsubscribeAgentRequest(json: string): PrivateChannelOnUnsubscribeAgentRequest {\n    return cast(JSON.parse(json), r('PrivateChannelOnUnsubscribeAgentRequest'));\n  }\n\n  public static privateChannelOnUnsubscribeAgentRequestToJson(value: PrivateChannelOnUnsubscribeAgentRequest): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelOnUnsubscribeAgentRequest')), null, 2);\n  }\n\n  public static toPrivateChannelOnUnsubscribeBridgeRequest(json: string): PrivateChannelOnUnsubscribeBridgeRequest {\n    return cast(JSON.parse(json), r('PrivateChannelOnUnsubscribeBridgeRequest'));\n  }\n\n  public static privateChannelOnUnsubscribeBridgeRequestToJson(\n    value: PrivateChannelOnUnsubscribeBridgeRequest\n  ): string {\n    return JSON.stringify(uncast(value, r('PrivateChannelOnUnsubscribeBridgeRequest')), null, 2);\n  }\n\n  public static toRaiseIntentAgentErrorResponse(json: string): RaiseIntentAgentErrorResponse {\n    return cast(JSON.parse(json), r('RaiseIntentAgentErrorResponse'));\n  }\n\n  public static raiseIntentAgentErrorResponseToJson(value: RaiseIntentAgentErrorResponse): string {\n    return JSON.stringify(uncast(value, r('RaiseIntentAgentErrorResponse')), null, 2);\n  }\n\n  public static toRaiseIntentAgentRequest(json: string): RaiseIntentAgentRequest {\n    return cast(JSON.parse(json), r('RaiseIntentAgentRequest'));\n  }\n\n  public static raiseIntentAgentRequestToJson(value: RaiseIntentAgentRequest): string {\n    return JSON.stringify(uncast(value, r('RaiseIntentAgentRequest')), null, 2);\n  }\n\n  public static toRaiseIntentAgentResponse(json: string): RaiseIntentAgentResponse {\n    return cast(JSON.parse(json), r('RaiseIntentAgentResponse'));\n  }\n\n  public static raiseIntentAgentResponseToJson(value: RaiseIntentAgentResponse): string {\n    return JSON.stringify(uncast(value, r('RaiseIntentAgentResponse')), null, 2);\n  }\n\n  public static toRaiseIntentBridgeErrorResponse(json: string): RaiseIntentBridgeErrorResponse {\n    return cast(JSON.parse(json), r('RaiseIntentBridgeErrorResponse'));\n  }\n\n  public static raiseIntentBridgeErrorResponseToJson(value: RaiseIntentBridgeErrorResponse): string {\n    return JSON.stringify(uncast(value, r('RaiseIntentBridgeErrorResponse')), null, 2);\n  }\n\n  public static toRaiseIntentBridgeRequest(json: string): RaiseIntentBridgeRequest {\n    return cast(JSON.parse(json), r('RaiseIntentBridgeRequest'));\n  }\n\n  public static raiseIntentBridgeRequestToJson(value: RaiseIntentBridgeRequest): string {\n    return JSON.stringify(uncast(value, r('RaiseIntentBridgeRequest')), null, 2);\n  }\n\n  public static toRaiseIntentBridgeResponse(json: string): RaiseIntentBridgeResponse {\n    return cast(JSON.parse(json), r('RaiseIntentBridgeResponse'));\n  }\n\n  public static raiseIntentBridgeResponseToJson(value: RaiseIntentBridgeResponse): string {\n    return JSON.stringify(uncast(value, r('RaiseIntentBridgeResponse')), null, 2);\n  }\n\n  public static toRaiseIntentResultAgentErrorResponse(json: string): RaiseIntentResultAgentErrorResponse {\n    return cast(JSON.parse(json), r('RaiseIntentResultAgentErrorResponse'));\n  }\n\n  public static raiseIntentResultAgentErrorResponseToJson(value: RaiseIntentResultAgentErrorResponse): string {\n    return JSON.stringify(uncast(value, r('RaiseIntentResultAgentErrorResponse')), null, 2);\n  }\n\n  public static toRaiseIntentResultAgentResponse(json: string): RaiseIntentResultAgentResponse {\n    return cast(JSON.parse(json), r('RaiseIntentResultAgentResponse'));\n  }\n\n  public static raiseIntentResultAgentResponseToJson(value: RaiseIntentResultAgentResponse): string {\n    return JSON.stringify(uncast(value, r('RaiseIntentResultAgentResponse')), null, 2);\n  }\n\n  public static toRaiseIntentResultBridgeErrorResponse(json: string): RaiseIntentResultBridgeErrorResponse {\n    return cast(JSON.parse(json), r('RaiseIntentResultBridgeErrorResponse'));\n  }\n\n  public static raiseIntentResultBridgeErrorResponseToJson(value: RaiseIntentResultBridgeErrorResponse): string {\n    return JSON.stringify(uncast(value, r('RaiseIntentResultBridgeErrorResponse')), null, 2);\n  }\n\n  public static toRaiseIntentResultBridgeResponse(json: string): RaiseIntentResultBridgeResponse {\n    return cast(JSON.parse(json), r('RaiseIntentResultBridgeResponse'));\n  }\n\n  public static raiseIntentResultBridgeResponseToJson(value: RaiseIntentResultBridgeResponse): string {\n    return JSON.stringify(uncast(value, r('RaiseIntentResultBridgeResponse')), null, 2);\n  }\n\n  public static toContext(json: string): Context {\n    return cast(JSON.parse(json), r('Context'));\n  }\n\n  public static contextToJson(value: Context): string {\n    return JSON.stringify(uncast(value, r('Context')), null, 2);\n  }\n}\n\nfunction invalidValue(typ: any, val: any, key: any, parent: any = ''): never {\n  const prettyTyp = prettyTypeName(typ);\n  const parentText = parent ? ` on ${parent}` : '';\n  const keyText = key ? ` for key \"${key}\"` : '';\n  throw Error(`Invalid value${keyText}${parentText}. Expected ${prettyTyp} but got ${JSON.stringify(val)}`);\n}\n\nfunction prettyTypeName(typ: any): string {\n  if (Array.isArray(typ)) {\n    if (typ.length === 2 && typ[0] === undefined) {\n      return `an optional ${prettyTypeName(typ[1])}`;\n    } else {\n      return `one of [${typ\n        .map(a => {\n          return prettyTypeName(a);\n        })\n        .join(', ')}]`;\n    }\n  } else if (typeof typ === 'object' && typ.literal !== undefined) {\n    return typ.literal;\n  } else {\n    return typeof typ;\n  }\n}\n\nfunction jsonToJSProps(typ: any): any {\n  if (typ.jsonToJS === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => (map[p.json] = { key: p.js, typ: p.typ }));\n    typ.jsonToJS = map;\n  }\n  return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n  if (typ.jsToJSON === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => (map[p.js] = { key: p.json, typ: p.typ }));\n    typ.jsToJSON = map;\n  }\n  return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = '', parent: any = ''): any {\n  function transformPrimitive(typ: string, val: any): any {\n    if (typeof typ === typeof val) return val;\n    return invalidValue(typ, val, key, parent);\n  }\n\n  function transformUnion(typs: any[], val: any): any {\n    // val must validate against one typ in typs\n    const l = typs.length;\n    for (let i = 0; i < l; i++) {\n      const typ = typs[i];\n      try {\n        return transform(val, typ, getProps);\n      } catch (_) {}\n    }\n    return invalidValue(typs, val, key, parent);\n  }\n\n  function transformEnum(cases: string[], val: any): any {\n    if (cases.indexOf(val) !== -1) return val;\n    return invalidValue(\n      cases.map(a => {\n        return l(a);\n      }),\n      val,\n      key,\n      parent\n    );\n  }\n\n  function transformArray(typ: any, val: any): any {\n    // val must be an array with no invalid elements\n    if (!Array.isArray(val)) return invalidValue(l('array'), val, key, parent);\n    return val.map(el => transform(el, typ, getProps));\n  }\n\n  function transformDate(val: any): any {\n    if (val === null) {\n      return null;\n    }\n    const d = new Date(val);\n    if (isNaN(d.valueOf())) {\n      return invalidValue(l('Date'), val, key, parent);\n    }\n    return d;\n  }\n\n  function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n    if (val === null || typeof val !== 'object' || Array.isArray(val)) {\n      return invalidValue(l(ref || 'object'), val, key, parent);\n    }\n    const result: any = {};\n    Object.getOwnPropertyNames(props).forEach(key => {\n      const prop = props[key];\n      const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n      result[prop.key] = transform(v, prop.typ, getProps, key, ref);\n    });\n    Object.getOwnPropertyNames(val).forEach(key => {\n      if (!Object.prototype.hasOwnProperty.call(props, key)) {\n        result[key] = transform(val[key], additional, getProps, key, ref);\n      }\n    });\n    return result;\n  }\n\n  if (typ === 'any') return val;\n  if (typ === null) {\n    if (val === null) return val;\n    return invalidValue(typ, val, key, parent);\n  }\n  if (typ === false) return invalidValue(typ, val, key, parent);\n  let ref: any = undefined;\n  while (typeof typ === 'object' && typ.ref !== undefined) {\n    ref = typ.ref;\n    typ = typeMap[typ.ref];\n  }\n  if (Array.isArray(typ)) return transformEnum(typ, val);\n  if (typeof typ === 'object') {\n    return typ.hasOwnProperty('unionMembers')\n      ? transformUnion(typ.unionMembers, val)\n      : typ.hasOwnProperty('arrayItems')\n      ? transformArray(typ.arrayItems, val)\n      : typ.hasOwnProperty('props')\n      ? transformObject(getProps(typ), typ.additional, val)\n      : invalidValue(typ, val, key, parent);\n  }\n  // Numbers can be parsed by Date but shouldn't be.\n  if (typ === Date && typeof val !== 'number') return transformDate(val);\n  return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsToJSONProps);\n}\n\nfunction l(typ: any) {\n  return { literal: typ };\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n  return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n  return { props, additional };\n}\n\nfunction m(additional: any) {\n  return { props: [], additional };\n}\n\nfunction r(name: string) {\n  return { ref: name };\n}\n\nconst typeMap: any = {\n  BaseImplementationMetadata: o(\n    [\n      { json: 'fdc3Version', js: 'fdc3Version', typ: '' },\n      { json: 'optionalFeatures', js: 'optionalFeatures', typ: r('BaseImplementationMetadataOptionalFeatures') },\n      { json: 'provider', js: 'provider', typ: '' },\n      { json: 'providerVersion', js: 'providerVersion', typ: u(undefined, '') },\n    ],\n    false\n  ),\n  BaseImplementationMetadataOptionalFeatures: o(\n    [\n      { json: 'DesktopAgentBridging', js: 'DesktopAgentBridging', typ: true },\n      { json: 'OriginatingAppMetadata', js: 'OriginatingAppMetadata', typ: true },\n      { json: 'UserChannelMembershipAPIs', js: 'UserChannelMembershipAPIs', typ: true },\n    ],\n    false\n  ),\n  AgentErrorResponseMessage: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('AgentResponseMetadata') },\n      { json: 'payload', js: 'payload', typ: r('ErrorResponseMessagePayload') },\n      { json: 'type', js: 'type', typ: r('ResponseMessageType') },\n    ],\n    false\n  ),\n  AgentResponseMetadata: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  ErrorResponseMessagePayload: o([{ json: 'error', js: 'error', typ: r('ResponseErrorDetail') }], 'any'),\n  AgentRequestMessage: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('AgentRequestMetadata') },\n      { json: 'payload', js: 'payload', typ: m('any') },\n      { json: 'type', js: 'type', typ: r('RequestMessageType') },\n    ],\n    false\n  ),\n  AgentRequestMetadata: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('BridgeParticipantIdentifier')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: u(undefined, r('SourceIdentifier')) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  BridgeParticipantIdentifier: o(\n    [\n      { json: 'desktopAgent', js: 'desktopAgent', typ: '' },\n      { json: 'appId', js: 'appId', typ: u(undefined, '') },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  SourceIdentifier: o(\n    [\n      { json: 'appId', js: 'appId', typ: u(undefined, '') },\n      { json: 'desktopAgent', js: 'desktopAgent', typ: u(undefined, '') },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  AgentResponseMessage: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('AgentResponseMetadata') },\n      { json: 'payload', js: 'payload', typ: m('any') },\n      { json: 'type', js: 'type', typ: r('ResponseMessageType') },\n    ],\n    false\n  ),\n  BridgeErrorResponseMessage: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('BridgeErrorResponseMessageMeta') },\n      { json: 'payload', js: 'payload', typ: r('ResponseErrorMessagePayload') },\n      { json: 'type', js: 'type', typ: '' },\n    ],\n    false\n  ),\n  BridgeErrorResponseMessageMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: a(r('ResponseErrorDetail')) },\n      { json: 'errorSources', js: 'errorSources', typ: a(r('DesktopAgentIdentifier')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  DesktopAgentIdentifier: o([{ json: 'desktopAgent', js: 'desktopAgent', typ: '' }], 'any'),\n  ResponseErrorMessagePayload: o([{ json: 'error', js: 'error', typ: u(undefined, r('ResponseErrorDetail')) }], 'any'),\n  BridgeRequestMessage: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('BridgeRequestMetadata') },\n      { json: 'payload', js: 'payload', typ: m('any') },\n      { json: 'type', js: 'type', typ: '' },\n    ],\n    false\n  ),\n  BridgeRequestMetadata: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('BridgeParticipantIdentifier')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('BridgeParticipantIdentifier') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  BridgeResponseMessage: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('BridgeResponseMessageMeta') },\n      { json: 'payload', js: 'payload', typ: m('any') },\n      { json: 'type', js: 'type', typ: '' },\n    ],\n    false\n  ),\n  BridgeResponseMessageMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: u(undefined, a(r('ResponseErrorDetail'))) },\n      { json: 'errorSources', js: 'errorSources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'sources', js: 'sources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  BroadcastAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('BroadcastAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('BroadcastAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('BroadcastRequestMessageType') },\n    ],\n    false\n  ),\n  BroadcastAgentRequestMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('SourceObject') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  SourceObject: o(\n    [\n      { json: 'appId', js: 'appId', typ: '' },\n      { json: 'desktopAgent', js: 'desktopAgent', typ: u(undefined, '') },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  BroadcastAgentRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'context', js: 'context', typ: r('ContextElement') },\n    ],\n    false\n  ),\n  ContextElement: o(\n    [\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: '' },\n    ],\n    'any'\n  ),\n  BroadcastBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('BroadcastBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('BroadcastBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('BroadcastRequestMessageType') },\n    ],\n    false\n  ),\n  BroadcastBridgeRequestMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSource') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  MetaSource: o(\n    [\n      { json: 'appId', js: 'appId', typ: '' },\n      { json: 'desktopAgent', js: 'desktopAgent', typ: '' },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  BroadcastBridgeRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'context', js: 'context', typ: r('ContextElement') },\n    ],\n    false\n  ),\n  ConnectionStepMessage: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('ConnectionStepMetadata') },\n      { json: 'payload', js: 'payload', typ: m('any') },\n      { json: 'type', js: 'type', typ: r('ConnectionStepMessageType') },\n    ],\n    false\n  ),\n  ConnectionStepMetadata: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: u(undefined, '') },\n      { json: 'responseUuid', js: 'responseUuid', typ: u(undefined, '') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  ConnectionStep2Hello: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('ConnectionStep2HelloMeta') },\n      { json: 'payload', js: 'payload', typ: r('ConnectionStep2HelloPayload') },\n      { json: 'type', js: 'type', typ: r('ConnectionStep2HelloType') },\n    ],\n    false\n  ),\n  ConnectionStep2HelloMeta: o([{ json: 'timestamp', js: 'timestamp', typ: Date }], false),\n  ConnectionStep2HelloPayload: o(\n    [\n      { json: 'authRequired', js: 'authRequired', typ: true },\n      { json: 'authToken', js: 'authToken', typ: u(undefined, '') },\n      { json: 'desktopAgentBridgeVersion', js: 'desktopAgentBridgeVersion', typ: '' },\n      { json: 'supportedFDC3Versions', js: 'supportedFDC3Versions', typ: a('') },\n    ],\n    false\n  ),\n  ConnectionStep3Handshake: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('ConnectionStep3HandshakeMeta') },\n      { json: 'payload', js: 'payload', typ: r('ConnectionStep3HandshakePayload') },\n      { json: 'type', js: 'type', typ: r('ConnectionStep3HandshakeType') },\n    ],\n    false\n  ),\n  ConnectionStep3HandshakeMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  ConnectionStep3HandshakePayload: o(\n    [\n      { json: 'authToken', js: 'authToken', typ: u(undefined, '') },\n      { json: 'channelsState', js: 'channelsState', typ: m(a(r('ContextElement'))) },\n      { json: 'implementationMetadata', js: 'implementationMetadata', typ: r('ImplementationMetadataElement') },\n      { json: 'requestedName', js: 'requestedName', typ: '' },\n    ],\n    false\n  ),\n  ImplementationMetadataElement: o(\n    [\n      { json: 'fdc3Version', js: 'fdc3Version', typ: '' },\n      { json: 'optionalFeatures', js: 'optionalFeatures', typ: r('ImplementationMetadataOptionalFeatures') },\n      { json: 'provider', js: 'provider', typ: '' },\n      { json: 'providerVersion', js: 'providerVersion', typ: u(undefined, '') },\n    ],\n    false\n  ),\n  ImplementationMetadataOptionalFeatures: o(\n    [\n      { json: 'DesktopAgentBridging', js: 'DesktopAgentBridging', typ: true },\n      { json: 'OriginatingAppMetadata', js: 'OriginatingAppMetadata', typ: true },\n      { json: 'UserChannelMembershipAPIs', js: 'UserChannelMembershipAPIs', typ: true },\n    ],\n    false\n  ),\n  ConnectionStep4AuthenticationFailed: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('ConnectionStep4AuthenticationFailedMeta') },\n      { json: 'payload', js: 'payload', typ: r('ConnectionStep4AuthenticationFailedPayload') },\n      { json: 'type', js: 'type', typ: r('ConnectionStep4AuthenticationFailedType') },\n    ],\n    false\n  ),\n  ConnectionStep4AuthenticationFailedMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  ConnectionStep4AuthenticationFailedPayload: o([{ json: 'message', js: 'message', typ: u(undefined, '') }], false),\n  ConnectionStep6ConnectedAgentsUpdate: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('ConnectionStep6ConnectedAgentsUpdateMeta') },\n      { json: 'payload', js: 'payload', typ: r('ConnectionStep6ConnectedAgentsUpdatePayload') },\n      { json: 'type', js: 'type', typ: r('ConnectionStep6ConnectedAgentsUpdateType') },\n    ],\n    false\n  ),\n  ConnectionStep6ConnectedAgentsUpdateMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  ConnectionStep6ConnectedAgentsUpdatePayload: o(\n    [\n      { json: 'addAgent', js: 'addAgent', typ: u(undefined, '') },\n      { json: 'allAgents', js: 'allAgents', typ: a(r('ImplementationMetadataElement')) },\n      { json: 'channelsState', js: 'channelsState', typ: u(undefined, m(a(r('ContextElement')))) },\n      { json: 'removeAgent', js: 'removeAgent', typ: u(undefined, '') },\n    ],\n    false\n  ),\n  FindInstancesAgentErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindInstancesAgentErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindInstancesAgentErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindInstancesResponseMessageType') },\n    ],\n    false\n  ),\n  FindInstancesAgentErrorResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindInstancesAgentErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('ErrorMessage') }], false),\n  FindInstancesAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindInstancesAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindInstancesAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('FindInstancesRequestMessageType') },\n    ],\n    false\n  ),\n  FindInstancesAgentRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('DestinationObject')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: u(undefined, r('SourceIdentifier')) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  DestinationObject: o(\n    [\n      { json: 'desktopAgent', js: 'desktopAgent', typ: '' },\n      { json: 'appId', js: 'appId', typ: u(undefined, '') },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  FindInstancesAgentRequestPayload: o([{ json: 'app', js: 'app', typ: r('AppIdentifier') }], false),\n  AppIdentifier: o(\n    [\n      { json: 'appId', js: 'appId', typ: '' },\n      { json: 'desktopAgent', js: 'desktopAgent', typ: u(undefined, '') },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  FindInstancesAgentResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindInstancesAgentResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindInstancesAgentResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindInstancesResponseMessageType') },\n    ],\n    false\n  ),\n  FindInstancesAgentResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindInstancesAgentResponsePayload: o(\n    [{ json: 'appIdentifiers', js: 'appIdentifiers', typ: a(r('AppMetadata')) }],\n    false\n  ),\n  AppMetadata: o(\n    [\n      { json: 'appId', js: 'appId', typ: '' },\n      { json: 'description', js: 'description', typ: u(undefined, '') },\n      { json: 'desktopAgent', js: 'desktopAgent', typ: u(undefined, '') },\n      { json: 'icons', js: 'icons', typ: u(undefined, a(r('Icon'))) },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n      { json: 'instanceMetadata', js: 'instanceMetadata', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'resultType', js: 'resultType', typ: u(undefined, u(null, '')) },\n      { json: 'screenshots', js: 'screenshots', typ: u(undefined, a(r('Image'))) },\n      { json: 'title', js: 'title', typ: u(undefined, '') },\n      { json: 'tooltip', js: 'tooltip', typ: u(undefined, '') },\n      { json: 'version', js: 'version', typ: u(undefined, '') },\n    ],\n    false\n  ),\n  Icon: o(\n    [\n      { json: 'size', js: 'size', typ: u(undefined, '') },\n      { json: 'src', js: 'src', typ: '' },\n      { json: 'type', js: 'type', typ: u(undefined, '') },\n    ],\n    false\n  ),\n  Image: o(\n    [\n      { json: 'label', js: 'label', typ: u(undefined, '') },\n      { json: 'size', js: 'size', typ: u(undefined, '') },\n      { json: 'src', js: 'src', typ: '' },\n      { json: 'type', js: 'type', typ: u(undefined, '') },\n    ],\n    false\n  ),\n  FindInstancesBridgeErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindInstancesBridgeErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindInstancesBridgeErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindInstancesResponseMessageType') },\n    ],\n    false\n  ),\n  FindInstancesBridgeErrorResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: a(r('ResponseErrorDetail')) },\n      { json: 'errorSources', js: 'errorSources', typ: a(r('DesktopAgentIdentifier')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindInstancesBridgeErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('ErrorMessage') }], false),\n  FindInstancesBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindInstancesBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindInstancesBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('FindInstancesRequestMessageType') },\n    ],\n    false\n  ),\n  FindInstancesBridgeRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('DestinationObject')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSourceObject') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  MetaSourceObject: o(\n    [\n      { json: 'appId', js: 'appId', typ: u(undefined, '') },\n      { json: 'desktopAgent', js: 'desktopAgent', typ: '' },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  FindInstancesBridgeRequestPayload: o([{ json: 'app', js: 'app', typ: r('AppIdentifier') }], false),\n  FindInstancesBridgeResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindInstancesBridgeResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindInstancesBridgeResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindInstancesResponseMessageType') },\n    ],\n    false\n  ),\n  FindInstancesBridgeResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: u(undefined, a(r('ResponseErrorDetail'))) },\n      { json: 'errorSources', js: 'errorSources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'sources', js: 'sources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindInstancesBridgeResponsePayload: o(\n    [{ json: 'appIdentifiers', js: 'appIdentifiers', typ: a(r('AppMetadata')) }],\n    false\n  ),\n  FindIntentAgentErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentAgentErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentAgentErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentResponseMessageType') },\n    ],\n    false\n  ),\n  FindIntentAgentErrorResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindIntentAgentErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('ErrorMessage') }], false),\n  FindIntentAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentRequestMessageType') },\n    ],\n    false\n  ),\n  FindIntentAgentRequestMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: u(undefined, r('SourceIdentifier')) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n      { json: 'destination', js: 'destination', typ: u(undefined, r('BridgeParticipantIdentifier')) },\n    ],\n    false\n  ),\n  FindIntentAgentRequestPayload: o(\n    [\n      { json: 'context', js: 'context', typ: u(undefined, r('ContextElement')) },\n      { json: 'intent', js: 'intent', typ: '' },\n    ],\n    false\n  ),\n  FindIntentAgentResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentAgentResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentAgentResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentResponseMessageType') },\n    ],\n    false\n  ),\n  FindIntentAgentResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindIntentAgentResponsePayload: o([{ json: 'appIntent', js: 'appIntent', typ: r('AppIntent') }], false),\n  AppIntent: o(\n    [\n      { json: 'apps', js: 'apps', typ: a(r('AppMetadata')) },\n      { json: 'intent', js: 'intent', typ: r('IntentMetadata') },\n    ],\n    false\n  ),\n  IntentMetadata: o(\n    [\n      { json: 'displayName', js: 'displayName', typ: '' },\n      { json: 'name', js: 'name', typ: '' },\n    ],\n    false\n  ),\n  FindIntentBridgeErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentBridgeErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentBridgeErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentResponseMessageType') },\n    ],\n    false\n  ),\n  FindIntentBridgeErrorResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: a(r('ResponseErrorDetail')) },\n      { json: 'errorSources', js: 'errorSources', typ: a(r('DesktopAgentIdentifier')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindIntentBridgeErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('ErrorMessage') }], false),\n  FindIntentBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentRequestMessageType') },\n    ],\n    false\n  ),\n  FindIntentBridgeRequestMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('BridgeParticipantIdentifier') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n      { json: 'destination', js: 'destination', typ: u(undefined, r('BridgeParticipantIdentifier')) },\n    ],\n    false\n  ),\n  FindIntentBridgeRequestPayload: o(\n    [\n      { json: 'context', js: 'context', typ: u(undefined, r('ContextElement')) },\n      { json: 'intent', js: 'intent', typ: '' },\n    ],\n    false\n  ),\n  FindIntentBridgeResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentBridgeResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentBridgeResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentResponseMessageType') },\n    ],\n    false\n  ),\n  FindIntentBridgeResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: u(undefined, a(r('ResponseErrorDetail'))) },\n      { json: 'errorSources', js: 'errorSources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'sources', js: 'sources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindIntentBridgeResponsePayload: o([{ json: 'appIntent', js: 'appIntent', typ: r('AppIntent') }], false),\n  FindIntentsByContextAgentErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentsByContextAgentErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentsByContextAgentErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentsByContextResponseMessageType') },\n    ],\n    false\n  ),\n  FindIntentsByContextAgentErrorResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindIntentsByContextAgentErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('ErrorMessage') }], false),\n  FindIntentsByContextAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentsByContextAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentsByContextAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentsByContextRequestMessageType') },\n    ],\n    false\n  ),\n  FindIntentsByContextAgentRequestMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: u(undefined, r('SourceObject')) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n      { json: 'destination', js: 'destination', typ: u(undefined, r('BridgeParticipantIdentifier')) },\n    ],\n    false\n  ),\n  FindIntentsByContextAgentRequestPayload: o([{ json: 'context', js: 'context', typ: r('ContextElement') }], false),\n  FindIntentsByContextAgentResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentsByContextAgentResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentsByContextAgentResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentsByContextResponseMessageType') },\n    ],\n    false\n  ),\n  FindIntentsByContextAgentResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindIntentsByContextAgentResponsePayload: o(\n    [{ json: 'appIntents', js: 'appIntents', typ: a(r('AppIntent')) }],\n    false\n  ),\n  FindIntentsByContextBridgeErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentsByContextBridgeErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentsByContextBridgeErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentsByContextResponseMessageType') },\n    ],\n    false\n  ),\n  FindIntentsByContextBridgeErrorResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: a(r('ResponseErrorDetail')) },\n      { json: 'errorSources', js: 'errorSources', typ: a(r('DesktopAgentIdentifier')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindIntentsByContextBridgeErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('ErrorMessage') }], false),\n  FindIntentsByContextBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentsByContextBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentsByContextBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentsByContextRequestMessageType') },\n    ],\n    false\n  ),\n  FindIntentsByContextBridgeRequestMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSource') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n      { json: 'destination', js: 'destination', typ: u(undefined, r('BridgeParticipantIdentifier')) },\n    ],\n    false\n  ),\n  FindIntentsByContextBridgeRequestPayload: o([{ json: 'context', js: 'context', typ: r('ContextElement') }], false),\n  FindIntentsByContextBridgeResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('FindIntentsByContextBridgeResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('FindIntentsByContextBridgeResponsePayload') },\n      { json: 'type', js: 'type', typ: r('FindIntentsByContextResponseMessageType') },\n    ],\n    false\n  ),\n  FindIntentsByContextBridgeResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: u(undefined, a(r('ResponseErrorDetail'))) },\n      { json: 'errorSources', js: 'errorSources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'sources', js: 'sources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  FindIntentsByContextBridgeResponsePayload: o(\n    [{ json: 'appIntents', js: 'appIntents', typ: a(r('AppIntent')) }],\n    false\n  ),\n  GetAppMetadataAgentErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('GetAppMetadataAgentErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('GetAppMetadataAgentErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('GetAppMetadataResponseMessageType') },\n    ],\n    false\n  ),\n  GetAppMetadataAgentErrorResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  GetAppMetadataAgentErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('ErrorMessage') }], false),\n  GetAppMetadataAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('GetAppMetadataAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('GetAppMetadataAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('GetAppMetadataRequestMessageType') },\n    ],\n    false\n  ),\n  GetAppMetadataAgentRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('DestinationObject')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: u(undefined, r('SourceIdentifier')) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  GetAppMetadataAgentRequestPayload: o([{ json: 'app', js: 'app', typ: r('AppDestinationIdentifier') }], false),\n  AppDestinationIdentifier: o(\n    [\n      { json: 'desktopAgent', js: 'desktopAgent', typ: '' },\n      { json: 'appId', js: 'appId', typ: '' },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  GetAppMetadataAgentResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('GetAppMetadataAgentResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('GetAppMetadataAgentResponsePayload') },\n      { json: 'type', js: 'type', typ: r('GetAppMetadataResponseMessageType') },\n    ],\n    false\n  ),\n  GetAppMetadataAgentResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  GetAppMetadataAgentResponsePayload: o([{ json: 'appMetadata', js: 'appMetadata', typ: r('AppMetadata') }], false),\n  GetAppMetadataBridgeErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('GetAppMetadataBridgeErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('GetAppMetadataBridgeErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('GetAppMetadataResponseMessageType') },\n    ],\n    false\n  ),\n  GetAppMetadataBridgeErrorResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: a(r('ResponseErrorDetail')) },\n      { json: 'errorSources', js: 'errorSources', typ: a(r('DesktopAgentIdentifier')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  GetAppMetadataBridgeErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('ErrorMessage') }], false),\n  GetAppMetadataBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('GetAppMetadataBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('GetAppMetadataBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('GetAppMetadataRequestMessageType') },\n    ],\n    false\n  ),\n  GetAppMetadataBridgeRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('DestinationObject')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSourceObject') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  GetAppMetadataBridgeRequestPayload: o([{ json: 'app', js: 'app', typ: r('AppDestinationIdentifier') }], false),\n  GetAppMetadataBridgeResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('GetAppMetadataBridgeResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('GetAppMetadataBridgeResponsePayload') },\n      { json: 'type', js: 'type', typ: r('GetAppMetadataResponseMessageType') },\n    ],\n    false\n  ),\n  GetAppMetadataBridgeResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: u(undefined, a(r('ResponseErrorDetail'))) },\n      { json: 'errorSources', js: 'errorSources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'sources', js: 'sources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  GetAppMetadataBridgeResponsePayload: o([{ json: 'appMetadata', js: 'appMetadata', typ: r('AppMetadata') }], false),\n  OpenAgentErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('OpenAgentErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('OpenAgentErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('OpenResponseMessageType') },\n    ],\n    false\n  ),\n  OpenAgentErrorResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  OpenAgentErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('OpenErrorMessage') }], false),\n  OpenAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('OpenAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('OpenAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('OpenRequestMessageType') },\n    ],\n    false\n  ),\n  OpenAgentRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('DestinationObject')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('SourceObject') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  OpenAgentRequestPayload: o(\n    [\n      { json: 'app', js: 'app', typ: r('AppToOpen') },\n      { json: 'context', js: 'context', typ: u(undefined, r('ContextElement')) },\n    ],\n    false\n  ),\n  AppToOpen: o(\n    [\n      { json: 'desktopAgent', js: 'desktopAgent', typ: '' },\n      { json: 'appId', js: 'appId', typ: '' },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  OpenAgentResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('OpenAgentResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('OpenAgentResponsePayload') },\n      { json: 'type', js: 'type', typ: r('OpenResponseMessageType') },\n    ],\n    false\n  ),\n  OpenAgentResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  OpenAgentResponsePayload: o([{ json: 'appIdentifier', js: 'appIdentifier', typ: r('AppIdentifier') }], false),\n  OpenBridgeErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('OpenBridgeErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('OpenBridgeErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('OpenResponseMessageType') },\n    ],\n    false\n  ),\n  OpenBridgeErrorResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: a(r('ResponseErrorDetail')) },\n      { json: 'errorSources', js: 'errorSources', typ: a(r('DesktopAgentIdentifier')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  OpenBridgeErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('OpenErrorMessage') }], false),\n  OpenBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('OpenBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('OpenBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('OpenRequestMessageType') },\n    ],\n    false\n  ),\n  OpenBridgeRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('DestinationObject')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSource') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  OpenBridgeRequestPayload: o(\n    [\n      { json: 'app', js: 'app', typ: r('AppToOpen') },\n      { json: 'context', js: 'context', typ: u(undefined, r('ContextElement')) },\n    ],\n    false\n  ),\n  OpenBridgeResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('OpenBridgeResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('OpenBridgeResponsePayload') },\n      { json: 'type', js: 'type', typ: r('OpenResponseMessageType') },\n    ],\n    false\n  ),\n  OpenBridgeResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: u(undefined, a(r('ResponseErrorDetail'))) },\n      { json: 'errorSources', js: 'errorSources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'sources', js: 'sources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  OpenBridgeResponsePayload: o([{ json: 'appIdentifier', js: 'appIdentifier', typ: r('AppIdentifier') }], false),\n  PrivateChannelBroadcastAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('PrivateChannelBroadcastAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelBroadcastAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelBroadcastMessageType') },\n    ],\n    false\n  ),\n  PrivateChannelBroadcastAgentRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: u(undefined, r('SourceObject')) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  MetaDestination: o(\n    [\n      { json: 'desktopAgent', js: 'desktopAgent', typ: '' },\n      { json: 'appId', js: 'appId', typ: '' },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  PrivateChannelBroadcastAgentRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'context', js: 'context', typ: r('ContextElement') },\n    ],\n    false\n  ),\n  PrivateChannelBroadcastBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('PrivateChannelBroadcastBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelBroadcastBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelBroadcastMessageType') },\n    ],\n    false\n  ),\n  PrivateChannelBroadcastBridgeRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSource') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  PrivateChannelBroadcastBridgeRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'context', js: 'context', typ: r('ContextElement') },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerAddedAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('PrivateChannelEventListenerAddedAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelEventListenerAddedAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelEventListenerAddedMessageType') },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerAddedAgentRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: u(undefined, r('SourceObject')) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerAddedAgentRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'listenerType', js: 'listenerType', typ: r('PrivateChannelEventListenerTypes') },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerAddedBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('PrivateChannelEventListenerAddedBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelEventListenerAddedBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelEventListenerAddedMessageType') },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerAddedBridgeRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSource') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerAddedBridgeRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'listenerType', js: 'listenerType', typ: r('PrivateChannelEventListenerTypes') },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerRemovedAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('PrivateChannelEventListenerRemovedAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelEventListenerRemovedAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelEventListenerRemovedMessageType') },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerRemovedAgentRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: u(undefined, r('SourceObject')) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerRemovedAgentRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'listenerType', js: 'listenerType', typ: r('PrivateChannelEventListenerTypes') },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerRemovedBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('PrivateChannelEventListenerRemovedBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelEventListenerRemovedBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelEventListenerRemovedMessageType') },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerRemovedBridgeRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSource') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  PrivateChannelEventListenerRemovedBridgeRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'listenerType', js: 'listenerType', typ: r('PrivateChannelEventListenerTypes') },\n    ],\n    false\n  ),\n  PrivateChannelOnAddContextListenerAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('PrivateChannelOnAddContextListenerAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelOnAddContextListenerAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelOnAddContextListenerMessageType') },\n    ],\n    false\n  ),\n  PrivateChannelOnAddContextListenerAgentRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: u(undefined, r('SourceObject')) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  PrivateChannelOnAddContextListenerAgentRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'contextType', js: 'contextType', typ: '' },\n    ],\n    false\n  ),\n  PrivateChannelOnAddContextListenerBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('PrivateChannelOnAddContextListenerBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelOnAddContextListenerBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelOnAddContextListenerMessageType') },\n    ],\n    false\n  ),\n  PrivateChannelOnAddContextListenerBridgeRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSource') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  PrivateChannelOnAddContextListenerBridgeRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'contextType', js: 'contextType', typ: '' },\n    ],\n    false\n  ),\n  PrivateChannelOnDisconnectAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('PrivateChannelOnDisconnectAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelOnDisconnectAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelOnDisconnectMessageType') },\n    ],\n    false\n  ),\n  PrivateChannelOnDisconnectAgentRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: u(undefined, r('SourceObject')) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  PrivateChannelOnDisconnectAgentRequestPayload: o([{ json: 'channelId', js: 'channelId', typ: '' }], false),\n  PrivateChannelOnDisconnectBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('PrivateChannelOnDisconnectBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelOnDisconnectBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelOnDisconnectMessageType') },\n    ],\n    false\n  ),\n  PrivateChannelOnDisconnectBridgeRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSource') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  PrivateChannelOnDisconnectBridgeRequestPayload: o([{ json: 'channelId', js: 'channelId', typ: '' }], false),\n  PrivateChannelOnUnsubscribeAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('PrivateChannelOnUnsubscribeAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelOnUnsubscribeAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelOnUnsubscribeMessageType') },\n    ],\n    false\n  ),\n  PrivateChannelOnUnsubscribeAgentRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: u(undefined, r('SourceObject')) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  PrivateChannelOnUnsubscribeAgentRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'contextType', js: 'contextType', typ: '' },\n    ],\n    false\n  ),\n  PrivateChannelOnUnsubscribeBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('ERequestMetadata') },\n      { json: 'payload', js: 'payload', typ: r('PrivateChannelOnUnsubscribeBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('PrivateChannelOnUnsubscribeMessageType') },\n    ],\n    false\n  ),\n  ERequestMetadata: o(\n    [\n      { json: 'destination', js: 'destination', typ: u(undefined, r('MetaDestination')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSource') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  PrivateChannelOnUnsubscribeBridgeRequestPayload: o(\n    [\n      { json: 'channelId', js: 'channelId', typ: '' },\n      { json: 'contextType', js: 'contextType', typ: '' },\n    ],\n    false\n  ),\n  RaiseIntentAgentErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('RaiseIntentAgentErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('RaiseIntentAgentErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('RaiseIntentResponseMessageType') },\n    ],\n    false\n  ),\n  RaiseIntentAgentErrorResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  RaiseIntentAgentErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('ErrorMessage') }], false),\n  RaiseIntentAgentRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('RaiseIntentAgentRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('RaiseIntentAgentRequestPayload') },\n      { json: 'type', js: 'type', typ: r('RaiseIntentRequestMessageType') },\n    ],\n    false\n  ),\n  RaiseIntentAgentRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: r('MetaDestination') },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('SourceObject') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  RaiseIntentAgentRequestPayload: o(\n    [\n      { json: 'app', js: 'app', typ: r('AppDestinationIdentifier') },\n      { json: 'context', js: 'context', typ: r('ContextElement') },\n      { json: 'intent', js: 'intent', typ: '' },\n    ],\n    false\n  ),\n  RaiseIntentAgentResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('RaiseIntentAgentResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('RaiseIntentAgentResponsePayload') },\n      { json: 'type', js: 'type', typ: r('RaiseIntentResponseMessageType') },\n    ],\n    false\n  ),\n  RaiseIntentAgentResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  RaiseIntentAgentResponsePayload: o(\n    [{ json: 'intentResolution', js: 'intentResolution', typ: r('IntentResolution') }],\n    false\n  ),\n  IntentResolution: o(\n    [\n      { json: 'intent', js: 'intent', typ: '' },\n      { json: 'source', js: 'source', typ: r('AppIdentifier') },\n      { json: 'version', js: 'version', typ: u(undefined, '') },\n    ],\n    false\n  ),\n  RaiseIntentBridgeErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('RaiseIntentBridgeErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('RaiseIntentBridgeErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('RaiseIntentResponseMessageType') },\n    ],\n    false\n  ),\n  RaiseIntentBridgeErrorResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: a(r('ResponseErrorDetail')) },\n      { json: 'errorSources', js: 'errorSources', typ: a(r('DesktopAgentIdentifier')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  RaiseIntentBridgeErrorResponsePayload: o([{ json: 'error', js: 'error', typ: r('ErrorMessage') }], false),\n  RaiseIntentBridgeRequest: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('RaiseIntentBridgeRequestMeta') },\n      { json: 'payload', js: 'payload', typ: r('RaiseIntentBridgeRequestPayload') },\n      { json: 'type', js: 'type', typ: r('RaiseIntentRequestMessageType') },\n    ],\n    false\n  ),\n  RaiseIntentBridgeRequestMeta: o(\n    [\n      { json: 'destination', js: 'destination', typ: r('MetaDestination') },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'source', js: 'source', typ: r('MetaSource') },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  RaiseIntentBridgeRequestPayload: o(\n    [\n      { json: 'app', js: 'app', typ: r('AppDestinationIdentifier') },\n      { json: 'context', js: 'context', typ: r('ContextElement') },\n      { json: 'intent', js: 'intent', typ: '' },\n    ],\n    false\n  ),\n  RaiseIntentBridgeResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('RaiseIntentBridgeResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('RaiseIntentBridgeResponsePayload') },\n      { json: 'type', js: 'type', typ: r('RaiseIntentResponseMessageType') },\n    ],\n    false\n  ),\n  RaiseIntentBridgeResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: u(undefined, a(r('ResponseErrorDetail'))) },\n      { json: 'errorSources', js: 'errorSources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'sources', js: 'sources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  RaiseIntentBridgeResponsePayload: o(\n    [{ json: 'intentResolution', js: 'intentResolution', typ: r('IntentResolution') }],\n    false\n  ),\n  RaiseIntentResultAgentErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('RaiseIntentResultAgentErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('RaiseIntentResultAgentErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('RaiseIntentResultResponseMessageType') },\n    ],\n    false\n  ),\n  RaiseIntentResultAgentErrorResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  RaiseIntentResultAgentErrorResponsePayload: o(\n    [{ json: 'error', js: 'error', typ: r('RaiseIntentResultErrorMessage') }],\n    false\n  ),\n  RaiseIntentResultAgentResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('RaiseIntentResultAgentResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('RaiseIntentResultAgentResponsePayload') },\n      { json: 'type', js: 'type', typ: r('RaiseIntentResultResponseMessageType') },\n    ],\n    false\n  ),\n  RaiseIntentResultAgentResponseMeta: o(\n    [\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  RaiseIntentResultAgentResponsePayload: o(\n    [{ json: 'intentResult', js: 'intentResult', typ: r('IntentResult') }],\n    false\n  ),\n  IntentResult: o(\n    [\n      { json: 'context', js: 'context', typ: u(undefined, r('ContextElement')) },\n      { json: 'channel', js: 'channel', typ: u(undefined, r('Channel')) },\n    ],\n    false\n  ),\n  Channel: o(\n    [\n      { json: 'displayMetadata', js: 'displayMetadata', typ: u(undefined, r('DisplayMetadata')) },\n      { json: 'id', js: 'id', typ: '' },\n      { json: 'type', js: 'type', typ: r('Type') },\n    ],\n    false\n  ),\n  DisplayMetadata: o(\n    [\n      { json: 'color', js: 'color', typ: u(undefined, '') },\n      { json: 'glyph', js: 'glyph', typ: u(undefined, '') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    false\n  ),\n  RaiseIntentResultBridgeErrorResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('RaiseIntentResultBridgeErrorResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('RaiseIntentResultBridgeErrorResponsePayload') },\n      { json: 'type', js: 'type', typ: r('RaiseIntentResultResponseMessageType') },\n    ],\n    false\n  ),\n  RaiseIntentResultBridgeErrorResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: a(r('ResponseErrorDetail')) },\n      { json: 'errorSources', js: 'errorSources', typ: a(r('DesktopAgentIdentifier')) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  RaiseIntentResultBridgeErrorResponsePayload: o(\n    [{ json: 'error', js: 'error', typ: r('RaiseIntentResultErrorMessage') }],\n    false\n  ),\n  RaiseIntentResultBridgeResponse: o(\n    [\n      { json: 'meta', js: 'meta', typ: r('RaiseIntentResultBridgeResponseMeta') },\n      { json: 'payload', js: 'payload', typ: r('RaiseIntentResultBridgeResponsePayload') },\n      { json: 'type', js: 'type', typ: r('RaiseIntentResultResponseMessageType') },\n    ],\n    false\n  ),\n  RaiseIntentResultBridgeResponseMeta: o(\n    [\n      { json: 'errorDetails', js: 'errorDetails', typ: u(undefined, a(r('ResponseErrorDetail'))) },\n      { json: 'errorSources', js: 'errorSources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'requestUuid', js: 'requestUuid', typ: '' },\n      { json: 'responseUuid', js: 'responseUuid', typ: '' },\n      { json: 'sources', js: 'sources', typ: u(undefined, a(r('DesktopAgentIdentifier'))) },\n      { json: 'timestamp', js: 'timestamp', typ: Date },\n    ],\n    false\n  ),\n  RaiseIntentResultBridgeResponsePayload: o(\n    [{ json: 'intentResult', js: 'intentResult', typ: r('IntentResult') }],\n    false\n  ),\n  Context: o(\n    [\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: '' },\n    ],\n    'any'\n  ),\n  ResponseErrorDetail: [\n    'AccessDenied',\n    'AgentDisconnected',\n    'AppNotFound',\n    'AppTimeout',\n    'CreationFailed',\n    'DesktopAgentNotFound',\n    'ErrorOnLaunch',\n    'IntentDeliveryFailed',\n    'IntentHandlerRejected',\n    'MalformedContext',\n    'MalformedMessage',\n    'NoAppsFound',\n    'NoChannelFound',\n    'NoResultReturned',\n    'NotConnectedToBridge',\n    'ResolverTimeout',\n    'ResolverUnavailable',\n    'ResponseToBridgeTimedOut',\n    'TargetAppUnavailable',\n    'TargetInstanceUnavailable',\n    'UserCancelledResolution',\n  ],\n  ResponseMessageType: [\n    'findInstancesResponse',\n    'findIntentResponse',\n    'findIntentsByContextResponse',\n    'getAppMetadataResponse',\n    'openResponse',\n    'raiseIntentResponse',\n    'raiseIntentResultResponse',\n  ],\n  RequestMessageType: [\n    'broadcastRequest',\n    'findInstancesRequest',\n    'findIntentRequest',\n    'findIntentsByContextRequest',\n    'getAppMetadataRequest',\n    'openRequest',\n    'PrivateChannel.broadcast',\n    'PrivateChannel.eventListenerAdded',\n    'PrivateChannel.eventListenerRemoved',\n    'PrivateChannel.onAddContextListener',\n    'PrivateChannel.onDisconnect',\n    'PrivateChannel.onUnsubscribe',\n    'raiseIntentRequest',\n  ],\n  BroadcastRequestMessageType: ['broadcastRequest'],\n  ConnectionStepMessageType: ['authenticationFailed', 'connectedAgentsUpdate', 'handshake', 'hello'],\n  ConnectionStep2HelloType: ['hello'],\n  ConnectionStep3HandshakeType: ['handshake'],\n  ConnectionStep4AuthenticationFailedType: ['authenticationFailed'],\n  ConnectionStep6ConnectedAgentsUpdateType: ['connectedAgentsUpdate'],\n  ErrorMessage: [\n    'AgentDisconnected',\n    'DesktopAgentNotFound',\n    'IntentDeliveryFailed',\n    'MalformedContext',\n    'MalformedMessage',\n    'NoAppsFound',\n    'NotConnectedToBridge',\n    'ResolverTimeout',\n    'ResolverUnavailable',\n    'ResponseToBridgeTimedOut',\n    'TargetAppUnavailable',\n    'TargetInstanceUnavailable',\n    'UserCancelledResolution',\n  ],\n  FindInstancesResponseMessageType: ['findInstancesResponse'],\n  FindInstancesRequestMessageType: ['findInstancesRequest'],\n  FindIntentResponseMessageType: ['findIntentResponse'],\n  FindIntentRequestMessageType: ['findIntentRequest'],\n  FindIntentsByContextResponseMessageType: ['findIntentsByContextResponse'],\n  FindIntentsByContextRequestMessageType: ['findIntentsByContextRequest'],\n  GetAppMetadataResponseMessageType: ['getAppMetadataResponse'],\n  GetAppMetadataRequestMessageType: ['getAppMetadataRequest'],\n  OpenErrorMessage: [\n    'AgentDisconnected',\n    'AppNotFound',\n    'AppTimeout',\n    'DesktopAgentNotFound',\n    'ErrorOnLaunch',\n    'MalformedContext',\n    'MalformedMessage',\n    'NotConnectedToBridge',\n    'ResolverUnavailable',\n    'ResponseToBridgeTimedOut',\n  ],\n  OpenResponseMessageType: ['openResponse'],\n  OpenRequestMessageType: ['openRequest'],\n  PrivateChannelBroadcastMessageType: ['PrivateChannel.broadcast'],\n  PrivateChannelEventListenerTypes: ['onAddContextListener', 'onDisconnect', 'onUnsubscribe'],\n  PrivateChannelEventListenerAddedMessageType: ['PrivateChannel.eventListenerAdded'],\n  PrivateChannelEventListenerRemovedMessageType: ['PrivateChannel.eventListenerRemoved'],\n  PrivateChannelOnAddContextListenerMessageType: ['PrivateChannel.onAddContextListener'],\n  PrivateChannelOnDisconnectMessageType: ['PrivateChannel.onDisconnect'],\n  PrivateChannelOnUnsubscribeMessageType: ['PrivateChannel.onUnsubscribe'],\n  RaiseIntentResponseMessageType: ['raiseIntentResponse'],\n  RaiseIntentRequestMessageType: ['raiseIntentRequest'],\n  RaiseIntentResultErrorMessage: [\n    'AgentDisconnected',\n    'IntentHandlerRejected',\n    'MalformedMessage',\n    'NoResultReturned',\n    'NotConnectedToBridge',\n    'ResponseToBridgeTimedOut',\n  ],\n  RaiseIntentResultResponseMessageType: ['raiseIntentResultResponse'],\n  Type: ['app', 'private', 'user'],\n};\n", "/**\n * SPDX-License-Identifier: Apache-2.0\n * Copyright FINOS FDC3 contributors - see NOTICE file\n */\n\n/** Constants representing the errors that can be encountered when calling the `open` method on the DesktopAgent object (`fdc3`). */\nexport enum OpenError {\n  /** Returned if the specified application is not found.*/\n  AppNotFound = 'AppNotFound',\n  /** Returned if the specified application fails to launch correctly.*/\n  ErrorOnLaunch = 'ErrorOnLaunch',\n  /** Returned if the specified application launches but fails to add a context listener in order to receive the context passed to the `fdc3.open` call.*/\n  AppTimeout = 'AppTimeout',\n  /** Returned if the FDC3 desktop agent implementation is not currently able to handle the request.*/\n  ResolverUnavailable = 'ResolverUnavailable',\n  /** Returned if a call to the `open` function is made with an invalid context argument. Contexts should be Objects with at least a `type` field that has a `string` value.*/\n  MalformedContext = 'MalformedContext',\n  /** @experimental Returned if the specified Desktop Agent is not found, via a connected Desktop Agent Bridge.*/\n  DesktopAgentNotFound = 'DesktopAgentNotFound',\n}\n\n/** Constants representing the errors that can be encountered when calling the `findIntent`, `findIntentsByContext`, `raiseIntent` or `raiseIntentForContext` methods on the DesktopAgent (`fdc3`). */\nexport enum ResolveError {\n  /** SHOULD be returned if no apps are available that can resolve the intent and context combination.*/\n  NoAppsFound = 'NoAppsFound',\n  /** Returned if the FDC3 desktop agent implementation is not currently able to handle the request.*/\n  ResolverUnavailable = 'ResolverUnavailable',\n  /** Returned if the user cancelled the resolution request, for example by closing or cancelling a resolver UI.*/\n  UserCancelled = 'UserCancelledResolution',\n  /** SHOULD be returned if a timeout cancels an intent resolution that required user interaction. Please use `ResolverUnavailable` instead for situations where a resolver UI or similar fails.*/\n  ResolverTimeout = 'ResolverTimeout',\n  /** Returned if a specified target application is not available or a new instance of it cannot be opened. */\n  TargetAppUnavailable = 'TargetAppUnavailable',\n  /** Returned if a specified target application instance is not available, for example because it has been closed. */\n  TargetInstanceUnavailable = 'TargetInstanceUnavailable',\n  /** Returned if the intent and context could not be delivered to the selected application or instance, for example because it has not added an intent handler within a timeout.*/\n  IntentDeliveryFailed = 'IntentDeliveryFailed',\n  /** Returned if a call to one of the `raiseIntent` functions is made with an invalid context argument. Contexts should be Objects with at least a `type` field that has a `string` value.*/\n  MalformedContext = 'MalformedContext',\n  /** @experimental Returned if the specified Desktop Agent is not found, via a connected Desktop Agent Bridge.*/\n  DesktopAgentNotFound = 'DesktopAgentNotFound',\n}\n\nexport enum ResultError {\n  /** Returned if the intent handler exited without returning a valid result (a promise resolving to a Context, Channel object or void). */\n  NoResultReturned = 'NoResultReturned',\n  /** Returned if the Intent handler function processing the raised intent throws an error or rejects the Promise it returned. */\n  IntentHandlerRejected = 'IntentHandlerRejected',\n}\n\nexport enum ChannelError {\n  /** Returned if the specified channel is not found when attempting to join a channel via the `joinUserChannel` function  of the DesktopAgent (`fdc3`).*/\n  NoChannelFound = 'NoChannelFound',\n  /** SHOULD be returned when a request to join a user channel or to a retrieve a Channel object via the `joinUserChannel` or `getOrCreateChannel` methods of the DesktopAgent (`fdc3`) object is denied. */\n  AccessDenied = 'AccessDenied',\n  /** SHOULD be returned when a channel cannot be created or retrieved via the `getOrCreateChannel` method of the DesktopAgent (`fdc3`).*/\n  CreationFailed = 'CreationFailed',\n  /** Returned if a call to the `broadcast` functions is made with an invalid context argument. Contexts should be Objects with at least a `type` field that has a `string` value.*/\n  MalformedContext = 'MalformedContext',\n}\n\nexport enum BridgingError {\n  /** @experimental Returned if a Desktop Agent did not return a response, via Desktop Agent Bridging, within the alloted timeout. */\n  ResponseTimedOut = 'ResponseToBridgeTimedOut',\n  /** @experimental Returned if a Desktop Agent that has been targeted by a particular request has been disconnected from the Bridge before a response has been received from it. */\n  AgentDisconnected = 'AgentDisconnected',\n  /** @experimental Returned for FDC3 API calls that are specified with arguments indicating that a remote Desktop agent should be targeted (e.g. raiseIntent with an app on a remote DesktopAgent targeted), when the local Desktop Agent is not connected to a bridge. */\n  NotConnectedToBridge = 'NotConnectedToBridge',\n  /** @experimental Returned if a message to a Bridge deviates from the schema for that message sufficiently that it could not be processed. */\n  MalformedMessage = 'MalformedMessage',\n}\n", "/**\n * SPDX-License-Identifier: Apache-2.0\n * Copyright FINOS FDC3 contributors - see NOTICE file\n */\nimport {\n  AppIdentifier,\n  AppIntent,\n  Channel,\n  Context,\n  ContextHandler,\n  IntentHandler,\n  IntentResolution,\n  Listener,\n  ImplementationMetadata,\n  AppMetadata,\n  PrivateChannel,\n} from '..';\n\nconst DEFAULT_TIMEOUT = 5000;\n\nconst UnavailableError = new Error('FDC3 DesktopAgent not available at `window.fdc3`.');\nconst TimeoutError = new Error('Timed out waiting for `fdc3Ready` event.');\nconst UnexpectedError = new Error('`fdc3Ready` event fired, but `window.fdc3` not set to DesktopAgent.');\n\nfunction rejectIfNoGlobal(f: () => Promise<any>) {\n  return window.fdc3 ? f() : Promise.reject(UnavailableError);\n}\n\n/**\n * Utility function that returns a promise that will resolve immeadiately\n * if the desktop agent API is found at `window.fdc3`. If the API is found,\n * the promise will resolve when the `fdc3Ready` event is received or if it\n * is found at the end of the specified timeout. If the API is not found, it\n * will reject with an error.\n *\n * ```javascript\n * await fdc3Ready();\n * const intentListener = await addIntentListener(\"ViewChart\", intentHandlerFn);\n * ```\n *\n * @param waitForMs The number of milliseconds to wait for the FDC3 API to be\n * ready. Defaults to 5 seconds.\n */\nexport const fdc3Ready = async (waitForMs = DEFAULT_TIMEOUT): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    // if the global is already available resolve immediately\n    if (window.fdc3) {\n      resolve();\n    } else {\n      // if its not available setup a timeout to return a rejected promise\n      const timeout = setTimeout(() => (window.fdc3 ? resolve() : reject(TimeoutError)), waitForMs);\n      // listen for the fdc3Ready event\n      window.addEventListener(\n        'fdc3Ready',\n        () => {\n          clearTimeout(timeout);\n          window.fdc3 ? resolve() : reject(UnexpectedError);\n        },\n        { once: true }\n      );\n    }\n  });\n};\n\nfunction isString(app: AppIdentifier | string | undefined): app is string {\n  return !!app && typeof app === 'string';\n}\n\nexport function open(app: AppIdentifier | string, context?: Context): Promise<AppIdentifier> {\n  if (isString(app)) {\n    return rejectIfNoGlobal(() => window.fdc3.open(app, context));\n  } else {\n    return rejectIfNoGlobal(() => window.fdc3.open(app, context));\n  }\n}\n\nexport function findIntent(intent: string, context?: Context, resultType?: string): Promise<AppIntent> {\n  return rejectIfNoGlobal(() => window.fdc3.findIntent(intent, context, resultType));\n}\n\nexport function findIntentsByContext(context: Context, resultType?: string): Promise<AppIntent[]> {\n  return rejectIfNoGlobal(() => window.fdc3.findIntentsByContext(context, resultType));\n}\n\nexport function broadcast(context: Context): Promise<void> {\n  return rejectIfNoGlobal(() => window.fdc3.broadcast(context));\n}\n\nexport function raiseIntent(intent: string, context: Context, app?: AppIdentifier | string): Promise<IntentResolution> {\n  if (isString(app)) {\n    return rejectIfNoGlobal(() => window.fdc3.raiseIntent(intent, context, app));\n  } else {\n    return rejectIfNoGlobal(() => window.fdc3.raiseIntent(intent, context, app));\n  }\n}\n\nexport function raiseIntentForContext(context: Context, app?: AppIdentifier | string): Promise<IntentResolution> {\n  if (isString(app)) {\n    return rejectIfNoGlobal(() => window.fdc3.raiseIntentForContext(context, app));\n  } else {\n    return rejectIfNoGlobal(() => window.fdc3.raiseIntentForContext(context, app));\n  }\n}\n\nexport function addIntentListener(intent: string, handler: IntentHandler): Promise<Listener> {\n  return rejectIfNoGlobal(() => window.fdc3.addIntentListener(intent, handler));\n}\n\nexport function addContextListener(\n  contextTypeOrHandler: string | null | ContextHandler,\n  handler?: ContextHandler\n): Promise<Listener> {\n  //Handle (deprecated) function signature that allowed contextType argument to be omitted\n  if (typeof contextTypeOrHandler !== 'function') {\n    return rejectIfNoGlobal(() => window.fdc3.addContextListener(contextTypeOrHandler, handler as ContextHandler));\n  } else {\n    return rejectIfNoGlobal(() => window.fdc3.addContextListener(null, contextTypeOrHandler as ContextHandler));\n  }\n}\n\nexport function getUserChannels(): Promise<Channel[]> {\n  return rejectIfNoGlobal(() => {\n    //fallback to getSystemChannels for FDC3 <2.0 implementations\n    if (window.fdc3.getUserChannels) {\n      return window.fdc3.getUserChannels();\n    } else {\n      return window.fdc3.getSystemChannels();\n    }\n  });\n}\n\nexport function getSystemChannels(): Promise<Channel[]> {\n  //fallforward to getUserChannels for FDC3 2.0+ implementations\n  return getUserChannels();\n}\n\nexport function joinUserChannel(channelId: string): Promise<void> {\n  return rejectIfNoGlobal(() => {\n    //fallback to joinChannel for FDC3 <2.0 implementations\n    if (window.fdc3.joinUserChannel) {\n      return window.fdc3.joinUserChannel(channelId);\n    } else {\n      return window.fdc3.joinChannel(channelId);\n    }\n  });\n}\n\nexport function joinChannel(channelId: string): Promise<void> {\n  //fallforward to joinUserChannel for FDC3 2.0+ implementations\n  return joinUserChannel(channelId);\n}\n\nexport function getOrCreateChannel(channelId: string): Promise<Channel> {\n  return rejectIfNoGlobal(() => window.fdc3.getOrCreateChannel(channelId));\n}\n\nexport function getCurrentChannel(): Promise<Channel | null> {\n  return rejectIfNoGlobal(() => window.fdc3.getCurrentChannel());\n}\n\nexport function leaveCurrentChannel(): Promise<void> {\n  return rejectIfNoGlobal(() => window.fdc3.leaveCurrentChannel());\n}\n\nexport function createPrivateChannel(): Promise<PrivateChannel> {\n  return rejectIfNoGlobal(() => window.fdc3.createPrivateChannel());\n}\n\nexport function getInfo(): Promise<ImplementationMetadata> {\n  return rejectIfNoGlobal(() => window.fdc3.getInfo());\n}\n\nexport function getAppMetadata(app: AppIdentifier): Promise<AppMetadata> {\n  return rejectIfNoGlobal(() => window.fdc3.getAppMetadata(app));\n}\n\nexport function findInstances(app: AppIdentifier): Promise<AppIdentifier[]> {\n  return rejectIfNoGlobal(() => window.fdc3.findInstances(app));\n}\n\n/**\n * Compare numeric semver version number strings (in the form `1.2.3`).\n *\n * Returns `-1` if the first argument is a lower version number than the second,\n * `1` if the first argument is greater than the second, 0 if the arguments are\n * equal and `null` if an error occurred during the comparison.\n *\n * @param a\n * @param b\n */\nexport const compareVersionNumbers: (a: string, b: string) => number | null = (a, b) => {\n  try {\n    let aVerArr = a.split('.').map(Number);\n    let bVerArr = b.split('.').map(Number);\n    for (let index = 0; index < Math.max(aVerArr.length, bVerArr.length); index++) {\n      /* If one version number has more digits and the other does not, and they are otherwise equal,\n         assume the longer is greater. E.g. 1.1.1 > 1.1 */\n      if (index === aVerArr.length || aVerArr[index] < bVerArr[index]) {\n        return -1;\n      } else if (index === bVerArr.length || aVerArr[index] > bVerArr[index]) {\n        return 1;\n      }\n    }\n    return 0;\n  } catch (e) {\n    console.error('Failed to compare version strings', e);\n    return null;\n  }\n};\n\n/**\n * Check if the FDC3 version in an ImplementationMetadata object is greater than\n * or equal to the supplied numeric semver version number string (in the form `1.2.3`).\n *\n * Returns a boolean or null if an error occurred while comparing the version numbers.\n *\n * @param metadata\n * @param version\n */\nexport const versionIsAtLeast: (metadata: ImplementationMetadata, version: string) => boolean | null = (\n  metadata,\n  version\n) => {\n  let comparison = compareVersionNumbers(metadata.fdc3Version, version);\n  return comparison === null ? null : comparison >= 0 ? true : false;\n};\n", "/**\n * SPDX-License-Identifier: Apache-2.0\n * Copyright FINOS FDC3 contributors - see NOTICE file\n */\nexport enum ContextTypes {\n  Chart = 'fdc3.chart',\n  ChatInitSettings = 'fdc3.chat.initSettings',\n  ChatRoom = 'fdc3.chat.room',\n  Contact = 'fdc3.contact',\n  ContactList = 'fdc3.contactList',\n  Country = 'fdc3.country',\n  Currency = 'fdc3.currency',\n  Email = 'fdc3.email',\n  Instrument = 'fdc3.instrument',\n  InstrumentList = 'fdc3.instrumentList',\n  Interaction = 'fdc3.interaction',\n  Nothing = 'fdc3.nothing',\n  Organization = 'fdc3.organization',\n  Portfolio = 'fdc3.portfolio',\n  Position = 'fdc3.position',\n  ChatSearchCriteria = 'fdc3.chat.searchCriteria',\n  TimeRange = 'fdc3.timerange',\n  TransactionResult = 'fdc3.transactionResult',\n  Valuation = 'fdc3.valuation',\n}\n\nexport type ContextType = ContextTypes | string;\n", "// To parse this data:\n//\n//   import { Convert, Action, Chart, ChatInitSettings, ChatMessage, ChatRoom, ChatSearchCriteria, Contact, ContactList, Context, Country, Currency, Email, Instrument, InstrumentList, Interaction, Message, Nothing, Order, OrderList, Organization, Portfolio, Position, Product, TimeRange, Trade, TradeList, TransactionResult, Valuation } from \"./file\";\n//\n//   const action = Convert.toAction(json);\n//   const chart = Convert.toChart(json);\n//   const chatInitSettings = Convert.toChatInitSettings(json);\n//   const chatMessage = Convert.toChatMessage(json);\n//   const chatRoom = Convert.toChatRoom(json);\n//   const chatSearchCriteria = Convert.toChatSearchCriteria(json);\n//   const contact = Convert.toContact(json);\n//   const contactList = Convert.toContactList(json);\n//   const context = Convert.toContext(json);\n//   const country = Convert.toCountry(json);\n//   const currency = Convert.toCurrency(json);\n//   const email = Convert.toEmail(json);\n//   const instrument = Convert.toInstrument(json);\n//   const instrumentList = Convert.toInstrumentList(json);\n//   const interaction = Convert.toInteraction(json);\n//   const message = Convert.toMessage(json);\n//   const nothing = Convert.toNothing(json);\n//   const order = Convert.toOrder(json);\n//   const orderList = Convert.toOrderList(json);\n//   const organization = Convert.toOrganization(json);\n//   const portfolio = Convert.toPortfolio(json);\n//   const position = Convert.toPosition(json);\n//   const product = Convert.toProduct(json);\n//   const timeRange = Convert.toTimeRange(json);\n//   const trade = Convert.toTrade(json);\n//   const tradeList = Convert.toTradeList(json);\n//   const transactionResult = Convert.toTransactionResult(json);\n//   const valuation = Convert.toValuation(json);\n//\n// These functions will throw an error if the JSON doesn't\n// match the expected interface, even if the JSON is valid.\n\n/**\n * A representation of an FDC3 Action (specified via a Context or Context & Intent) that can\n * be inserted inside another object, for example a chat message.\n *\n * The action may be completed by calling `fdc3.raiseIntent()` with the specified Intent and\n * Context, or, if only a context is specified, by calling `fdc3.raiseIntentForContext()`\n * (which the Desktop Agent will resolve by presenting the user with a list of available\n * Intents for the Context).\n *\n * Accepts an optional `app` parameter in order to specify a specific app.\n */\nexport interface Action {\n  /**\n   * An optional target application identifier that should perform the action\n   */\n  app?: ActionTargetApp;\n  /**\n   * A context object with which the action will be performed\n   */\n  context: ContextElement;\n  /**\n   * Optional Intent to raise to perform the actions. Should reference an intent type name,\n   * such as those defined in the FDC3 Standard. If intent is not set then\n   * `fdc3.raiseIntentForContext` should be used to perform the action as this will usually\n   * allow the user to choose the intent to raise.\n   */\n  intent?: string;\n  /**\n   * A human readable display name for the action\n   */\n  title: string;\n  type: 'fdc3.action';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * An optional target application identifier that should perform the action\n *\n * Identifies an application, or instance of an application, and is used to target FDC3 API\n * calls, such as `fdc3.open` or `fdc3.raiseIntent` at specific applications or application\n * instances.\n *\n * Will always include at least an `appId` field, which uniquely identifies a specific app.\n *\n * If the `instanceId` field is set then the `AppMetadata` object represents a specific\n * instance of the application that may be addressed using that Id.\n */\nexport interface ActionTargetApp {\n  /**\n   * The unique application identifier located within a specific application directory\n   * instance. An example of an appId might be 'app@sub.root'\n   */\n  appId: string;\n  /**\n   * The Desktop Agent that the app is available on. Used in Desktop Agent Bridging to\n   * identify the Desktop Agent to target.\n   */\n  desktopAgent?: string;\n  /**\n   * An optional instance identifier, indicating that this object represents a specific\n   * instance of the application described.\n   */\n  instanceId?: string;\n  [property: string]: any;\n}\n\n/**\n * A context object with which the action will be performed\n *\n * A context object returned by the transaction, possibly with updated data.\n *\n * The `fdc3.context` type defines the basic contract or \"shape\" for all data exchanged by\n * FDC3 operations. As such, it is not really meant to be used on its own, but is imported\n * by more specific type definitions (standardized or custom) to provide the structure and\n * properties shared by all FDC3 context data types.\n *\n * The key element of FDC3 context types is their mandatory `type` property, which is used\n * to identify what type of data the object represents, and what shape it has.\n *\n * The FDC3 context type, and all derived types, define the minimum set of fields a context\n * data object of a particular type can be expected to have, but this can always be extended\n * with custom fields as appropriate.\n */\nexport interface ContextElement {\n  /**\n   * Context data objects may include a set of equivalent key-value pairs that can be used to\n   * help applications identify and look up the context type they receive in their own domain.\n   * The idea behind this design is that applications can provide as many equivalent\n   * identifiers to a target application as possible, e.g. an instrument may be represented by\n   * an ISIN, CUSIP or Bloomberg identifier.\n   *\n   * Identifiers do not make sense for all types of data, so the `id` property is therefore\n   * optional, but some derived types may choose to require at least one identifier.\n   */\n  id?: { [key: string]: any };\n  /**\n   * Context data objects may include a name property that can be used for more information,\n   * or display purposes. Some derived types may require the name object as mandatory,\n   * depending on use case.\n   */\n  name?: string;\n  /**\n   * The type property is the only _required_ part of the FDC3 context data schema. The FDC3\n   * [API](https://fdc3.finos.org/docs/api/spec) relies on the `type` property being present\n   * to route shared context data appropriately.\n   *\n   * FDC3 [Intents](https://fdc3.finos.org/docs/intents/spec) also register the context data\n   * types they support in an FDC3 [App\n   * Directory](https://fdc3.finos.org/docs/app-directory/overview), used for intent discovery\n   * and routing.\n   *\n   * Standardized FDC3 context types have well-known `type` properties prefixed with the\n   * `fdc3` namespace, e.g. `fdc3.instrument`. For non-standard types, e.g. those defined and\n   * used by a particular organization, the convention is to prefix them with an\n   * organization-specific namespace, e.g. `blackrock.fund`.\n   *\n   * See the [Context Data Specification](https://fdc3.finos.org/docs/context/spec) for more\n   * information about context data types.\n   */\n  type: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A context type representing details of a Chart, which may be used to request plotting of\n * a particular chart or to otherwise share details of its composition, such as:\n *\n * - A list of instruments for comparison\n * - The time period to plot the chart over\n * - The style of chart (line, bar, mountain, candle etc.)\n * - Other settings such as indicators to calculate, or data representing drawings and\n * annotations.\n *\n * In addition to handling requests to plot charts, a charting application may use this type\n * to output a representation of what it is currently displaying so that it can be recorded\n * by another application.\n */\nexport interface Chart {\n  /**\n   * An array of instrument contexts whose data should be plotted.\n   */\n  instruments: InstrumentElement[];\n  /**\n   * It is common for charts to support other configuration, such as indicators, annotations\n   * etc., which do not have standardized formats, but may be included in the `otherConfig`\n   * array as context objects.\n   */\n  otherConfig?: ContextElement[];\n  /**\n   * The time range that should be plotted\n   */\n  range?: TimeRangeObject;\n  /**\n   * The type of chart that should be plotted\n   */\n  style?: ChartStyle;\n  type: 'fdc3.chart';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * financial instrument that relates to the definition of this product\n *\n *\n *\n * A financial instrument from any asset class.\n */\nexport interface InstrumentElement {\n  /**\n   * Any combination of instrument identifiers can be used together to resolve ambiguity, or\n   * for a better match. Not all applications will use the same instrument identifiers, which\n   * is why FDC3 allows for multiple to be specified. In general, the more identifiers an\n   * application can provide, the easier it will be to achieve interoperability.\n   *\n   * It is valid to include extra properties and metadata as part of the instrument payload,\n   * but the minimum requirement is for at least one instrument identifier to be provided.\n   *\n   * Try to only use instrument identifiers as intended. E.g. the `ticker` property is meant\n   * for tickers as used by an exchange.\n   * If the identifier you want to share is not a ticker or one of the other standardized\n   * fields, define a property that makes it clear what the value represents. Doing so will\n   * make interpretation easier for the developers of target applications.\n   */\n  id: PurpleInstrumentIdentifiers;\n  /**\n   * The `market` map can be used to further specify the instrument and help achieve\n   * interoperability between disparate data sources. This is especially useful when using an\n   * `id` field that is not globally unique.\n   */\n  market?: OrganizationMarket;\n  type: 'fdc3.instrument';\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Any combination of instrument identifiers can be used together to resolve ambiguity, or\n * for a better match. Not all applications will use the same instrument identifiers, which\n * is why FDC3 allows for multiple to be specified. In general, the more identifiers an\n * application can provide, the easier it will be to achieve interoperability.\n *\n * It is valid to include extra properties and metadata as part of the instrument payload,\n * but the minimum requirement is for at least one instrument identifier to be provided.\n *\n * Try to only use instrument identifiers as intended. E.g. the `ticker` property is meant\n * for tickers as used by an exchange.\n * If the identifier you want to share is not a ticker or one of the other standardized\n * fields, define a property that makes it clear what the value represents. Doing so will\n * make interpretation easier for the developers of target applications.\n */\nexport interface PurpleInstrumentIdentifiers {\n  /**\n   * <https://www.bloomberg.com/>\n   */\n  BBG?: string;\n  /**\n   * <https://www.cusip.com/>\n   */\n  CUSIP?: string;\n  /**\n   * <https://www.factset.com/>\n   */\n  FDS_ID?: string;\n  /**\n   * <https://www.openfigi.com/>\n   */\n  FIGI?: string;\n  /**\n   * <https://www.isin.org/>\n   */\n  ISIN?: string;\n  /**\n   * <https://permid.org/>\n   */\n  PERMID?: string;\n  /**\n   * <https://www.refinitiv.com/>\n   */\n  RIC?: string;\n  /**\n   * <https://www.lseg.com/sedol>\n   */\n  SEDOL?: string;\n  /**\n   * Unstandardized stock tickers\n   */\n  ticker?: string;\n  [property: string]: any;\n}\n\n/**\n * The `market` map can be used to further specify the instrument and help achieve\n * interoperability between disparate data sources. This is especially useful when using an\n * `id` field that is not globally unique.\n */\nexport interface OrganizationMarket {\n  /**\n   * <https://www.bloomberg.com/>\n   */\n  BBG?: string;\n  /**\n   * <https://www.iso.org/iso-3166-country-codes.html>\n   */\n  COUNTRY_ISOALPHA2?: string;\n  /**\n   * <https://en.wikipedia.org/wiki/Market_Identifier_Code>\n   */\n  MIC?: string;\n  /**\n   * Human readable market name\n   */\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * The time range that should be plotted\n *\n * The time range over which the interaction occurred\n *\n * A context representing a period of time. Any user interfaces that represent or visualize\n * events or activity over time can be filtered or focused on a particular time period,\n * e.g.:\n *\n * - A pricing chart\n * - A trade blotter\n * - A record of client contact/activity in a CRM\n *\n * Example use cases:\n *\n * - User may want to view pricing/trades/customer activity for a security over a particular\n * time period, the time range might be specified as the context for the `ViewChart` intent\n * OR it might be embedded in another context (e.g. a context representing a chart to plot).\n * - User filters a visualization (e.g. a pricing chart) to show a particular period, the\n * `TimeRange` is broadcast and other visualizations (e.g. a heatmap of activity by\n * instrument, or industry sector etc.) receive it and filter themselves to show data over\n * the same range.\n *\n * Notes:\n *\n * - A `TimeRange` may be closed (i.e. `startTime` and `endTime` are both known) or open\n * (i.e. only one of `startTime` or `endTime` is known).\n * - Ranges corresponding to dates (e.g. `2022-05-12` to `2022-05-19`) should be specified\n * using times as this prevents issues with timezone conversions and inclusive/exclusive\n * date ranges.\n * - String fields representing times are encoded according to [ISO\n * 8601-1:2019](https://www.iso.org/standard/70907.html).\n * - A timezone indicator should be specified, e.g. `\"2022-05-12T15:18:03Z\"` or\n * `\"2022-05-12T16:18:03+01:00\"`\n * - Times MAY be specified with millisecond precision, e.g. `\"2022-05-12T15:18:03.349Z\"`\n */\nexport interface TimeRangeObject {\n  /**\n   * The end time of the range, encoded according to [ISO\n   * 8601-1:2019](https://www.iso.org/standard/70907.html) with a timezone indicator.\n   */\n  endTime?: Date;\n  /**\n   * The start time of the range, encoded according to [ISO\n   * 8601-1:2019](https://www.iso.org/standard/70907.html) with a timezone indicator.\n   */\n  startTime?: Date;\n  type: 'fdc3.timerange';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * The type of chart that should be plotted\n */\nexport type ChartStyle =\n  | 'line'\n  | 'bar'\n  | 'stacked-bar'\n  | 'mountain'\n  | 'candle'\n  | 'pie'\n  | 'scatter'\n  | 'histogram'\n  | 'heatmap'\n  | 'custom';\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A collection of settings to start a new chat conversation\n */\nexport interface ChatInitSettings {\n  /**\n   * Name to apply to the chat created\n   */\n  chatName?: string;\n  /**\n   * Contacts to add to the chat\n   */\n  members?: ContactListObject;\n  /**\n   * An initial message to post in the chat when created.\n   */\n  message?: MessageObject | string;\n  /**\n   * Option settings that affect the creation of the chat\n   */\n  options?: ChatOptions;\n  type: 'fdc3.chat.initSettings';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Contacts to add to the chat\n *\n * A list of contacts involved in the interaction\n *\n * A collection of contacts, e.g. for chatting to or calling multiple contacts.\n *\n * The contact list schema does not explicitly include identifiers in the `id` section, as\n * there is not a common standard for such identifiers. Applications can, however, populate\n * this part of the contract with custom identifiers if so desired.\n */\nexport interface ContactListObject {\n  /**\n   * An array of contact contexts that forms the list.\n   */\n  contacts: ContactElement[];\n  type: 'fdc3.contactList';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * The contact that initiated the interaction\n *\n * A person contact that can be engaged with through email, calling, messaging, CMS, etc.\n */\nexport interface ContactElement {\n  /**\n   * Identifiers that relate to the Contact represented by this context\n   */\n  id: PurpleContactIdentifiers;\n  type: 'fdc3.contact';\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Identifiers that relate to the Contact represented by this context\n */\nexport interface PurpleContactIdentifiers {\n  /**\n   * The email address for the contact\n   */\n  email?: string;\n  /**\n   * FactSet Permanent Identifier representing the contact\n   */\n  FDS_ID?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A chat message to be sent through an instant messaging application. Can contain one or\n * several text bodies (organized by mime-type, plaintext or markdown), as well as attached\n * entities (either arbitrary file attachments or FDC3 actions to be embedded in the\n * message). To be put inside a ChatInitSettings object.\n */\nexport interface MessageObject {\n  /**\n   * A map of string IDs to entities that should be attached to the message, such as an action\n   * to perform, a file attachment, or other FDC3 context object.\n   */\n  entities?: { [key: string]: PurpleAction };\n  /**\n   * A map of string mime-type to string content\n   */\n  text?: PurpleMessageText;\n  type: 'fdc3.message';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * A representation of an FDC3 Action (specified via a Context or Context & Intent) that can\n * be inserted inside another object, for example a chat message.\n *\n * The action may be completed by calling `fdc3.raiseIntent()` with the specified Intent and\n * Context, or, if only a context is specified, by calling `fdc3.raiseIntentForContext()`\n * (which the Desktop Agent will resolve by presenting the user with a list of available\n * Intents for the Context).\n *\n * Accepts an optional `app` parameter in order to specify a specific app.\n *\n * A File attachment encoded in the form of a data URI\n */\nexport interface PurpleAction {\n  /**\n   * An optional target application identifier that should perform the action\n   */\n  app?: ActionTargetApp;\n  /**\n   * A context object with which the action will be performed\n   */\n  context?: ContextElement;\n  /**\n   * Optional Intent to raise to perform the actions. Should reference an intent type name,\n   * such as those defined in the FDC3 Standard. If intent is not set then\n   * `fdc3.raiseIntentForContext` should be used to perform the action as this will usually\n   * allow the user to choose the intent to raise.\n   */\n  intent?: string;\n  /**\n   * A human readable display name for the action\n   */\n  title?: string;\n  type: EntityType;\n  id?: { [key: string]: any };\n  name?: string;\n  data?: PurpleData;\n  [property: string]: any;\n}\n\nexport interface PurpleData {\n  /**\n   * A data URI encoding the content of the file to be attached\n   */\n  dataUri: string;\n  /**\n   * The name of the attached file\n   */\n  name: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\nexport type EntityType = 'fdc3.action' | 'fdc3.entity.fileAttachment';\n\n/**\n * A map of string mime-type to string content\n */\nexport interface PurpleMessageText {\n  /**\n   * Markdown encoded content\n   */\n  'text/markdown'?: string;\n  /**\n   * Plain text encoded content.\n   */\n  'text/plain'?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * Option settings that affect the creation of the chat\n */\nexport interface ChatOptions {\n  /**\n   * if true members will be allowed to add other members to the chat\n   */\n  allowAddUser?: boolean;\n  /**\n   * if true members will be allowed to browse past messages\n   */\n  allowHistoryBrowsing?: boolean;\n  /**\n   * if true members will be allowed to copy/paste messages\n   */\n  allowMessageCopy?: boolean;\n  /**\n   * if false a separate chat will be created for each member\n   */\n  groupRecipients?: boolean;\n  /**\n   * if true the room will be visible to everyone in the chat application\n   */\n  isPublic?: boolean;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A context representing a chat message. Typically used to send the message or to\n * pre-populate a message for sending.\n */\nexport interface ChatMessage {\n  chatRoom: ChatRoomObject;\n  /**\n   * The content of the message to post in the chat when created.\n   */\n  message: MessageObject | string;\n  type: 'fdc3.chat.message';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Reference to the chat room which could be used to send a message to the room\n */\nexport interface ChatRoomObject {\n  /**\n   * Identifier(s) for the chat - currently unstandardized\n   */\n  id: { [key: string]: any };\n  /**\n   * Display name for the chat room\n   */\n  name?: string;\n  /**\n   * The name of the service that hosts the chat\n   */\n  providerName: string;\n  type: 'fdc3.chat.room';\n  /**\n   * Universal url to access to the room. It could be opened from a browser, a mobile app,\n   * etc...\n   */\n  url?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * Reference to the chat room which could be used to send a message to the room\n */\nexport interface ChatRoom {\n  /**\n   * Identifier(s) for the chat - currently unstandardized\n   */\n  id: { [key: string]: any };\n  /**\n   * Display name for the chat room\n   */\n  name?: string;\n  /**\n   * The name of the service that hosts the chat\n   */\n  providerName: string;\n  type: 'fdc3.chat.room';\n  /**\n   * Universal url to access to the room. It could be opened from a browser, a mobile app,\n   * etc...\n   */\n  url?: string;\n  [property: string]: any;\n}\n\n/**\n * A context type that represents a simple search criterion, based on a list of other\n * context objects, that can be used to search or filter messages in a chat application.\n */\nexport interface ChatSearchCriteria {\n  /**\n   * An array of criteria that should match chats returned from by a search.\n   *\n   * ⚠️ Operators (and/or/not) are not defined in `fdc3.chat.searchCriteria`. It is up to the\n   * application that processes the FDC3 Intent to choose and apply the operators between the\n   * criteria.\n   *\n   * Empty search criteria can be supported to allow resetting of filters.\n   */\n  criteria: Array<OrganizationObject | string>;\n  type: 'fdc3.chat.searchCriteria';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * financial instrument that relates to the definition of this product\n *\n *\n *\n * A financial instrument from any asset class.\n *\n * An entity that can be used when referencing private companies and other organizations\n * where a specific instrument is not available or desired e.g. CRM and News workflows.\n *\n * It is valid to include extra properties and metadata as part of the organization payload,\n * but the minimum requirement is for at least one specified identifier to be provided.\n *\n * The contact that initiated the interaction\n *\n * A person contact that can be engaged with through email, calling, messaging, CMS, etc.\n */\nexport interface OrganizationObject {\n  /**\n   * Any combination of instrument identifiers can be used together to resolve ambiguity, or\n   * for a better match. Not all applications will use the same instrument identifiers, which\n   * is why FDC3 allows for multiple to be specified. In general, the more identifiers an\n   * application can provide, the easier it will be to achieve interoperability.\n   *\n   * It is valid to include extra properties and metadata as part of the instrument payload,\n   * but the minimum requirement is for at least one instrument identifier to be provided.\n   *\n   * Try to only use instrument identifiers as intended. E.g. the `ticker` property is meant\n   * for tickers as used by an exchange.\n   * If the identifier you want to share is not a ticker or one of the other standardized\n   * fields, define a property that makes it clear what the value represents. Doing so will\n   * make interpretation easier for the developers of target applications.\n   *\n   * Identifiers for the organization, at least one must be provided.\n   *\n   * Identifiers that relate to the Contact represented by this context\n   */\n  id: Identifiers;\n  /**\n   * The `market` map can be used to further specify the instrument and help achieve\n   * interoperability between disparate data sources. This is especially useful when using an\n   * `id` field that is not globally unique.\n   */\n  market?: OrganizationMarket;\n  type: TentacledInteractionType;\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Any combination of instrument identifiers can be used together to resolve ambiguity, or\n * for a better match. Not all applications will use the same instrument identifiers, which\n * is why FDC3 allows for multiple to be specified. In general, the more identifiers an\n * application can provide, the easier it will be to achieve interoperability.\n *\n * It is valid to include extra properties and metadata as part of the instrument payload,\n * but the minimum requirement is for at least one instrument identifier to be provided.\n *\n * Try to only use instrument identifiers as intended. E.g. the `ticker` property is meant\n * for tickers as used by an exchange.\n * If the identifier you want to share is not a ticker or one of the other standardized\n * fields, define a property that makes it clear what the value represents. Doing so will\n * make interpretation easier for the developers of target applications.\n *\n * Identifiers for the organization, at least one must be provided.\n *\n * Identifiers that relate to the Contact represented by this context\n */\nexport interface Identifiers {\n  /**\n   * <https://www.bloomberg.com/>\n   */\n  BBG?: string;\n  /**\n   * <https://www.cusip.com/>\n   */\n  CUSIP?: string;\n  /**\n   * <https://www.factset.com/>\n   *\n   * FactSet Permanent Identifier representing the organization\n   *\n   * FactSet Permanent Identifier representing the contact\n   */\n  FDS_ID?: string;\n  /**\n   * <https://www.openfigi.com/>\n   */\n  FIGI?: string;\n  /**\n   * <https://www.isin.org/>\n   */\n  ISIN?: string;\n  /**\n   * <https://permid.org/>\n   *\n   * Refinitiv Permanent Identifiers, or PermID for the organization\n   */\n  PERMID?: string;\n  /**\n   * <https://www.refinitiv.com/>\n   */\n  RIC?: string;\n  /**\n   * <https://www.lseg.com/sedol>\n   */\n  SEDOL?: string;\n  /**\n   * Unstandardized stock tickers\n   */\n  ticker?: string;\n  /**\n   * The Legal Entity Identifier (LEI) is a 20-character, alpha-numeric code based on the ISO\n   * 17442 standard developed by the International Organization for Standardization (ISO). It\n   * connects to key reference information that enables clear and unique identification of\n   * legal entities participating in financial transactions.\n   */\n  LEI?: string;\n  /**\n   * The email address for the contact\n   */\n  email?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\nexport type TentacledInteractionType = 'fdc3.instrument' | 'fdc3.organization' | 'fdc3.contact';\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A person contact that can be engaged with through email, calling, messaging, CMS, etc.\n */\nexport interface Contact {\n  /**\n   * Identifiers that relate to the Contact represented by this context\n   */\n  id: FluffyContactIdentifiers;\n  type: 'fdc3.contact';\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Identifiers that relate to the Contact represented by this context\n */\nexport interface FluffyContactIdentifiers {\n  /**\n   * The email address for the contact\n   */\n  email?: string;\n  /**\n   * FactSet Permanent Identifier representing the contact\n   */\n  FDS_ID?: string;\n  [property: string]: any;\n}\n\n/**\n * A collection of contacts, e.g. for chatting to or calling multiple contacts.\n *\n * The contact list schema does not explicitly include identifiers in the `id` section, as\n * there is not a common standard for such identifiers. Applications can, however, populate\n * this part of the contract with custom identifiers if so desired.\n */\nexport interface ContactList {\n  /**\n   * An array of contact contexts that forms the list.\n   */\n  contacts: ContactElement[];\n  type: 'fdc3.contactList';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * The `fdc3.context` type defines the basic contract or \"shape\" for all data exchanged by\n * FDC3 operations. As such, it is not really meant to be used on its own, but is imported\n * by more specific type definitions (standardized or custom) to provide the structure and\n * properties shared by all FDC3 context data types.\n *\n * The key element of FDC3 context types is their mandatory `type` property, which is used\n * to identify what type of data the object represents, and what shape it has.\n *\n * The FDC3 context type, and all derived types, define the minimum set of fields a context\n * data object of a particular type can be expected to have, but this can always be extended\n * with custom fields as appropriate.\n */\nexport interface Context {\n  /**\n   * Context data objects may include a set of equivalent key-value pairs that can be used to\n   * help applications identify and look up the context type they receive in their own domain.\n   * The idea behind this design is that applications can provide as many equivalent\n   * identifiers to a target application as possible, e.g. an instrument may be represented by\n   * an ISIN, CUSIP or Bloomberg identifier.\n   *\n   * Identifiers do not make sense for all types of data, so the `id` property is therefore\n   * optional, but some derived types may choose to require at least one identifier.\n   */\n  id?: { [key: string]: any };\n  /**\n   * Context data objects may include a name property that can be used for more information,\n   * or display purposes. Some derived types may require the name object as mandatory,\n   * depending on use case.\n   */\n  name?: string;\n  /**\n   * The type property is the only _required_ part of the FDC3 context data schema. The FDC3\n   * [API](https://fdc3.finos.org/docs/api/spec) relies on the `type` property being present\n   * to route shared context data appropriately.\n   *\n   * FDC3 [Intents](https://fdc3.finos.org/docs/intents/spec) also register the context data\n   * types they support in an FDC3 [App\n   * Directory](https://fdc3.finos.org/docs/app-directory/overview), used for intent discovery\n   * and routing.\n   *\n   * Standardized FDC3 context types have well-known `type` properties prefixed with the\n   * `fdc3` namespace, e.g. `fdc3.instrument`. For non-standard types, e.g. those defined and\n   * used by a particular organization, the convention is to prefix them with an\n   * organization-specific namespace, e.g. `blackrock.fund`.\n   *\n   * See the [Context Data Specification](https://fdc3.finos.org/docs/context/spec) for more\n   * information about context data types.\n   */\n  type: string;\n  [property: string]: any;\n}\n\n/**\n * A country entity.\n *\n * Notes:\n *\n * - It is valid to include extra properties and metadata as part of the country payload,\n * but the minimum requirement is for at least one standardized identifier to be provided\n *\n * - `COUNTRY_ISOALPHA2` SHOULD be preferred.\n *\n * - Try to only use country identifiers as intended and specified in the [ISO\n * standard](https://en.wikipedia.org/wiki/ISO_3166-1). E.g. the `COUNTRY_ISOALPHA2`\n * property must be a recognized value and not a proprietary two-letter code. If the\n * identifier you want to share is not a standardized and recognized one, rather define a\n * property that makes it clear what value it is. This makes it easier for target\n * applications.\n */\nexport interface Country {\n  id: CountryID;\n  type: 'fdc3.country';\n  name?: string;\n  [property: string]: any;\n}\n\nexport interface CountryID {\n  /**\n   * Two-letter ISO country code\n   */\n  COUNTRY_ISOALPHA2?: string;\n  /**\n   * Three-letter ISO country code\n   */\n  COUNTRY_ISOALPHA3?: string;\n  /**\n   * Two-letter ISO country code. Deprecated in FDC3 2.0 in favour of the version prefixed\n   * with `COUNTRY_`.\n   */\n  ISOALPHA2?: string;\n  /**\n   * Three-letter ISO country code. Deprecated in FDC3 2.0 in favour of the version prefixed\n   * with `COUNTRY_`.\n   */\n  ISOALPHA3?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A context representing an individual Currency.\n */\nexport interface Currency {\n  id: CurrencyID;\n  /**\n   * The name of the currency for display purposes\n   */\n  name?: string;\n  type: 'fdc3.currency';\n  [property: string]: any;\n}\n\nexport interface CurrencyID {\n  /**\n   * The `CURRENCY_ISOCODE` should conform to 3 character alphabetic codes defined in [ISO\n   * 4217](https://www.iso.org/iso-4217-currency-codes.html)\n   */\n  CURRENCY_ISOCODE?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A collection of information to be used to initiate an email with a Contact or ContactList.\n */\nexport interface Email {\n  /**\n   * One or more receipients for the email.\n   */\n  recipients: EmailRecipients;\n  /**\n   * Subject line for the email.\n   */\n  subject?: string;\n  /**\n   * Body content for the email.\n   */\n  textBody?: string;\n  type: 'fdc3.email';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * One or more receipients for the email.\n *\n * The contact that initiated the interaction\n *\n * A person contact that can be engaged with through email, calling, messaging, CMS, etc.\n *\n * Contacts to add to the chat\n *\n * A list of contacts involved in the interaction\n *\n * A collection of contacts, e.g. for chatting to or calling multiple contacts.\n *\n * The contact list schema does not explicitly include identifiers in the `id` section, as\n * there is not a common standard for such identifiers. Applications can, however, populate\n * this part of the contract with custom identifiers if so desired.\n */\nexport interface EmailRecipients {\n  /**\n   * Identifiers that relate to the Contact represented by this context\n   */\n  id?: EmailRecipientsID;\n  type: EmailRecipientsType;\n  name?: string;\n  /**\n   * An array of contact contexts that forms the list.\n   */\n  contacts?: ContactElement[];\n  [property: string]: any;\n}\n\n/**\n * Identifiers that relate to the Contact represented by this context\n */\nexport interface EmailRecipientsID {\n  /**\n   * The email address for the contact\n   */\n  email?: string;\n  /**\n   * FactSet Permanent Identifier representing the contact\n   */\n  FDS_ID?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\nexport type EmailRecipientsType = 'fdc3.contact' | 'fdc3.contactList';\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A financial instrument from any asset class.\n */\nexport interface Instrument {\n  /**\n   * Any combination of instrument identifiers can be used together to resolve ambiguity, or\n   * for a better match. Not all applications will use the same instrument identifiers, which\n   * is why FDC3 allows for multiple to be specified. In general, the more identifiers an\n   * application can provide, the easier it will be to achieve interoperability.\n   *\n   * It is valid to include extra properties and metadata as part of the instrument payload,\n   * but the minimum requirement is for at least one instrument identifier to be provided.\n   *\n   * Try to only use instrument identifiers as intended. E.g. the `ticker` property is meant\n   * for tickers as used by an exchange.\n   * If the identifier you want to share is not a ticker or one of the other standardized\n   * fields, define a property that makes it clear what the value represents. Doing so will\n   * make interpretation easier for the developers of target applications.\n   */\n  id: FluffyInstrumentIdentifiers;\n  /**\n   * The `market` map can be used to further specify the instrument and help achieve\n   * interoperability between disparate data sources. This is especially useful when using an\n   * `id` field that is not globally unique.\n   */\n  market?: PurpleMarket;\n  type: 'fdc3.instrument';\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Any combination of instrument identifiers can be used together to resolve ambiguity, or\n * for a better match. Not all applications will use the same instrument identifiers, which\n * is why FDC3 allows for multiple to be specified. In general, the more identifiers an\n * application can provide, the easier it will be to achieve interoperability.\n *\n * It is valid to include extra properties and metadata as part of the instrument payload,\n * but the minimum requirement is for at least one instrument identifier to be provided.\n *\n * Try to only use instrument identifiers as intended. E.g. the `ticker` property is meant\n * for tickers as used by an exchange.\n * If the identifier you want to share is not a ticker or one of the other standardized\n * fields, define a property that makes it clear what the value represents. Doing so will\n * make interpretation easier for the developers of target applications.\n */\nexport interface FluffyInstrumentIdentifiers {\n  /**\n   * <https://www.bloomberg.com/>\n   */\n  BBG?: string;\n  /**\n   * <https://www.cusip.com/>\n   */\n  CUSIP?: string;\n  /**\n   * <https://www.factset.com/>\n   */\n  FDS_ID?: string;\n  /**\n   * <https://www.openfigi.com/>\n   */\n  FIGI?: string;\n  /**\n   * <https://www.isin.org/>\n   */\n  ISIN?: string;\n  /**\n   * <https://permid.org/>\n   */\n  PERMID?: string;\n  /**\n   * <https://www.refinitiv.com/>\n   */\n  RIC?: string;\n  /**\n   * <https://www.lseg.com/sedol>\n   */\n  SEDOL?: string;\n  /**\n   * Unstandardized stock tickers\n   */\n  ticker?: string;\n  [property: string]: any;\n}\n\n/**\n * The `market` map can be used to further specify the instrument and help achieve\n * interoperability between disparate data sources. This is especially useful when using an\n * `id` field that is not globally unique.\n */\nexport interface PurpleMarket {\n  /**\n   * <https://www.bloomberg.com/>\n   */\n  BBG?: string;\n  /**\n   * <https://www.iso.org/iso-3166-country-codes.html>\n   */\n  COUNTRY_ISOALPHA2?: string;\n  /**\n   * <https://en.wikipedia.org/wiki/Market_Identifier_Code>\n   */\n  MIC?: string;\n  /**\n   * Human readable market name\n   */\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * A collection of instruments. Use this type for use cases that require not just a single\n * instrument, but multiple (e.g. to populate a watchlist). However, when holding\n * information for each instrument is required, it is recommended to use the\n * [Portfolio](Portfolio) type.\n *\n * The instrument list schema does not explicitly include identifiers in the `id` section,\n * as there is not a common standard for such identifiers. Applications can, however,\n * populate this part of the contract with custom identifiers if so desired.\n */\nexport interface InstrumentList {\n  /**\n   * An array of instrument contexts that forms the list.\n   */\n  instruments: InstrumentElement[];\n  type: 'fdc3.instrumentList';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * An `Interaction` is a significant direct exchange of ideas or information between a\n * number of participants, e.g. a Sell Side party and one or more Buy Side parties. An\n * `Interaction` might be a call, a meeting (physical or virtual), an IM or the preparation\n * of some specialist data, such as financial data for a given company or sector.\n */\nexport interface Interaction {\n  /**\n   * A human-readable description of the interaction\n   */\n  description: string;\n  /**\n   * Can be used by a target application to pass an identifier back to the originating\n   * application after an interaction record has been created, updated or deleted. An\n   * interaction ID does not need to be populated by the originating application, however the\n   * target application could store it for future reference and SHOULD return it in a\n   * `TransactionResult`.\n   */\n  id?: InteractionID;\n  /**\n   * The contact that initiated the interaction\n   */\n  initiator?: ContactElement;\n  /**\n   * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n   * `'Meeting'` although other string values are permitted.\n   */\n  interactionType: string;\n  /**\n   * Used to represent the application or service that the interaction was created from to aid\n   * in tracing the source of an interaction.\n   */\n  origin?: string;\n  /**\n   * A list of contacts involved in the interaction\n   */\n  participants: ContactListObject;\n  /**\n   * The time range over which the interaction occurred\n   */\n  timeRange: TimeRangeObject;\n  type: 'fdc3.interaction';\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Can be used by a target application to pass an identifier back to the originating\n * application after an interaction record has been created, updated or deleted. An\n * interaction ID does not need to be populated by the originating application, however the\n * target application could store it for future reference and SHOULD return it in a\n * `TransactionResult`.\n */\nexport interface InteractionID {\n  /**\n   * Interactions ID in Salesforce\n   */\n  SALESFORCE?: string;\n  /**\n   * Interaction ID in SingleTrack\n   */\n  SINGLETRACK?: string;\n  /**\n   * Can be used by a target application to pass a record's link back to the originating\n   * application. This offers the originating application a way to open the record for a user\n   * to view.\n   */\n  URI?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A chat message to be sent through an instant messaging application. Can contain one or\n * several text bodies (organized by mime-type, plaintext or markdown), as well as attached\n * entities (either arbitrary file attachments or FDC3 actions to be embedded in the\n * message). To be put inside a ChatInitSettings object.\n */\nexport interface Message {\n  /**\n   * A map of string IDs to entities that should be attached to the message, such as an action\n   * to perform, a file attachment, or other FDC3 context object.\n   */\n  entities?: { [key: string]: FluffyAction };\n  /**\n   * A map of string mime-type to string content\n   */\n  text?: FluffyMessageText;\n  type: 'fdc3.message';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * A representation of an FDC3 Action (specified via a Context or Context & Intent) that can\n * be inserted inside another object, for example a chat message.\n *\n * The action may be completed by calling `fdc3.raiseIntent()` with the specified Intent and\n * Context, or, if only a context is specified, by calling `fdc3.raiseIntentForContext()`\n * (which the Desktop Agent will resolve by presenting the user with a list of available\n * Intents for the Context).\n *\n * Accepts an optional `app` parameter in order to specify a specific app.\n *\n * A File attachment encoded in the form of a data URI\n */\nexport interface FluffyAction {\n  /**\n   * An optional target application identifier that should perform the action\n   */\n  app?: ActionTargetApp;\n  /**\n   * A context object with which the action will be performed\n   */\n  context?: ContextElement;\n  /**\n   * Optional Intent to raise to perform the actions. Should reference an intent type name,\n   * such as those defined in the FDC3 Standard. If intent is not set then\n   * `fdc3.raiseIntentForContext` should be used to perform the action as this will usually\n   * allow the user to choose the intent to raise.\n   */\n  intent?: string;\n  /**\n   * A human readable display name for the action\n   */\n  title?: string;\n  type: EntityType;\n  id?: { [key: string]: any };\n  name?: string;\n  data?: FluffyData;\n  [property: string]: any;\n}\n\nexport interface FluffyData {\n  /**\n   * A data URI encoding the content of the file to be attached\n   */\n  dataUri: string;\n  /**\n   * The name of the attached file\n   */\n  name: string;\n  [property: string]: any;\n}\n\n/**\n * A map of string mime-type to string content\n */\nexport interface FluffyMessageText {\n  /**\n   * Markdown encoded content\n   */\n  'text/markdown'?: string;\n  /**\n   * Plain text encoded content.\n   */\n  'text/plain'?: string;\n  [property: string]: any;\n}\n\n/**\n * A type that explicitly represents a lack of context.\n *\n * Notes:\n *\n * - Intended to be used in situations where no context is desired.\n * - For example:\n * - Raising an intent without context (e.g. opening a blank order form, or chat interface\n * without a contact selected).\n * - Resetting context on a channel (e.g. when context is used to set a filter in other\n * applications a null context might release the filter).\n * - An explicit representation of a Null or empty context allows apps to declare support\n * for a lack of context, for example in their intent metadata in an app directory.\n */\nexport interface Nothing {\n  type: 'fdc3.nothing';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * @experimental context type representing an order. To be used with OMS and EMS systems.\n *\n * This type currently only defines a required `id` field, which should provide a reference\n * to the order in one or more systems, an optional human readable `name` field to be used\n * to summarize the order and an optional `details` field that may be used to provide\n * additional detail about the order, including a context representing a `product`, which\n * may be extended with arbitrary properties. The `details.product` field is currently typed\n * as a unspecified Context type, but both `details` and `details.product` are expected to\n * be standardized in future.\n */\nexport interface Order {\n  /**\n   * Optional additional details about the order, which may include a product element that is\n   * an, as yet undefined but extensible, Context\n   */\n  details?: PurpleOrderDetails;\n  /**\n   * One or more identifiers that refer to the order in an OMS, EMS or related system.\n   * Specific key names for systems are expected to be standardized in future.\n   */\n  id: { [key: string]: string };\n  /**\n   * An optional human-readable summary of the order.\n   */\n  name?: string;\n  type: 'fdc3.order';\n  [property: string]: any;\n}\n\n/**\n * Optional additional details about the order, which may include a product element that is\n * an, as yet undefined but extensible, Context\n */\nexport interface PurpleOrderDetails {\n  product?: ProductObject;\n  [property: string]: any;\n}\n\n/**\n * A product that is the subject of th trade.\n *\n * @experimental context type representing a tradable product. To be used with OMS and EMS\n * systems.\n *\n * This type is currently only loosely defined as an extensible context object, with an\n * optional instrument field.\n *\n * The Product schema does not explicitly include identifiers in the id section, as there is\n * not a common standard for such identifiers. Applications can, however, populate this part\n * of the contract with custom identifiers if so desired.\n */\nexport interface ProductObject {\n  /**\n   * One or more identifiers that refer to the product. Specific key names for systems are\n   * expected to be standardized in future.\n   */\n  id: { [key: string]: string };\n  /**\n   * financial instrument that relates to the definition of this product\n   */\n  instrument?: InstrumentElement;\n  /**\n   * A human-readable summary of the product.\n   */\n  name?: string;\n  type: 'fdc3.product';\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * @experimental A list of orders. Use this type for use cases that require not just a\n * single order, but multiple.\n *\n * The OrderList schema does not explicitly include identifiers in the id section, as there\n * is not a common standard for such identifiers. Applications can, however, populate this\n * part of the contract with custom identifiers if so desired.\n */\nexport interface OrderList {\n  /**\n   * An array of order contexts that forms the list.\n   */\n  orders: OrderElement[];\n  type: 'fdc3.orderList';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * @experimental context type representing an order. To be used with OMS and EMS systems.\n *\n * This type currently only defines a required `id` field, which should provide a reference\n * to the order in one or more systems, an optional human readable `name` field to be used\n * to summarize the order and an optional `details` field that may be used to provide\n * additional detail about the order, including a context representing a `product`, which\n * may be extended with arbitrary properties. The `details.product` field is currently typed\n * as a unspecified Context type, but both `details` and `details.product` are expected to\n * be standardized in future.\n */\nexport interface OrderElement {\n  /**\n   * Optional additional details about the order, which may include a product element that is\n   * an, as yet undefined but extensible, Context\n   */\n  details?: FluffyOrderDetails;\n  /**\n   * One or more identifiers that refer to the order in an OMS, EMS or related system.\n   * Specific key names for systems are expected to be standardized in future.\n   */\n  id: { [key: string]: string };\n  /**\n   * An optional human-readable summary of the order.\n   */\n  name?: string;\n  type: 'fdc3.order';\n  [property: string]: any;\n}\n\n/**\n * Optional additional details about the order, which may include a product element that is\n * an, as yet undefined but extensible, Context\n */\nexport interface FluffyOrderDetails {\n  product?: ProductObject;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * An entity that can be used when referencing private companies and other organizations\n * where a specific instrument is not available or desired e.g. CRM and News workflows.\n *\n * It is valid to include extra properties and metadata as part of the organization payload,\n * but the minimum requirement is for at least one specified identifier to be provided.\n */\nexport interface Organization {\n  /**\n   * Identifiers for the organization, at least one must be provided.\n   */\n  id: OrganizationIdentifiers;\n  type: 'fdc3.organization';\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Identifiers for the organization, at least one must be provided.\n */\nexport interface OrganizationIdentifiers {\n  /**\n   * FactSet Permanent Identifier representing the organization\n   */\n  FDS_ID?: string;\n  /**\n   * The Legal Entity Identifier (LEI) is a 20-character, alpha-numeric code based on the ISO\n   * 17442 standard developed by the International Organization for Standardization (ISO). It\n   * connects to key reference information that enables clear and unique identification of\n   * legal entities participating in financial transactions.\n   */\n  LEI?: string;\n  /**\n   * Refinitiv Permanent Identifiers, or PermID for the organization\n   */\n  PERMID?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A financial portfolio made up of multiple positions (holdings) in several instruments.\n * Contrast this with e.g. the [InstrumentList](InstrumentList) type, which is just a list\n * of instruments.\n *\n * This is a good example of how types can be composed and extended with extra properties to\n * define more complex types.\n *\n * The Portfolio type consists of an array of [Position](Position) types, each of which\n * refers to a single [Instrument](Instrument) and a holding amount for that instrument.\n *\n * The portfolio schema does not explicitly include identifiers in the `id` section, as\n * there bis not a common standard for such identifiers. Applications can, however, populate\n * this part of the contract with custom identifiers if so desired.\n */\nexport interface Portfolio {\n  /**\n   * The List of Positions which make up the Portfolio\n   */\n  positions: PositionElement[];\n  type: 'fdc3.portfolio';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * A financial position made up of an instrument and a holding in that instrument. This type\n * is a good example of how new context types can be composed from existing types.\n *\n * In this case, the instrument and the holding amount for that instrument are required\n * values.\n *\n * The [Position](Position) type goes hand-in-hand with the [Portfolio](Portfolio) type,\n * which represents multiple holdings in a combination of instruments.\n *\n * The position schema does not explicitly include identifiers in the `id` section, as there\n * is not a common standard for such identifiers. Applications can, however, populate this\n * part of the contract with custom identifiers if so desired.\n */\nexport interface PositionElement {\n  /**\n   * The amount of the holding, e.g. a number of shares\n   */\n  holding: number;\n  instrument: InstrumentElement;\n  type: 'fdc3.position';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A financial position made up of an instrument and a holding in that instrument. This type\n * is a good example of how new context types can be composed from existing types.\n *\n * In this case, the instrument and the holding amount for that instrument are required\n * values.\n *\n * The [Position](Position) type goes hand-in-hand with the [Portfolio](Portfolio) type,\n * which represents multiple holdings in a combination of instruments.\n *\n * The position schema does not explicitly include identifiers in the `id` section, as there\n * is not a common standard for such identifiers. Applications can, however, populate this\n * part of the contract with custom identifiers if so desired.\n */\nexport interface Position {\n  /**\n   * The amount of the holding, e.g. a number of shares\n   */\n  holding: number;\n  instrument: InstrumentElement;\n  type: 'fdc3.position';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * @experimental context type representing a tradable product. To be used with OMS and EMS\n * systems.\n *\n * This type is currently only loosely defined as an extensible context object, with an\n * optional instrument field.\n *\n * The Product schema does not explicitly include identifiers in the id section, as there is\n * not a common standard for such identifiers. Applications can, however, populate this part\n * of the contract with custom identifiers if so desired.\n */\nexport interface Product {\n  /**\n   * One or more identifiers that refer to the product. Specific key names for systems are\n   * expected to be standardized in future.\n   */\n  id: { [key: string]: string };\n  /**\n   * financial instrument that relates to the definition of this product\n   */\n  instrument?: InstrumentElement;\n  /**\n   * A human-readable summary of the product.\n   */\n  name?: string;\n  type: 'fdc3.product';\n  [property: string]: any;\n}\n\n/**\n * A context representing a period of time. Any user interfaces that represent or visualize\n * events or activity over time can be filtered or focused on a particular time period,\n * e.g.:\n *\n * - A pricing chart\n * - A trade blotter\n * - A record of client contact/activity in a CRM\n *\n * Example use cases:\n *\n * - User may want to view pricing/trades/customer activity for a security over a particular\n * time period, the time range might be specified as the context for the `ViewChart` intent\n * OR it might be embedded in another context (e.g. a context representing a chart to plot).\n * - User filters a visualization (e.g. a pricing chart) to show a particular period, the\n * `TimeRange` is broadcast and other visualizations (e.g. a heatmap of activity by\n * instrument, or industry sector etc.) receive it and filter themselves to show data over\n * the same range.\n *\n * Notes:\n *\n * - A `TimeRange` may be closed (i.e. `startTime` and `endTime` are both known) or open\n * (i.e. only one of `startTime` or `endTime` is known).\n * - Ranges corresponding to dates (e.g. `2022-05-12` to `2022-05-19`) should be specified\n * using times as this prevents issues with timezone conversions and inclusive/exclusive\n * date ranges.\n * - String fields representing times are encoded according to [ISO\n * 8601-1:2019](https://www.iso.org/standard/70907.html).\n * - A timezone indicator should be specified, e.g. `\"2022-05-12T15:18:03Z\"` or\n * `\"2022-05-12T16:18:03+01:00\"`\n * - Times MAY be specified with millisecond precision, e.g. `\"2022-05-12T15:18:03.349Z\"`\n */\nexport interface TimeRange {\n  /**\n   * The end time of the range, encoded according to [ISO\n   * 8601-1:2019](https://www.iso.org/standard/70907.html) with a timezone indicator.\n   */\n  endTime?: Date;\n  /**\n   * The start time of the range, encoded according to [ISO\n   * 8601-1:2019](https://www.iso.org/standard/70907.html) with a timezone indicator.\n   */\n  startTime?: Date;\n  type: 'fdc3.timerange';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * @experimental context type representing a trade. To be used with execution systems.\n *\n * This type currently only defines a required `id` field, which should provide a reference\n * to the trade in one or more systems, an optional human readable `name` field to be used\n * to summarize the trade and a required `product` field that may be used to provide\n * additional detail about the trade, which is currently typed as a unspecified Context\n * type, but `product` is expected to be standardized in future.\n *\n * The Trade schema does not explicitly include identifiers in the id section, as there is\n * not a common standard for such identifiers. Applications can, however, populate this part\n * of the contract with custom identifiers if so desired.\n */\nexport interface Trade {\n  /**\n   * One or more identifiers that refer to the trade in an OMS, EMS or related system.\n   * Specific key names for systems are expected to be standardized in future.\n   */\n  id: { [key: string]: string };\n  /**\n   * A human-readable summary of the trade.\n   */\n  name?: string;\n  /**\n   * A product that is the subject of th trade.\n   */\n  product: ProductObject;\n  type: 'fdc3.trade';\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * @experimental A list of trades. Use this type for use cases that require not just a\n * single trade, but multiple.\n *\n * The TradeList schema does not explicitly include identifiers in the id section, as there\n * is not a common standard for such identifiers. Applications can, however, populate this\n * part of the contract with custom identifiers if so desired.\n */\nexport interface TradeList {\n  /**\n   * An array of trade contexts that forms the list.\n   */\n  trades: TradeElement[];\n  type: 'fdc3.tradeList';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * @experimental context type representing a trade. To be used with execution systems.\n *\n * This type currently only defines a required `id` field, which should provide a reference\n * to the trade in one or more systems, an optional human readable `name` field to be used\n * to summarize the trade and a required `product` field that may be used to provide\n * additional detail about the trade, which is currently typed as a unspecified Context\n * type, but `product` is expected to be standardized in future.\n *\n * The Trade schema does not explicitly include identifiers in the id section, as there is\n * not a common standard for such identifiers. Applications can, however, populate this part\n * of the contract with custom identifiers if so desired.\n */\nexport interface TradeElement {\n  /**\n   * One or more identifiers that refer to the trade in an OMS, EMS or related system.\n   * Specific key names for systems are expected to be standardized in future.\n   */\n  id: { [key: string]: string };\n  /**\n   * A human-readable summary of the trade.\n   */\n  name?: string;\n  /**\n   * A product that is the subject of th trade.\n   */\n  product: ProductObject;\n  type: 'fdc3.trade';\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A context type representing the result of a transaction initiated via FDC3, which SHOULD\n * be returned as an `IntentResult` by intents that create, retrieve, update or delete\n * content or records in another application. Its purpose is to provide a status and message\n * (where needed) for the transaction and MAY wrap a returned context object.\n */\nexport interface TransactionResult {\n  /**\n   * A context object returned by the transaction, possibly with updated data.\n   */\n  context?: ContextElement;\n  /**\n   * The status of the transaction being reported.\n   */\n  status: TransactionStatus;\n  type: 'fdc3.transactionResult';\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * The status of the transaction being reported.\n */\nexport type TransactionStatus = 'Created' | 'Deleted' | 'Updated' | 'Failed';\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n/**\n * A context type representing the price and value of a holding.\n */\nexport interface Valuation {\n  /**\n   * The valuation currency, which should conform to 3 character alphabetic codes defined in\n   * [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)\n   */\n  CURRENCY_ISOCODE: string;\n  /**\n   * The time at which this valuation expires, encoded according to [ISO\n   * 8601-1:2019](https://www.iso.org/standard/70907.html) with a timezone indicator included.\n   */\n  expiryTime?: Date;\n  /**\n   * The price per unit the the valuation is based on.\n   */\n  price?: number;\n  type: 'fdc3.valuation';\n  /**\n   * The time at which the valuation was performed, encoded according to [ISO\n   * 8601-1:2019](https://www.iso.org/standard/70907.html) with a timezone indicator included.\n   */\n  valuationTime?: Date;\n  /**\n   * The value of the holding, expresses in the nominated currency.\n   */\n  value: number;\n  id?: { [key: string]: any };\n  name?: string;\n  [property: string]: any;\n}\n\n/**\n * Free text to be used for a keyword search\n *\n * `interactionType` SHOULD be one of `'Instant Message'`, `'Email'`, `'Call'`, or\n * `'Meeting'` although other string values are permitted.\n */\n\n// Converts JSON strings to/from your types\n// and asserts the results of JSON.parse at runtime\nexport class Convert {\n  public static toAction(json: string): Action {\n    return cast(JSON.parse(json), r('Action'));\n  }\n\n  public static actionToJson(value: Action): string {\n    return JSON.stringify(uncast(value, r('Action')), null, 2);\n  }\n\n  public static toChart(json: string): Chart {\n    return cast(JSON.parse(json), r('Chart'));\n  }\n\n  public static chartToJson(value: Chart): string {\n    return JSON.stringify(uncast(value, r('Chart')), null, 2);\n  }\n\n  public static toChatInitSettings(json: string): ChatInitSettings {\n    return cast(JSON.parse(json), r('ChatInitSettings'));\n  }\n\n  public static chatInitSettingsToJson(value: ChatInitSettings): string {\n    return JSON.stringify(uncast(value, r('ChatInitSettings')), null, 2);\n  }\n\n  public static toChatMessage(json: string): ChatMessage {\n    return cast(JSON.parse(json), r('ChatMessage'));\n  }\n\n  public static chatMessageToJson(value: ChatMessage): string {\n    return JSON.stringify(uncast(value, r('ChatMessage')), null, 2);\n  }\n\n  public static toChatRoom(json: string): ChatRoom {\n    return cast(JSON.parse(json), r('ChatRoom'));\n  }\n\n  public static chatRoomToJson(value: ChatRoom): string {\n    return JSON.stringify(uncast(value, r('ChatRoom')), null, 2);\n  }\n\n  public static toChatSearchCriteria(json: string): ChatSearchCriteria {\n    return cast(JSON.parse(json), r('ChatSearchCriteria'));\n  }\n\n  public static chatSearchCriteriaToJson(value: ChatSearchCriteria): string {\n    return JSON.stringify(uncast(value, r('ChatSearchCriteria')), null, 2);\n  }\n\n  public static toContact(json: string): Contact {\n    return cast(JSON.parse(json), r('Contact'));\n  }\n\n  public static contactToJson(value: Contact): string {\n    return JSON.stringify(uncast(value, r('Contact')), null, 2);\n  }\n\n  public static toContactList(json: string): ContactList {\n    return cast(JSON.parse(json), r('ContactList'));\n  }\n\n  public static contactListToJson(value: ContactList): string {\n    return JSON.stringify(uncast(value, r('ContactList')), null, 2);\n  }\n\n  public static toContext(json: string): Context {\n    return cast(JSON.parse(json), r('Context'));\n  }\n\n  public static contextToJson(value: Context): string {\n    return JSON.stringify(uncast(value, r('Context')), null, 2);\n  }\n\n  public static toCountry(json: string): Country {\n    return cast(JSON.parse(json), r('Country'));\n  }\n\n  public static countryToJson(value: Country): string {\n    return JSON.stringify(uncast(value, r('Country')), null, 2);\n  }\n\n  public static toCurrency(json: string): Currency {\n    return cast(JSON.parse(json), r('Currency'));\n  }\n\n  public static currencyToJson(value: Currency): string {\n    return JSON.stringify(uncast(value, r('Currency')), null, 2);\n  }\n\n  public static toEmail(json: string): Email {\n    return cast(JSON.parse(json), r('Email'));\n  }\n\n  public static emailToJson(value: Email): string {\n    return JSON.stringify(uncast(value, r('Email')), null, 2);\n  }\n\n  public static toInstrument(json: string): Instrument {\n    return cast(JSON.parse(json), r('Instrument'));\n  }\n\n  public static instrumentToJson(value: Instrument): string {\n    return JSON.stringify(uncast(value, r('Instrument')), null, 2);\n  }\n\n  public static toInstrumentList(json: string): InstrumentList {\n    return cast(JSON.parse(json), r('InstrumentList'));\n  }\n\n  public static instrumentListToJson(value: InstrumentList): string {\n    return JSON.stringify(uncast(value, r('InstrumentList')), null, 2);\n  }\n\n  public static toInteraction(json: string): Interaction {\n    return cast(JSON.parse(json), r('Interaction'));\n  }\n\n  public static interactionToJson(value: Interaction): string {\n    return JSON.stringify(uncast(value, r('Interaction')), null, 2);\n  }\n\n  public static toMessage(json: string): Message {\n    return cast(JSON.parse(json), r('Message'));\n  }\n\n  public static messageToJson(value: Message): string {\n    return JSON.stringify(uncast(value, r('Message')), null, 2);\n  }\n\n  public static toNothing(json: string): Nothing {\n    return cast(JSON.parse(json), r('Nothing'));\n  }\n\n  public static nothingToJson(value: Nothing): string {\n    return JSON.stringify(uncast(value, r('Nothing')), null, 2);\n  }\n\n  public static toOrder(json: string): Order {\n    return cast(JSON.parse(json), r('Order'));\n  }\n\n  public static orderToJson(value: Order): string {\n    return JSON.stringify(uncast(value, r('Order')), null, 2);\n  }\n\n  public static toOrderList(json: string): OrderList {\n    return cast(JSON.parse(json), r('OrderList'));\n  }\n\n  public static orderListToJson(value: OrderList): string {\n    return JSON.stringify(uncast(value, r('OrderList')), null, 2);\n  }\n\n  public static toOrganization(json: string): Organization {\n    return cast(JSON.parse(json), r('Organization'));\n  }\n\n  public static organizationToJson(value: Organization): string {\n    return JSON.stringify(uncast(value, r('Organization')), null, 2);\n  }\n\n  public static toPortfolio(json: string): Portfolio {\n    return cast(JSON.parse(json), r('Portfolio'));\n  }\n\n  public static portfolioToJson(value: Portfolio): string {\n    return JSON.stringify(uncast(value, r('Portfolio')), null, 2);\n  }\n\n  public static toPosition(json: string): Position {\n    return cast(JSON.parse(json), r('Position'));\n  }\n\n  public static positionToJson(value: Position): string {\n    return JSON.stringify(uncast(value, r('Position')), null, 2);\n  }\n\n  public static toProduct(json: string): Product {\n    return cast(JSON.parse(json), r('Product'));\n  }\n\n  public static productToJson(value: Product): string {\n    return JSON.stringify(uncast(value, r('Product')), null, 2);\n  }\n\n  public static toTimeRange(json: string): TimeRange {\n    return cast(JSON.parse(json), r('TimeRange'));\n  }\n\n  public static timeRangeToJson(value: TimeRange): string {\n    return JSON.stringify(uncast(value, r('TimeRange')), null, 2);\n  }\n\n  public static toTrade(json: string): Trade {\n    return cast(JSON.parse(json), r('Trade'));\n  }\n\n  public static tradeToJson(value: Trade): string {\n    return JSON.stringify(uncast(value, r('Trade')), null, 2);\n  }\n\n  public static toTradeList(json: string): TradeList {\n    return cast(JSON.parse(json), r('TradeList'));\n  }\n\n  public static tradeListToJson(value: TradeList): string {\n    return JSON.stringify(uncast(value, r('TradeList')), null, 2);\n  }\n\n  public static toTransactionResult(json: string): TransactionResult {\n    return cast(JSON.parse(json), r('TransactionResult'));\n  }\n\n  public static transactionResultToJson(value: TransactionResult): string {\n    return JSON.stringify(uncast(value, r('TransactionResult')), null, 2);\n  }\n\n  public static toValuation(json: string): Valuation {\n    return cast(JSON.parse(json), r('Valuation'));\n  }\n\n  public static valuationToJson(value: Valuation): string {\n    return JSON.stringify(uncast(value, r('Valuation')), null, 2);\n  }\n}\n\nfunction invalidValue(typ: any, val: any, key: any, parent: any = ''): never {\n  const prettyTyp = prettyTypeName(typ);\n  const parentText = parent ? ` on ${parent}` : '';\n  const keyText = key ? ` for key \"${key}\"` : '';\n  throw Error(`Invalid value${keyText}${parentText}. Expected ${prettyTyp} but got ${JSON.stringify(val)}`);\n}\n\nfunction prettyTypeName(typ: any): string {\n  if (Array.isArray(typ)) {\n    if (typ.length === 2 && typ[0] === undefined) {\n      return `an optional ${prettyTypeName(typ[1])}`;\n    } else {\n      return `one of [${typ\n        .map(a => {\n          return prettyTypeName(a);\n        })\n        .join(', ')}]`;\n    }\n  } else if (typeof typ === 'object' && typ.literal !== undefined) {\n    return typ.literal;\n  } else {\n    return typeof typ;\n  }\n}\n\nfunction jsonToJSProps(typ: any): any {\n  if (typ.jsonToJS === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => (map[p.json] = { key: p.js, typ: p.typ }));\n    typ.jsonToJS = map;\n  }\n  return typ.jsonToJS;\n}\n\nfunction jsToJSONProps(typ: any): any {\n  if (typ.jsToJSON === undefined) {\n    const map: any = {};\n    typ.props.forEach((p: any) => (map[p.js] = { key: p.json, typ: p.typ }));\n    typ.jsToJSON = map;\n  }\n  return typ.jsToJSON;\n}\n\nfunction transform(val: any, typ: any, getProps: any, key: any = '', parent: any = ''): any {\n  function transformPrimitive(typ: string, val: any): any {\n    if (typeof typ === typeof val) return val;\n    return invalidValue(typ, val, key, parent);\n  }\n\n  function transformUnion(typs: any[], val: any): any {\n    // val must validate against one typ in typs\n    const l = typs.length;\n    for (let i = 0; i < l; i++) {\n      const typ = typs[i];\n      try {\n        return transform(val, typ, getProps);\n      } catch (_) {}\n    }\n    return invalidValue(typs, val, key, parent);\n  }\n\n  function transformEnum(cases: string[], val: any): any {\n    if (cases.indexOf(val) !== -1) return val;\n    return invalidValue(\n      cases.map(a => {\n        return l(a);\n      }),\n      val,\n      key,\n      parent\n    );\n  }\n\n  function transformArray(typ: any, val: any): any {\n    // val must be an array with no invalid elements\n    if (!Array.isArray(val)) return invalidValue(l('array'), val, key, parent);\n    return val.map(el => transform(el, typ, getProps));\n  }\n\n  function transformDate(val: any): any {\n    if (val === null) {\n      return null;\n    }\n    const d = new Date(val);\n    if (isNaN(d.valueOf())) {\n      return invalidValue(l('Date'), val, key, parent);\n    }\n    return d;\n  }\n\n  function transformObject(props: { [k: string]: any }, additional: any, val: any): any {\n    if (val === null || typeof val !== 'object' || Array.isArray(val)) {\n      return invalidValue(l(ref || 'object'), val, key, parent);\n    }\n    const result: any = {};\n    Object.getOwnPropertyNames(props).forEach(key => {\n      const prop = props[key];\n      const v = Object.prototype.hasOwnProperty.call(val, key) ? val[key] : undefined;\n      result[prop.key] = transform(v, prop.typ, getProps, key, ref);\n    });\n    Object.getOwnPropertyNames(val).forEach(key => {\n      if (!Object.prototype.hasOwnProperty.call(props, key)) {\n        result[key] = transform(val[key], additional, getProps, key, ref);\n      }\n    });\n    return result;\n  }\n\n  if (typ === 'any') return val;\n  if (typ === null) {\n    if (val === null) return val;\n    return invalidValue(typ, val, key, parent);\n  }\n  if (typ === false) return invalidValue(typ, val, key, parent);\n  let ref: any = undefined;\n  while (typeof typ === 'object' && typ.ref !== undefined) {\n    ref = typ.ref;\n    typ = typeMap[typ.ref];\n  }\n  if (Array.isArray(typ)) return transformEnum(typ, val);\n  if (typeof typ === 'object') {\n    return typ.hasOwnProperty('unionMembers')\n      ? transformUnion(typ.unionMembers, val)\n      : typ.hasOwnProperty('arrayItems')\n      ? transformArray(typ.arrayItems, val)\n      : typ.hasOwnProperty('props')\n      ? transformObject(getProps(typ), typ.additional, val)\n      : invalidValue(typ, val, key, parent);\n  }\n  // Numbers can be parsed by Date but shouldn't be.\n  if (typ === Date && typeof val !== 'number') return transformDate(val);\n  return transformPrimitive(typ, val);\n}\n\nfunction cast<T>(val: any, typ: any): T {\n  return transform(val, typ, jsonToJSProps);\n}\n\nfunction uncast<T>(val: T, typ: any): any {\n  return transform(val, typ, jsToJSONProps);\n}\n\nfunction l(typ: any) {\n  return { literal: typ };\n}\n\nfunction a(typ: any) {\n  return { arrayItems: typ };\n}\n\nfunction u(...typs: any[]) {\n  return { unionMembers: typs };\n}\n\nfunction o(props: any[], additional: any) {\n  return { props, additional };\n}\n\nfunction m(additional: any) {\n  return { props: [], additional };\n}\n\nfunction r(name: string) {\n  return { ref: name };\n}\n\nconst typeMap: any = {\n  Action: o(\n    [\n      { json: 'app', js: 'app', typ: u(undefined, r('ActionTargetApp')) },\n      { json: 'context', js: 'context', typ: r('ContextElement') },\n      { json: 'intent', js: 'intent', typ: u(undefined, '') },\n      { json: 'title', js: 'title', typ: '' },\n      { json: 'type', js: 'type', typ: r('ActionType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  ActionTargetApp: o(\n    [\n      { json: 'appId', js: 'appId', typ: '' },\n      { json: 'desktopAgent', js: 'desktopAgent', typ: u(undefined, '') },\n      { json: 'instanceId', js: 'instanceId', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  ContextElement: o(\n    [\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: '' },\n    ],\n    'any'\n  ),\n  Chart: o(\n    [\n      { json: 'instruments', js: 'instruments', typ: a(r('InstrumentElement')) },\n      { json: 'otherConfig', js: 'otherConfig', typ: u(undefined, a(r('ContextElement'))) },\n      { json: 'range', js: 'range', typ: u(undefined, r('TimeRangeObject')) },\n      { json: 'style', js: 'style', typ: u(undefined, r('ChartStyle')) },\n      { json: 'type', js: 'type', typ: r('ChartType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  InstrumentElement: o(\n    [\n      { json: 'id', js: 'id', typ: r('PurpleInstrumentIdentifiers') },\n      { json: 'market', js: 'market', typ: u(undefined, r('OrganizationMarket')) },\n      { json: 'type', js: 'type', typ: r('PurpleInteractionType') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  PurpleInstrumentIdentifiers: o(\n    [\n      { json: 'BBG', js: 'BBG', typ: u(undefined, '') },\n      { json: 'CUSIP', js: 'CUSIP', typ: u(undefined, '') },\n      { json: 'FDS_ID', js: 'FDS_ID', typ: u(undefined, '') },\n      { json: 'FIGI', js: 'FIGI', typ: u(undefined, '') },\n      { json: 'ISIN', js: 'ISIN', typ: u(undefined, '') },\n      { json: 'PERMID', js: 'PERMID', typ: u(undefined, '') },\n      { json: 'RIC', js: 'RIC', typ: u(undefined, '') },\n      { json: 'SEDOL', js: 'SEDOL', typ: u(undefined, '') },\n      { json: 'ticker', js: 'ticker', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  OrganizationMarket: o(\n    [\n      { json: 'BBG', js: 'BBG', typ: u(undefined, '') },\n      { json: 'COUNTRY_ISOALPHA2', js: 'COUNTRY_ISOALPHA2', typ: u(undefined, '') },\n      { json: 'MIC', js: 'MIC', typ: u(undefined, '') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  TimeRangeObject: o(\n    [\n      { json: 'endTime', js: 'endTime', typ: u(undefined, Date) },\n      { json: 'startTime', js: 'startTime', typ: u(undefined, Date) },\n      { json: 'type', js: 'type', typ: r('TimeRangeType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  ChatInitSettings: o(\n    [\n      { json: 'chatName', js: 'chatName', typ: u(undefined, '') },\n      { json: 'members', js: 'members', typ: u(undefined, r('ContactListObject')) },\n      { json: 'message', js: 'message', typ: u(undefined, u(r('MessageObject'), '')) },\n      { json: 'options', js: 'options', typ: u(undefined, r('ChatOptions')) },\n      { json: 'type', js: 'type', typ: r('ChatInitSettingsType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  ContactListObject: o(\n    [\n      { json: 'contacts', js: 'contacts', typ: a(r('ContactElement')) },\n      { json: 'type', js: 'type', typ: r('ContactListType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  ContactElement: o(\n    [\n      { json: 'id', js: 'id', typ: r('PurpleContactIdentifiers') },\n      { json: 'type', js: 'type', typ: r('FluffyInteractionType') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  PurpleContactIdentifiers: o(\n    [\n      { json: 'email', js: 'email', typ: u(undefined, '') },\n      { json: 'FDS_ID', js: 'FDS_ID', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  MessageObject: o(\n    [\n      { json: 'entities', js: 'entities', typ: u(undefined, m(r('PurpleAction'))) },\n      { json: 'text', js: 'text', typ: u(undefined, r('PurpleMessageText')) },\n      { json: 'type', js: 'type', typ: r('MessageType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  PurpleAction: o(\n    [\n      { json: 'app', js: 'app', typ: u(undefined, r('ActionTargetApp')) },\n      { json: 'context', js: 'context', typ: u(undefined, r('ContextElement')) },\n      { json: 'intent', js: 'intent', typ: u(undefined, '') },\n      { json: 'title', js: 'title', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: r('EntityType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'data', js: 'data', typ: u(undefined, r('PurpleData')) },\n    ],\n    'any'\n  ),\n  PurpleData: o(\n    [\n      { json: 'dataUri', js: 'dataUri', typ: '' },\n      { json: 'name', js: 'name', typ: '' },\n    ],\n    'any'\n  ),\n  PurpleMessageText: o(\n    [\n      { json: 'text/markdown', js: 'text/markdown', typ: u(undefined, '') },\n      { json: 'text/plain', js: 'text/plain', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  ChatOptions: o(\n    [\n      { json: 'allowAddUser', js: 'allowAddUser', typ: u(undefined, true) },\n      { json: 'allowHistoryBrowsing', js: 'allowHistoryBrowsing', typ: u(undefined, true) },\n      { json: 'allowMessageCopy', js: 'allowMessageCopy', typ: u(undefined, true) },\n      { json: 'groupRecipients', js: 'groupRecipients', typ: u(undefined, true) },\n      { json: 'isPublic', js: 'isPublic', typ: u(undefined, true) },\n    ],\n    'any'\n  ),\n  ChatMessage: o(\n    [\n      { json: 'chatRoom', js: 'chatRoom', typ: r('ChatRoomObject') },\n      { json: 'message', js: 'message', typ: u(r('MessageObject'), '') },\n      { json: 'type', js: 'type', typ: r('ChatMessageType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  ChatRoomObject: o(\n    [\n      { json: 'id', js: 'id', typ: m('any') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'providerName', js: 'providerName', typ: '' },\n      { json: 'type', js: 'type', typ: r('ChatRoomType') },\n      { json: 'url', js: 'url', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  ChatRoom: o(\n    [\n      { json: 'id', js: 'id', typ: m('any') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'providerName', js: 'providerName', typ: '' },\n      { json: 'type', js: 'type', typ: r('ChatRoomType') },\n      { json: 'url', js: 'url', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  ChatSearchCriteria: o(\n    [\n      { json: 'criteria', js: 'criteria', typ: a(u(r('OrganizationObject'), '')) },\n      { json: 'type', js: 'type', typ: r('ChatSearchCriteriaType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  OrganizationObject: o(\n    [\n      { json: 'id', js: 'id', typ: r('Identifiers') },\n      { json: 'market', js: 'market', typ: u(undefined, r('OrganizationMarket')) },\n      { json: 'type', js: 'type', typ: r('TentacledInteractionType') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Identifiers: o(\n    [\n      { json: 'BBG', js: 'BBG', typ: u(undefined, '') },\n      { json: 'CUSIP', js: 'CUSIP', typ: u(undefined, '') },\n      { json: 'FDS_ID', js: 'FDS_ID', typ: u(undefined, '') },\n      { json: 'FIGI', js: 'FIGI', typ: u(undefined, '') },\n      { json: 'ISIN', js: 'ISIN', typ: u(undefined, '') },\n      { json: 'PERMID', js: 'PERMID', typ: u(undefined, '') },\n      { json: 'RIC', js: 'RIC', typ: u(undefined, '') },\n      { json: 'SEDOL', js: 'SEDOL', typ: u(undefined, '') },\n      { json: 'ticker', js: 'ticker', typ: u(undefined, '') },\n      { json: 'LEI', js: 'LEI', typ: u(undefined, '') },\n      { json: 'email', js: 'email', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Contact: o(\n    [\n      { json: 'id', js: 'id', typ: r('FluffyContactIdentifiers') },\n      { json: 'type', js: 'type', typ: r('FluffyInteractionType') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  FluffyContactIdentifiers: o(\n    [\n      { json: 'email', js: 'email', typ: u(undefined, '') },\n      { json: 'FDS_ID', js: 'FDS_ID', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  ContactList: o(\n    [\n      { json: 'contacts', js: 'contacts', typ: a(r('ContactElement')) },\n      { json: 'type', js: 'type', typ: r('ContactListType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Context: o(\n    [\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: '' },\n    ],\n    'any'\n  ),\n  Country: o(\n    [\n      { json: 'id', js: 'id', typ: r('CountryID') },\n      { json: 'type', js: 'type', typ: r('CountryType') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  CountryID: o(\n    [\n      { json: 'COUNTRY_ISOALPHA2', js: 'COUNTRY_ISOALPHA2', typ: u(undefined, '') },\n      { json: 'COUNTRY_ISOALPHA3', js: 'COUNTRY_ISOALPHA3', typ: u(undefined, '') },\n      { json: 'ISOALPHA2', js: 'ISOALPHA2', typ: u(undefined, '') },\n      { json: 'ISOALPHA3', js: 'ISOALPHA3', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Currency: o(\n    [\n      { json: 'id', js: 'id', typ: r('CurrencyID') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: r('CurrencyType') },\n    ],\n    'any'\n  ),\n  CurrencyID: o([{ json: 'CURRENCY_ISOCODE', js: 'CURRENCY_ISOCODE', typ: u(undefined, '') }], 'any'),\n  Email: o(\n    [\n      { json: 'recipients', js: 'recipients', typ: r('EmailRecipients') },\n      { json: 'subject', js: 'subject', typ: u(undefined, '') },\n      { json: 'textBody', js: 'textBody', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: r('EmailType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  EmailRecipients: o(\n    [\n      { json: 'id', js: 'id', typ: u(undefined, r('EmailRecipientsID')) },\n      { json: 'type', js: 'type', typ: r('EmailRecipientsType') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'contacts', js: 'contacts', typ: u(undefined, a(r('ContactElement'))) },\n    ],\n    'any'\n  ),\n  EmailRecipientsID: o(\n    [\n      { json: 'email', js: 'email', typ: u(undefined, '') },\n      { json: 'FDS_ID', js: 'FDS_ID', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Instrument: o(\n    [\n      { json: 'id', js: 'id', typ: r('FluffyInstrumentIdentifiers') },\n      { json: 'market', js: 'market', typ: u(undefined, r('PurpleMarket')) },\n      { json: 'type', js: 'type', typ: r('PurpleInteractionType') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  FluffyInstrumentIdentifiers: o(\n    [\n      { json: 'BBG', js: 'BBG', typ: u(undefined, '') },\n      { json: 'CUSIP', js: 'CUSIP', typ: u(undefined, '') },\n      { json: 'FDS_ID', js: 'FDS_ID', typ: u(undefined, '') },\n      { json: 'FIGI', js: 'FIGI', typ: u(undefined, '') },\n      { json: 'ISIN', js: 'ISIN', typ: u(undefined, '') },\n      { json: 'PERMID', js: 'PERMID', typ: u(undefined, '') },\n      { json: 'RIC', js: 'RIC', typ: u(undefined, '') },\n      { json: 'SEDOL', js: 'SEDOL', typ: u(undefined, '') },\n      { json: 'ticker', js: 'ticker', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  PurpleMarket: o(\n    [\n      { json: 'BBG', js: 'BBG', typ: u(undefined, '') },\n      { json: 'COUNTRY_ISOALPHA2', js: 'COUNTRY_ISOALPHA2', typ: u(undefined, '') },\n      { json: 'MIC', js: 'MIC', typ: u(undefined, '') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  InstrumentList: o(\n    [\n      { json: 'instruments', js: 'instruments', typ: a(r('InstrumentElement')) },\n      { json: 'type', js: 'type', typ: r('InstrumentListType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Interaction: o(\n    [\n      { json: 'description', js: 'description', typ: '' },\n      { json: 'id', js: 'id', typ: u(undefined, r('InteractionID')) },\n      { json: 'initiator', js: 'initiator', typ: u(undefined, r('ContactElement')) },\n      { json: 'interactionType', js: 'interactionType', typ: '' },\n      { json: 'origin', js: 'origin', typ: u(undefined, '') },\n      { json: 'participants', js: 'participants', typ: r('ContactListObject') },\n      { json: 'timeRange', js: 'timeRange', typ: r('TimeRangeObject') },\n      { json: 'type', js: 'type', typ: r('InteractionType') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  InteractionID: o(\n    [\n      { json: 'SALESFORCE', js: 'SALESFORCE', typ: u(undefined, '') },\n      { json: 'SINGLETRACK', js: 'SINGLETRACK', typ: u(undefined, '') },\n      { json: 'URI', js: 'URI', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Message: o(\n    [\n      { json: 'entities', js: 'entities', typ: u(undefined, m(r('FluffyAction'))) },\n      { json: 'text', js: 'text', typ: u(undefined, r('FluffyMessageText')) },\n      { json: 'type', js: 'type', typ: r('MessageType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  FluffyAction: o(\n    [\n      { json: 'app', js: 'app', typ: u(undefined, r('ActionTargetApp')) },\n      { json: 'context', js: 'context', typ: u(undefined, r('ContextElement')) },\n      { json: 'intent', js: 'intent', typ: u(undefined, '') },\n      { json: 'title', js: 'title', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: r('EntityType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'data', js: 'data', typ: u(undefined, r('FluffyData')) },\n    ],\n    'any'\n  ),\n  FluffyData: o(\n    [\n      { json: 'dataUri', js: 'dataUri', typ: '' },\n      { json: 'name', js: 'name', typ: '' },\n    ],\n    'any'\n  ),\n  FluffyMessageText: o(\n    [\n      { json: 'text/markdown', js: 'text/markdown', typ: u(undefined, '') },\n      { json: 'text/plain', js: 'text/plain', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Nothing: o(\n    [\n      { json: 'type', js: 'type', typ: r('NothingType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Order: o(\n    [\n      { json: 'details', js: 'details', typ: u(undefined, r('PurpleOrderDetails')) },\n      { json: 'id', js: 'id', typ: m('') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: r('OrderType') },\n    ],\n    'any'\n  ),\n  PurpleOrderDetails: o([{ json: 'product', js: 'product', typ: u(undefined, r('ProductObject')) }], 'any'),\n  ProductObject: o(\n    [\n      { json: 'id', js: 'id', typ: m('') },\n      { json: 'instrument', js: 'instrument', typ: u(undefined, r('InstrumentElement')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: r('ProductType') },\n    ],\n    'any'\n  ),\n  OrderList: o(\n    [\n      { json: 'orders', js: 'orders', typ: a(r('OrderElement')) },\n      { json: 'type', js: 'type', typ: r('OrderListType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  OrderElement: o(\n    [\n      { json: 'details', js: 'details', typ: u(undefined, r('FluffyOrderDetails')) },\n      { json: 'id', js: 'id', typ: m('') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: r('OrderType') },\n    ],\n    'any'\n  ),\n  FluffyOrderDetails: o([{ json: 'product', js: 'product', typ: u(undefined, r('ProductObject')) }], 'any'),\n  Organization: o(\n    [\n      { json: 'id', js: 'id', typ: r('OrganizationIdentifiers') },\n      { json: 'type', js: 'type', typ: r('StickyInteractionType') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  OrganizationIdentifiers: o(\n    [\n      { json: 'FDS_ID', js: 'FDS_ID', typ: u(undefined, '') },\n      { json: 'LEI', js: 'LEI', typ: u(undefined, '') },\n      { json: 'PERMID', js: 'PERMID', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Portfolio: o(\n    [\n      { json: 'positions', js: 'positions', typ: a(r('PositionElement')) },\n      { json: 'type', js: 'type', typ: r('PortfolioType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  PositionElement: o(\n    [\n      { json: 'holding', js: 'holding', typ: 3.14 },\n      { json: 'instrument', js: 'instrument', typ: r('InstrumentElement') },\n      { json: 'type', js: 'type', typ: r('PositionType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Position: o(\n    [\n      { json: 'holding', js: 'holding', typ: 3.14 },\n      { json: 'instrument', js: 'instrument', typ: r('InstrumentElement') },\n      { json: 'type', js: 'type', typ: r('PositionType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Product: o(\n    [\n      { json: 'id', js: 'id', typ: m('') },\n      { json: 'instrument', js: 'instrument', typ: u(undefined, r('InstrumentElement')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'type', js: 'type', typ: r('ProductType') },\n    ],\n    'any'\n  ),\n  TimeRange: o(\n    [\n      { json: 'endTime', js: 'endTime', typ: u(undefined, Date) },\n      { json: 'startTime', js: 'startTime', typ: u(undefined, Date) },\n      { json: 'type', js: 'type', typ: r('TimeRangeType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Trade: o(\n    [\n      { json: 'id', js: 'id', typ: m('') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'product', js: 'product', typ: r('ProductObject') },\n      { json: 'type', js: 'type', typ: r('TradeType') },\n    ],\n    'any'\n  ),\n  TradeList: o(\n    [\n      { json: 'trades', js: 'trades', typ: a(r('TradeElement')) },\n      { json: 'type', js: 'type', typ: r('TradeListType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  TradeElement: o(\n    [\n      { json: 'id', js: 'id', typ: m('') },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n      { json: 'product', js: 'product', typ: r('ProductObject') },\n      { json: 'type', js: 'type', typ: r('TradeType') },\n    ],\n    'any'\n  ),\n  TransactionResult: o(\n    [\n      { json: 'context', js: 'context', typ: u(undefined, r('ContextElement')) },\n      { json: 'status', js: 'status', typ: r('TransactionStatus') },\n      { json: 'type', js: 'type', typ: r('TransactionResultType') },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  Valuation: o(\n    [\n      { json: 'CURRENCY_ISOCODE', js: 'CURRENCY_ISOCODE', typ: '' },\n      { json: 'expiryTime', js: 'expiryTime', typ: u(undefined, Date) },\n      { json: 'price', js: 'price', typ: u(undefined, 3.14) },\n      { json: 'type', js: 'type', typ: r('ValuationType') },\n      { json: 'valuationTime', js: 'valuationTime', typ: u(undefined, Date) },\n      { json: 'value', js: 'value', typ: 3.14 },\n      { json: 'id', js: 'id', typ: u(undefined, m('any')) },\n      { json: 'name', js: 'name', typ: u(undefined, '') },\n    ],\n    'any'\n  ),\n  ActionType: ['fdc3.action'],\n  PurpleInteractionType: ['fdc3.instrument'],\n  TimeRangeType: ['fdc3.timerange'],\n  ChartStyle: ['bar', 'candle', 'custom', 'heatmap', 'histogram', 'line', 'mountain', 'pie', 'scatter', 'stacked-bar'],\n  ChartType: ['fdc3.chart'],\n  FluffyInteractionType: ['fdc3.contact'],\n  ContactListType: ['fdc3.contactList'],\n  EntityType: ['fdc3.action', 'fdc3.entity.fileAttachment'],\n  MessageType: ['fdc3.message'],\n  ChatInitSettingsType: ['fdc3.chat.initSettings'],\n  ChatRoomType: ['fdc3.chat.room'],\n  ChatMessageType: ['fdc3.chat.message'],\n  TentacledInteractionType: ['fdc3.contact', 'fdc3.instrument', 'fdc3.organization'],\n  ChatSearchCriteriaType: ['fdc3.chat.searchCriteria'],\n  CountryType: ['fdc3.country'],\n  CurrencyType: ['fdc3.currency'],\n  EmailRecipientsType: ['fdc3.contact', 'fdc3.contactList'],\n  EmailType: ['fdc3.email'],\n  InstrumentListType: ['fdc3.instrumentList'],\n  InteractionType: ['fdc3.interaction'],\n  NothingType: ['fdc3.nothing'],\n  ProductType: ['fdc3.product'],\n  OrderType: ['fdc3.order'],\n  OrderListType: ['fdc3.orderList'],\n  StickyInteractionType: ['fdc3.organization'],\n  PositionType: ['fdc3.position'],\n  PortfolioType: ['fdc3.portfolio'],\n  TradeType: ['fdc3.trade'],\n  TradeListType: ['fdc3.tradeList'],\n  TransactionStatus: ['Created', 'Deleted', 'Failed', 'Updated'],\n  TransactionResultType: ['fdc3.transactionResult'],\n  ValuationType: ['fdc3.valuation'],\n};\n", "/**\n * SPDX-License-Identifier: Apache-2.0\n * Copyright FINOS FDC3 contributors - see NOTICE file\n */\nexport enum Intents {\n  CreateInteraction = 'CreateInteraction',\n  SendChatMessage = 'SendChatMessage',\n  StartCall = 'StartCall',\n  StartChat = 'StartChat',\n  StartEmail = 'StartEmail',\n  ViewAnalysis = 'ViewAnalysis',\n  ViewChat = 'ViewChat',\n  ViewChart = 'ViewChart',\n  ViewContact = 'ViewContact',\n  ViewHoldings = 'ViewHoldings',\n  ViewInstrument = 'ViewInstrument',\n  ViewInteractions = 'ViewInteractions',\n  ViewMessages = 'ViewMessages',\n  ViewNews = 'ViewNews',\n  ViewOrders = 'ViewOrders',\n  ViewProfile = 'ViewProfile',\n  ViewQuote = 'ViewQuote',\n  ViewResearch = 'ViewResearch',\n}\n"],
  "mappings": "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",
  "names": ["Convert", "toFDC3DesktopAgentAPISchema", "json", "cast", "JSON", "parse", "fDC3DesktopAgentAPISchemaToJson", "value", "stringify", "uncast", "toBaseImplementationMetadata", "r", "baseImplementationMetadataToJson", "toAgentErrorResponseMessage", "agentErrorResponseMessageToJson", "toAgentRequestMessage", "agentRequestMessageToJson", "toAgentResponseMessage", "agentResponseMessageToJson", "toBridgeErrorResponseMessage", "bridgeErrorResponseMessageToJson", "toBridgeRequestMessage", "bridgeRequestMessageToJson", "toBridgeResponseMessage", "bridgeResponseMessageToJson", "toBroadcastAgentRequest", "broadcastAgentRequestToJson", "toBroadcastBridgeRequest", "broadcastBridgeRequestToJson", "toBridgingCommons", "m", "bridgingCommonsToJson", "toConnectionStepMessage", "connectionStepMessageToJson", "toConnectionStep2Hello", "connectionStep2HelloToJson", "toConnectionStep3Handshake", "connectionStep3HandshakeToJson", "toConnectionStep4AuthenticationFailed", "connectionStep4AuthenticationFailedToJson", "toConnectionStep6ConnectedAgentsUpdate", "connectionStep6ConnectedAgentsUpdateToJson", "toFindInstancesAgentErrorResponse", "findInstancesAgentErrorResponseToJson", "toFindInstancesAgentRequest", "findInstancesAgentRequestToJson", "toFindInstancesAgentResponse", "findInstancesAgentResponseToJson", "toFindInstancesBridgeErrorResponse", "findInstancesBridgeErrorResponseToJson", "toFindInstancesBridgeRequest", "findInstancesBridgeRequestToJson", "toFindInstancesBridgeResponse", "findInstancesBridgeResponseToJson", "toFindIntentAgentErrorResponse", "findIntentAgentErrorResponseToJson", "toFindIntentAgentRequest", "findIntentAgentRequestToJson", "toFindIntentAgentResponse", "findIntentAgentResponseToJson", "toFindIntentBridgeErrorResponse", "findIntentBridgeErrorResponseToJson", "toFindIntentBridgeRequest", "findIntentBridgeRequestToJson", "toFindIntentBridgeResponse", "findIntentBridgeResponseToJson", "toFindIntentsByContextAgentErrorResponse", "findIntentsByContextAgentErrorResponseToJson", "toFindIntentsByContextAgentRequest", "findIntentsByContextAgentRequestToJson", "toFindIntentsByContextAgentResponse", "findIntentsByContextAgentResponseToJson", "toFindIntentsByContextBridgeErrorResponse", "findIntentsByContextBridgeErrorResponseToJson", "toFindIntentsByContextBridgeRequest", "findIntentsByContextBridgeRequestToJson", "toFindIntentsByContextBridgeResponse", "findIntentsByContextBridgeResponseToJson", "toGetAppMetadataAgentErrorResponse", "getAppMetadataAgentErrorResponseToJson", "toGetAppMetadataAgentRequest", "getAppMetadataAgentRequestToJson", "toGetAppMetadataAgentResponse", "getAppMetadataAgentResponseToJson", "toGetAppMetadataBridgeErrorResponse", "getAppMetadataBridgeErrorResponseToJson", "toGetAppMetadataBridgeRequest", "getAppMetadataBridgeRequestToJson", "toGetAppMetadataBridgeResponse", "getAppMetadataBridgeResponseToJson", "toOpenAgentErrorResponse", "openAgentErrorResponseToJson", "toOpenAgentRequest", "openAgentRequestToJson", "toOpenAgentResponse", "openAgentResponseToJson", "toOpenBridgeErrorResponse", "openBridgeErrorResponseToJson", "toOpenBridgeRequest", "openBridgeRequestToJson", "toOpenBridgeResponse", "openBridgeResponseToJson", "toPrivateChannelBroadcastAgentRequest", "privateChannelBroadcastAgentRequestToJson", "toPrivateChannelBroadcastBridgeRequest", "privateChannelBroadcastBridgeRequestToJson", "toPrivateChannelEventListenerAddedAgentRequest", "privateChannelEventListenerAddedAgentRequestToJson", "toPrivateChannelEventListenerAddedBridgeRequest", "privateChannelEventListenerAddedBridgeRequestToJson", "toPrivateChannelEventListenerRemovedAgentRequest", "privateChannelEventListenerRemovedAgentRequestToJson", "toPrivateChannelEventListenerRemovedBridgeRequest", "privateChannelEventListenerRemovedBridgeRequestToJson", "toPrivateChannelOnAddContextListenerAgentRequest", "privateChannelOnAddContextListenerAgentRequestToJson", "toPrivateChannelOnAddContextListenerBridgeRequest", "privateChannelOnAddContextListenerBridgeRequestToJson", "toPrivateChannelOnDisconnectAgentRequest", "privateChannelOnDisconnectAgentRequestToJson", "toPrivateChannelOnDisconnectBridgeRequest", "privateChannelOnDisconnectBridgeRequestToJson", "toPrivateChannelOnUnsubscribeAgentRequest", "privateChannelOnUnsubscribeAgentRequestToJson", "toPrivateChannelOnUnsubscribeBridgeRequest", "privateChannelOnUnsubscribeBridgeRequestToJson", "toRaiseIntentAgentErrorResponse", "raiseIntentAgentErrorResponseToJson", "toRaiseIntentAgentRequest", "raiseIntentAgentRequestToJson", "toRaiseIntentAgentResponse", "raiseIntentAgentResponseToJson", "toRaiseIntentBridgeErrorResponse", "raiseIntentBridgeErrorResponseToJson", "toRaiseIntentBridgeRequest", "raiseIntentBridgeRequestToJson", "toRaiseIntentBridgeResponse", "raiseIntentBridgeResponseToJson", "toRaiseIntentResultAgentErrorResponse", "raiseIntentResultAgentErrorResponseToJson", "toRaiseIntentResultAgentResponse", "raiseIntentResultAgentResponseToJson", "toRaiseIntentResultBridgeErrorResponse", "raiseIntentResultBridgeErrorResponseToJson", "toRaiseIntentResultBridgeResponse", "raiseIntentResultBridgeResponseToJson", "toContext", "contextToJson", "invalidValue", "typ", "val", "key", "parent", "prettyTyp", "prettyTypeName", "parentText", "keyText", "Error", "Array", "isArray", "length", "undefined", "map", "a", "join", "literal", "jsonToJSProps", "jsonToJS", "props", "forEach", "p", "js", "jsToJSONProps", "jsToJSON", "transform", "getProps", "transformPrimitive", "transformUnion", "typs", "l", "i", "_", "transformEnum", "cases", "indexOf", "transformArray", "el", "transformDate", "d", "Date", "isNaN", "valueOf", "transformObject", "additional", "ref", "result", "Object", "getOwnPropertyNames", "prop", "v", "prototype", "hasOwnProperty", "call", "typeMap", "unionMembers", "arrayItems", "u", "_len", "_key", "arguments", "o", "name", "BaseImplementationMetadata", "BaseImplementationMetadataOptionalFeatures", "AgentErrorResponseMessage", "AgentResponseMetadata", "ErrorResponseMessagePayload", "AgentRequestMessage", "AgentRequestMetadata", "BridgeParticipantIdentifier", "SourceIdentifier", "AgentResponseMessage", "BridgeErrorResponseMessage", "BridgeErrorResponseMessageMeta", "DesktopAgentIdentifier", "ResponseErrorMessagePayload", "BridgeRequestMessage", "BridgeRequestMetadata", "BridgeResponseMessage", "BridgeResponseMessageMeta", "BroadcastAgentRequest", "BroadcastAgentRequestMeta", "SourceObject", "BroadcastAgentRequestPayload", "ContextElement", "BroadcastBridgeRequest", "BroadcastBridgeRequestMeta", "MetaSource", "BroadcastBridgeRequestPayload", "ConnectionStepMessage", "ConnectionStepMetadata", "ConnectionStep2Hello", "ConnectionStep2HelloMeta", "ConnectionStep2HelloPayload", "ConnectionStep3Handshake", "ConnectionStep3HandshakeMeta", "ConnectionStep3HandshakePayload", "ImplementationMetadataElement", "ImplementationMetadataOptionalFeatures", "ConnectionStep4AuthenticationFailed", "ConnectionStep4AuthenticationFailedMeta", "ConnectionStep4AuthenticationFailedPayload", "ConnectionStep6ConnectedAgentsUpdate", "ConnectionStep6ConnectedAgentsUpdateMeta", "ConnectionStep6ConnectedAgentsUpdatePayload", "FindInstancesAgentErrorResponse", "FindInstancesAgentErrorResponseMeta", "FindInstancesAgentErrorResponsePayload", "FindInstancesAgentRequest", "FindInstancesAgentRequestMeta", "DestinationObject", "FindInstancesAgentRequestPayload", "AppIdentifier", "FindInstancesAgentResponse", "FindInstancesAgentResponseMeta", "FindInstancesAgentResponsePayload", "AppMetadata", "Icon", "Image", "FindInstancesBridgeErrorResponse", "FindInstancesBridgeErrorResponseMeta", "FindInstancesBridgeErrorResponsePayload", "FindInstancesBridgeRequest", "FindInstancesBridgeRequestMeta", "MetaSourceObject", "FindInstancesBridgeRequestPayload", "FindInstancesBridgeResponse", "FindInstancesBridgeResponseMeta", "FindInstancesBridgeResponsePayload", "FindIntentAgentErrorResponse", "FindIntentAgentErrorResponseMeta", "FindIntentAgentErrorResponsePayload", "FindIntentAgentRequest", "FindIntentAgentRequestMeta", "FindIntentAgentRequestPayload", "FindIntentAgentResponse", "FindIntentAgentResponseMeta", "FindIntentAgentResponsePayload", "AppIntent", "IntentMetadata", "FindIntentBridgeErrorResponse", "FindIntentBridgeErrorResponseMeta", "FindIntentBridgeErrorResponsePayload", "FindIntentBridgeRequest", "FindIntentBridgeRequestMeta", "FindIntentBridgeRequestPayload", "FindIntentBridgeResponse", "FindIntentBridgeResponseMeta", "FindIntentBridgeResponsePayload", "FindIntentsByContextAgentErrorResponse", "FindIntentsByContextAgentErrorResponseMeta", "FindIntentsByContextAgentErrorResponsePayload", "FindIntentsByContextAgentRequest", "FindIntentsByContextAgentRequestMeta", "FindIntentsByContextAgentRequestPayload", "FindIntentsByContextAgentResponse", "FindIntentsByContextAgentResponseMeta", "FindIntentsByContextAgentResponsePayload", "FindIntentsByContextBridgeErrorResponse", "FindIntentsByContextBridgeErrorResponseMeta", "FindIntentsByContextBridgeErrorResponsePayload", "FindIntentsByContextBridgeRequest", "FindIntentsByContextBridgeRequestMeta", "FindIntentsByContextBridgeRequestPayload", "FindIntentsByContextBridgeResponse", "FindIntentsByContextBridgeResponseMeta", "FindIntentsByContextBridgeResponsePayload", "GetAppMetadataAgentErrorResponse", "GetAppMetadataAgentErrorResponseMeta", "GetAppMetadataAgentErrorResponsePayload", "GetAppMetadataAgentRequest", "GetAppMetadataAgentRequestMeta", "GetAppMetadataAgentRequestPayload", "AppDestinationIdentifier", "GetAppMetadataAgentResponse", "GetAppMetadataAgentResponseMeta", "GetAppMetadataAgentResponsePayload", "GetAppMetadataBridgeErrorResponse", "GetAppMetadataBridgeErrorResponseMeta", "GetAppMetadataBridgeErrorResponsePayload", "GetAppMetadataBridgeRequest", "GetAppMetadataBridgeRequestMeta", "GetAppMetadataBridgeRequestPayload", "GetAppMetadataBridgeResponse", "GetAppMetadataBridgeResponseMeta", "GetAppMetadataBridgeResponsePayload", "OpenAgentErrorResponse", "OpenAgentErrorResponseMeta", "OpenAgentErrorResponsePayload", "OpenAgentRequest", "OpenAgentRequestMeta", "OpenAgentRequestPayload", "AppToOpen", "OpenAgentResponse", "OpenAgentResponseMeta", "OpenAgentResponsePayload", "OpenBridgeErrorResponse", "OpenBridgeErrorResponseMeta", "OpenBridgeErrorResponsePayload", "OpenBridgeRequest", "OpenBridgeRequestMeta", "OpenBridgeRequestPayload", "OpenBridgeResponse", "OpenBridgeResponseMeta", "OpenBridgeResponsePayload", "PrivateChannelBroadcastAgentRequest", "PrivateChannelBroadcastAgentRequestMeta", "MetaDestination", "PrivateChannelBroadcastAgentRequestPayload", "PrivateChannelBroadcastBridgeRequest", "PrivateChannelBroadcastBridgeRequestMeta", "PrivateChannelBroadcastBridgeRequestPayload", "PrivateChannelEventListenerAddedAgentRequest", "PrivateChannelEventListenerAddedAgentRequestMeta", "PrivateChannelEventListenerAddedAgentRequestPayload", "PrivateChannelEventListenerAddedBridgeRequest", "PrivateChannelEventListenerAddedBridgeRequestMeta", "PrivateChannelEventListenerAddedBridgeRequestPayload", "PrivateChannelEventListenerRemovedAgentRequest", "PrivateChannelEventListenerRemovedAgentRequestMeta", "PrivateChannelEventListenerRemovedAgentRequestPayload", "PrivateChannelEventListenerRemovedBridgeRequest", "PrivateChannelEventListenerRemovedBridgeRequestMeta", "PrivateChannelEventListenerRemovedBridgeRequestPayload", "PrivateChannelOnAddContextListenerAgentRequest", "PrivateChannelOnAddContextListenerAgentRequestMeta", "PrivateChannelOnAddContextListenerAgentRequestPayload", "PrivateChannelOnAddContextListenerBridgeRequest", "PrivateChannelOnAddContextListenerBridgeRequestMeta", "PrivateChannelOnAddContextListenerBridgeRequestPayload", "PrivateChannelOnDisconnectAgentRequest", "PrivateChannelOnDisconnectAgentRequestMeta", "PrivateChannelOnDisconnectAgentRequestPayload", "PrivateChannelOnDisconnectBridgeRequest", "PrivateChannelOnDisconnectBridgeRequestMeta", "PrivateChannelOnDisconnectBridgeRequestPayload", "PrivateChannelOnUnsubscribeAgentRequest", "PrivateChannelOnUnsubscribeAgentRequestMeta", "PrivateChannelOnUnsubscribeAgentRequestPayload", "PrivateChannelOnUnsubscribeBridgeRequest", "ERequestMetadata", "PrivateChannelOnUnsubscribeBridgeRequestPayload", "RaiseIntentAgentErrorResponse", "RaiseIntentAgentErrorResponseMeta", "RaiseIntentAgentErrorResponsePayload", "RaiseIntentAgentRequest", "RaiseIntentAgentRequestMeta", "RaiseIntentAgentRequestPayload", "RaiseIntentAgentResponse", "RaiseIntentAgentResponseMeta", "RaiseIntentAgentResponsePayload", "IntentResolution", "RaiseIntentBridgeErrorResponse", "RaiseIntentBridgeErrorResponseMeta", "RaiseIntentBridgeErrorResponsePayload", "RaiseIntentBridgeRequest", "RaiseIntentBridgeRequestMeta", "RaiseIntentBridgeRequestPayload", "RaiseIntentBridgeResponse", "RaiseIntentBridgeResponseMeta", "RaiseIntentBridgeResponsePayload", "RaiseIntentResultAgentErrorResponse", "RaiseIntentResultAgentErrorResponseMeta", "RaiseIntentResultAgentErrorResponsePayload", "RaiseIntentResultAgentResponse", "RaiseIntentResultAgentResponseMeta", "RaiseIntentResultAgentResponsePayload", "IntentResult", "Channel", "DisplayMetadata", "RaiseIntentResultBridgeErrorResponse", "RaiseIntentResultBridgeErrorResponseMeta", "RaiseIntentResultBridgeErrorResponsePayload", "RaiseIntentResultBridgeResponse", "RaiseIntentResultBridgeResponseMeta", "RaiseIntentResultBridgeResponsePayload", "Context", "ResponseErrorDetail", "ResponseMessageType", "RequestMessageType", "BroadcastRequestMessageType", "ConnectionStepMessageType", "ConnectionStep2HelloType", "ConnectionStep3HandshakeType", "ConnectionStep4AuthenticationFailedType", "ConnectionStep6ConnectedAgentsUpdateType", "ErrorMessage", "FindInstancesResponseMessageType", "FindInstancesRequestMessageType", "FindIntentResponseMessageType", "FindIntentRequestMessageType", "FindIntentsByContextResponseMessageType", "FindIntentsByContextRequestMessageType", "GetAppMetadataResponseMessageType", "GetAppMetadataRequestMessageType", "OpenErrorMessage", "OpenResponseMessageType", "OpenRequestMessageType", "PrivateChannelBroadcastMessageType", "PrivateChannelEventListenerTypes", "PrivateChannelEventListenerAddedMessageType", "PrivateChannelEventListenerRemovedMessageType", "PrivateChannelOnAddContextListenerMessageType", "PrivateChannelOnDisconnectMessageType", "PrivateChannelOnUnsubscribeMessageType", "RaiseIntentResponseMessageType", "RaiseIntentRequestMessageType", "RaiseIntentResultErrorMessage", "RaiseIntentResultResponseMessageType", "Type", "OpenError", "ResolveError", "ResultError", "ChannelError", "BridgingError", "DEFAULT_TIMEOUT", "UnavailableError", "TimeoutError", "UnexpectedError", "rejectIfNoGlobal", "f", "window", "fdc3", "Promise", "reject", "fdc3Ready", "_ref", "_asyncToGenerator", "_regeneratorRuntime", "mark", "_callee", "waitForMs", "wrap", "_callee$", "_context", "prev", "next", "abrupt", "resolve", "timeout", "setTimeout", "addEventListener", "clearTimeout", "once", "stop", "_x", "apply", "isString", "app", "open", "context", "findIntent", "intent", "resultType", "findIntentsByContext", "broadcast", "raiseIntent", "raiseIntentForContext", "addIntentListener", "handler", "addContextListener", "contextTypeOrHandler", "getUserChannels", "getSystemChannels", "joinUserChannel", "channelId", "joinChannel", "getOrCreateChannel", "getCurrentChannel", "leaveCurrentChannel", "createPrivateChannel", "getInfo", "getAppMetadata", "findInstances", "compareVersionNumbers", "b", "aVerArr", "split", "Number", "bVerArr", "index", "Math", "max", "e", "console", "error", "versionIsAtLeast", "metadata", "version", "comparison", "fdc3Version", "ContextTypes", "toAction", "actionToJson", "toChart", "chartToJson", "toChatInitSettings", "chatInitSettingsToJson", "toChatMessage", "chatMessageToJson", "toChatRoom", "chatRoomToJson", "toChatSearchCriteria", "chatSearchCriteriaToJson", "toContact", "contactToJson", "toContactList", "contactListToJson", "toCountry", "countryToJson", "toCurrency", "currencyToJson", "toEmail", "emailToJson", "toInstrument", "instrumentToJson", "toInstrumentList", "instrumentListToJson", "toInteraction", "interactionToJson", "toMessage", "messageToJson", "toNothing", "nothingToJson", "toOrder", "orderToJson", "toOrderList", "orderListToJson", "toOrganization", "organizationToJson", "toPortfolio", "portfolioToJson", "toPosition", "positionToJson", "toProduct", "productToJson", "toTimeRange", "timeRangeToJson", "toTrade", "tradeToJson", "toTradeList", "tradeListToJson", "toTransactionResult", "transactionResultToJson", "toValuation", "valuationToJson", "Action", "ActionTargetApp", "Chart", "InstrumentElement", "PurpleInstrumentIdentifiers", "OrganizationMarket", "TimeRangeObject", "ChatInitSettings", "ContactListObject", "ContactElement", "PurpleContactIdentifiers", "MessageObject", "PurpleAction", "PurpleData", "PurpleMessageText", "ChatOptions", "ChatMessage", "ChatRoomObject", "ChatRoom", "ChatSearchCriteria", "OrganizationObject", "Identifiers", "Contact", "FluffyContactIdentifiers", "ContactList", "Country", "CountryID", "Currency", "CurrencyID", "Email", "EmailRecipients", "EmailRecipientsID", "Instrument", "FluffyInstrumentIdentifiers", "PurpleMarket", "InstrumentList", "Interaction", "InteractionID", "Message", "FluffyAction", "FluffyData", "FluffyMessageText", "Nothing", "Order", "PurpleOrderDetails", "ProductObject", "OrderList", "OrderElement", "FluffyOrderDetails", "Organization", "OrganizationIdentifiers", "Portfolio", "PositionElement", "Position", "Product", "TimeRange", "Trade", "TradeList", "TradeElement", "TransactionResult", "Valuation", "ActionType", "PurpleInteractionType", "TimeRangeType", "ChartStyle", "ChartType", "FluffyInteractionType", "ContactListType", "EntityType", "MessageType", "ChatInitSettingsType", "ChatRoomType", "ChatMessageType", "TentacledInteractionType", "ChatSearchCriteriaType", "CountryType", "CurrencyType", "EmailRecipientsType", "EmailType", "InstrumentListType", "InteractionType", "NothingType", "ProductType", "OrderType", "OrderListType", "StickyInteractionType", "PositionType", "PortfolioType", "TradeType", "TradeListType", "TransactionStatus", "TransactionResultType", "ValuationType", "Intents"]
}
