// ../../../../../../.yarn/berry/cache/@finos-fdc3-npm-2.1.0-beta.4-a2c7cde941-10c0.zip/node_modules/@finos/fdc3/dist/fdc3.esm.js
var Convert = function() {
  function Convert2() {
  }
  Convert2.toFDC3DesktopAgentAPISchema = function toFDC3DesktopAgentAPISchema(json) {
    return cast(JSON.parse(json), "any");
  };
  Convert2.fDC3DesktopAgentAPISchemaToJson = function fDC3DesktopAgentAPISchemaToJson(value) {
    return JSON.stringify(uncast(value, "any"), null, 2);
  };
  Convert2.toBaseImplementationMetadata = function toBaseImplementationMetadata(json) {
    return cast(JSON.parse(json), r("BaseImplementationMetadata"));
  };
  Convert2.baseImplementationMetadataToJson = function baseImplementationMetadataToJson(value) {
    return JSON.stringify(uncast(value, r("BaseImplementationMetadata")), null, 2);
  };
  Convert2.toAgentErrorResponseMessage = function toAgentErrorResponseMessage(json) {
    return cast(JSON.parse(json), r("AgentErrorResponseMessage"));
  };
  Convert2.agentErrorResponseMessageToJson = function agentErrorResponseMessageToJson(value) {
    return JSON.stringify(uncast(value, r("AgentErrorResponseMessage")), null, 2);
  };
  Convert2.toAgentRequestMessage = function toAgentRequestMessage(json) {
    return cast(JSON.parse(json), r("AgentRequestMessage"));
  };
  Convert2.agentRequestMessageToJson = function agentRequestMessageToJson(value) {
    return JSON.stringify(uncast(value, r("AgentRequestMessage")), null, 2);
  };
  Convert2.toAgentResponseMessage = function toAgentResponseMessage(json) {
    return cast(JSON.parse(json), r("AgentResponseMessage"));
  };
  Convert2.agentResponseMessageToJson = function agentResponseMessageToJson(value) {
    return JSON.stringify(uncast(value, r("AgentResponseMessage")), null, 2);
  };
  Convert2.toBridgeErrorResponseMessage = function toBridgeErrorResponseMessage(json) {
    return cast(JSON.parse(json), r("BridgeErrorResponseMessage"));
  };
  Convert2.bridgeErrorResponseMessageToJson = function bridgeErrorResponseMessageToJson(value) {
    return JSON.stringify(uncast(value, r("BridgeErrorResponseMessage")), null, 2);
  };
  Convert2.toBridgeRequestMessage = function toBridgeRequestMessage(json) {
    return cast(JSON.parse(json), r("BridgeRequestMessage"));
  };
  Convert2.bridgeRequestMessageToJson = function bridgeRequestMessageToJson(value) {
    return JSON.stringify(uncast(value, r("BridgeRequestMessage")), null, 2);
  };
  Convert2.toBridgeResponseMessage = function toBridgeResponseMessage(json) {
    return cast(JSON.parse(json), r("BridgeResponseMessage"));
  };
  Convert2.bridgeResponseMessageToJson = function bridgeResponseMessageToJson(value) {
    return JSON.stringify(uncast(value, r("BridgeResponseMessage")), null, 2);
  };
  Convert2.toBroadcastAgentRequest = function toBroadcastAgentRequest(json) {
    return cast(JSON.parse(json), r("BroadcastAgentRequest"));
  };
  Convert2.broadcastAgentRequestToJson = function broadcastAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("BroadcastAgentRequest")), null, 2);
  };
  Convert2.toBroadcastBridgeRequest = function toBroadcastBridgeRequest(json) {
    return cast(JSON.parse(json), r("BroadcastBridgeRequest"));
  };
  Convert2.broadcastBridgeRequestToJson = function broadcastBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("BroadcastBridgeRequest")), null, 2);
  };
  Convert2.toBridgingCommons = function toBridgingCommons(json) {
    return cast(JSON.parse(json), m("any"));
  };
  Convert2.bridgingCommonsToJson = function bridgingCommonsToJson(value) {
    return JSON.stringify(uncast(value, m("any")), null, 2);
  };
  Convert2.toConnectionStepMessage = function toConnectionStepMessage(json) {
    return cast(JSON.parse(json), r("ConnectionStepMessage"));
  };
  Convert2.connectionStepMessageToJson = function connectionStepMessageToJson(value) {
    return JSON.stringify(uncast(value, r("ConnectionStepMessage")), null, 2);
  };
  Convert2.toConnectionStep2Hello = function toConnectionStep2Hello(json) {
    return cast(JSON.parse(json), r("ConnectionStep2Hello"));
  };
  Convert2.connectionStep2HelloToJson = function connectionStep2HelloToJson(value) {
    return JSON.stringify(uncast(value, r("ConnectionStep2Hello")), null, 2);
  };
  Convert2.toConnectionStep3Handshake = function toConnectionStep3Handshake(json) {
    return cast(JSON.parse(json), r("ConnectionStep3Handshake"));
  };
  Convert2.connectionStep3HandshakeToJson = function connectionStep3HandshakeToJson(value) {
    return JSON.stringify(uncast(value, r("ConnectionStep3Handshake")), null, 2);
  };
  Convert2.toConnectionStep4AuthenticationFailed = function toConnectionStep4AuthenticationFailed(json) {
    return cast(JSON.parse(json), r("ConnectionStep4AuthenticationFailed"));
  };
  Convert2.connectionStep4AuthenticationFailedToJson = function connectionStep4AuthenticationFailedToJson(value) {
    return JSON.stringify(uncast(value, r("ConnectionStep4AuthenticationFailed")), null, 2);
  };
  Convert2.toConnectionStep6ConnectedAgentsUpdate = function toConnectionStep6ConnectedAgentsUpdate(json) {
    return cast(JSON.parse(json), r("ConnectionStep6ConnectedAgentsUpdate"));
  };
  Convert2.connectionStep6ConnectedAgentsUpdateToJson = function connectionStep6ConnectedAgentsUpdateToJson(value) {
    return JSON.stringify(uncast(value, r("ConnectionStep6ConnectedAgentsUpdate")), null, 2);
  };
  Convert2.toFindInstancesAgentErrorResponse = function toFindInstancesAgentErrorResponse(json) {
    return cast(JSON.parse(json), r("FindInstancesAgentErrorResponse"));
  };
  Convert2.findInstancesAgentErrorResponseToJson = function findInstancesAgentErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindInstancesAgentErrorResponse")), null, 2);
  };
  Convert2.toFindInstancesAgentRequest = function toFindInstancesAgentRequest(json) {
    return cast(JSON.parse(json), r("FindInstancesAgentRequest"));
  };
  Convert2.findInstancesAgentRequestToJson = function findInstancesAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("FindInstancesAgentRequest")), null, 2);
  };
  Convert2.toFindInstancesAgentResponse = function toFindInstancesAgentResponse(json) {
    return cast(JSON.parse(json), r("FindInstancesAgentResponse"));
  };
  Convert2.findInstancesAgentResponseToJson = function findInstancesAgentResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindInstancesAgentResponse")), null, 2);
  };
  Convert2.toFindInstancesBridgeErrorResponse = function toFindInstancesBridgeErrorResponse(json) {
    return cast(JSON.parse(json), r("FindInstancesBridgeErrorResponse"));
  };
  Convert2.findInstancesBridgeErrorResponseToJson = function findInstancesBridgeErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindInstancesBridgeErrorResponse")), null, 2);
  };
  Convert2.toFindInstancesBridgeRequest = function toFindInstancesBridgeRequest(json) {
    return cast(JSON.parse(json), r("FindInstancesBridgeRequest"));
  };
  Convert2.findInstancesBridgeRequestToJson = function findInstancesBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("FindInstancesBridgeRequest")), null, 2);
  };
  Convert2.toFindInstancesBridgeResponse = function toFindInstancesBridgeResponse(json) {
    return cast(JSON.parse(json), r("FindInstancesBridgeResponse"));
  };
  Convert2.findInstancesBridgeResponseToJson = function findInstancesBridgeResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindInstancesBridgeResponse")), null, 2);
  };
  Convert2.toFindIntentAgentErrorResponse = function toFindIntentAgentErrorResponse(json) {
    return cast(JSON.parse(json), r("FindIntentAgentErrorResponse"));
  };
  Convert2.findIntentAgentErrorResponseToJson = function findIntentAgentErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentAgentErrorResponse")), null, 2);
  };
  Convert2.toFindIntentAgentRequest = function toFindIntentAgentRequest(json) {
    return cast(JSON.parse(json), r("FindIntentAgentRequest"));
  };
  Convert2.findIntentAgentRequestToJson = function findIntentAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentAgentRequest")), null, 2);
  };
  Convert2.toFindIntentAgentResponse = function toFindIntentAgentResponse(json) {
    return cast(JSON.parse(json), r("FindIntentAgentResponse"));
  };
  Convert2.findIntentAgentResponseToJson = function findIntentAgentResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentAgentResponse")), null, 2);
  };
  Convert2.toFindIntentBridgeErrorResponse = function toFindIntentBridgeErrorResponse(json) {
    return cast(JSON.parse(json), r("FindIntentBridgeErrorResponse"));
  };
  Convert2.findIntentBridgeErrorResponseToJson = function findIntentBridgeErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentBridgeErrorResponse")), null, 2);
  };
  Convert2.toFindIntentBridgeRequest = function toFindIntentBridgeRequest(json) {
    return cast(JSON.parse(json), r("FindIntentBridgeRequest"));
  };
  Convert2.findIntentBridgeRequestToJson = function findIntentBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentBridgeRequest")), null, 2);
  };
  Convert2.toFindIntentBridgeResponse = function toFindIntentBridgeResponse(json) {
    return cast(JSON.parse(json), r("FindIntentBridgeResponse"));
  };
  Convert2.findIntentBridgeResponseToJson = function findIntentBridgeResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentBridgeResponse")), null, 2);
  };
  Convert2.toFindIntentsByContextAgentErrorResponse = function toFindIntentsByContextAgentErrorResponse(json) {
    return cast(JSON.parse(json), r("FindIntentsByContextAgentErrorResponse"));
  };
  Convert2.findIntentsByContextAgentErrorResponseToJson = function findIntentsByContextAgentErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentsByContextAgentErrorResponse")), null, 2);
  };
  Convert2.toFindIntentsByContextAgentRequest = function toFindIntentsByContextAgentRequest(json) {
    return cast(JSON.parse(json), r("FindIntentsByContextAgentRequest"));
  };
  Convert2.findIntentsByContextAgentRequestToJson = function findIntentsByContextAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentsByContextAgentRequest")), null, 2);
  };
  Convert2.toFindIntentsByContextAgentResponse = function toFindIntentsByContextAgentResponse(json) {
    return cast(JSON.parse(json), r("FindIntentsByContextAgentResponse"));
  };
  Convert2.findIntentsByContextAgentResponseToJson = function findIntentsByContextAgentResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentsByContextAgentResponse")), null, 2);
  };
  Convert2.toFindIntentsByContextBridgeErrorResponse = function toFindIntentsByContextBridgeErrorResponse(json) {
    return cast(JSON.parse(json), r("FindIntentsByContextBridgeErrorResponse"));
  };
  Convert2.findIntentsByContextBridgeErrorResponseToJson = function findIntentsByContextBridgeErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentsByContextBridgeErrorResponse")), null, 2);
  };
  Convert2.toFindIntentsByContextBridgeRequest = function toFindIntentsByContextBridgeRequest(json) {
    return cast(JSON.parse(json), r("FindIntentsByContextBridgeRequest"));
  };
  Convert2.findIntentsByContextBridgeRequestToJson = function findIntentsByContextBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentsByContextBridgeRequest")), null, 2);
  };
  Convert2.toFindIntentsByContextBridgeResponse = function toFindIntentsByContextBridgeResponse(json) {
    return cast(JSON.parse(json), r("FindIntentsByContextBridgeResponse"));
  };
  Convert2.findIntentsByContextBridgeResponseToJson = function findIntentsByContextBridgeResponseToJson(value) {
    return JSON.stringify(uncast(value, r("FindIntentsByContextBridgeResponse")), null, 2);
  };
  Convert2.toGetAppMetadataAgentErrorResponse = function toGetAppMetadataAgentErrorResponse(json) {
    return cast(JSON.parse(json), r("GetAppMetadataAgentErrorResponse"));
  };
  Convert2.getAppMetadataAgentErrorResponseToJson = function getAppMetadataAgentErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("GetAppMetadataAgentErrorResponse")), null, 2);
  };
  Convert2.toGetAppMetadataAgentRequest = function toGetAppMetadataAgentRequest(json) {
    return cast(JSON.parse(json), r("GetAppMetadataAgentRequest"));
  };
  Convert2.getAppMetadataAgentRequestToJson = function getAppMetadataAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("GetAppMetadataAgentRequest")), null, 2);
  };
  Convert2.toGetAppMetadataAgentResponse = function toGetAppMetadataAgentResponse(json) {
    return cast(JSON.parse(json), r("GetAppMetadataAgentResponse"));
  };
  Convert2.getAppMetadataAgentResponseToJson = function getAppMetadataAgentResponseToJson(value) {
    return JSON.stringify(uncast(value, r("GetAppMetadataAgentResponse")), null, 2);
  };
  Convert2.toGetAppMetadataBridgeErrorResponse = function toGetAppMetadataBridgeErrorResponse(json) {
    return cast(JSON.parse(json), r("GetAppMetadataBridgeErrorResponse"));
  };
  Convert2.getAppMetadataBridgeErrorResponseToJson = function getAppMetadataBridgeErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("GetAppMetadataBridgeErrorResponse")), null, 2);
  };
  Convert2.toGetAppMetadataBridgeRequest = function toGetAppMetadataBridgeRequest(json) {
    return cast(JSON.parse(json), r("GetAppMetadataBridgeRequest"));
  };
  Convert2.getAppMetadataBridgeRequestToJson = function getAppMetadataBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("GetAppMetadataBridgeRequest")), null, 2);
  };
  Convert2.toGetAppMetadataBridgeResponse = function toGetAppMetadataBridgeResponse(json) {
    return cast(JSON.parse(json), r("GetAppMetadataBridgeResponse"));
  };
  Convert2.getAppMetadataBridgeResponseToJson = function getAppMetadataBridgeResponseToJson(value) {
    return JSON.stringify(uncast(value, r("GetAppMetadataBridgeResponse")), null, 2);
  };
  Convert2.toOpenAgentErrorResponse = function toOpenAgentErrorResponse(json) {
    return cast(JSON.parse(json), r("OpenAgentErrorResponse"));
  };
  Convert2.openAgentErrorResponseToJson = function openAgentErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("OpenAgentErrorResponse")), null, 2);
  };
  Convert2.toOpenAgentRequest = function toOpenAgentRequest(json) {
    return cast(JSON.parse(json), r("OpenAgentRequest"));
  };
  Convert2.openAgentRequestToJson = function openAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("OpenAgentRequest")), null, 2);
  };
  Convert2.toOpenAgentResponse = function toOpenAgentResponse(json) {
    return cast(JSON.parse(json), r("OpenAgentResponse"));
  };
  Convert2.openAgentResponseToJson = function openAgentResponseToJson(value) {
    return JSON.stringify(uncast(value, r("OpenAgentResponse")), null, 2);
  };
  Convert2.toOpenBridgeErrorResponse = function toOpenBridgeErrorResponse(json) {
    return cast(JSON.parse(json), r("OpenBridgeErrorResponse"));
  };
  Convert2.openBridgeErrorResponseToJson = function openBridgeErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("OpenBridgeErrorResponse")), null, 2);
  };
  Convert2.toOpenBridgeRequest = function toOpenBridgeRequest(json) {
    return cast(JSON.parse(json), r("OpenBridgeRequest"));
  };
  Convert2.openBridgeRequestToJson = function openBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("OpenBridgeRequest")), null, 2);
  };
  Convert2.toOpenBridgeResponse = function toOpenBridgeResponse(json) {
    return cast(JSON.parse(json), r("OpenBridgeResponse"));
  };
  Convert2.openBridgeResponseToJson = function openBridgeResponseToJson(value) {
    return JSON.stringify(uncast(value, r("OpenBridgeResponse")), null, 2);
  };
  Convert2.toPrivateChannelBroadcastAgentRequest = function toPrivateChannelBroadcastAgentRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelBroadcastAgentRequest"));
  };
  Convert2.privateChannelBroadcastAgentRequestToJson = function privateChannelBroadcastAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelBroadcastAgentRequest")), null, 2);
  };
  Convert2.toPrivateChannelBroadcastBridgeRequest = function toPrivateChannelBroadcastBridgeRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelBroadcastBridgeRequest"));
  };
  Convert2.privateChannelBroadcastBridgeRequestToJson = function privateChannelBroadcastBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelBroadcastBridgeRequest")), null, 2);
  };
  Convert2.toPrivateChannelEventListenerAddedAgentRequest = function toPrivateChannelEventListenerAddedAgentRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelEventListenerAddedAgentRequest"));
  };
  Convert2.privateChannelEventListenerAddedAgentRequestToJson = function privateChannelEventListenerAddedAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelEventListenerAddedAgentRequest")), null, 2);
  };
  Convert2.toPrivateChannelEventListenerAddedBridgeRequest = function toPrivateChannelEventListenerAddedBridgeRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelEventListenerAddedBridgeRequest"));
  };
  Convert2.privateChannelEventListenerAddedBridgeRequestToJson = function privateChannelEventListenerAddedBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelEventListenerAddedBridgeRequest")), null, 2);
  };
  Convert2.toPrivateChannelEventListenerRemovedAgentRequest = function toPrivateChannelEventListenerRemovedAgentRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelEventListenerRemovedAgentRequest"));
  };
  Convert2.privateChannelEventListenerRemovedAgentRequestToJson = function privateChannelEventListenerRemovedAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelEventListenerRemovedAgentRequest")), null, 2);
  };
  Convert2.toPrivateChannelEventListenerRemovedBridgeRequest = function toPrivateChannelEventListenerRemovedBridgeRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelEventListenerRemovedBridgeRequest"));
  };
  Convert2.privateChannelEventListenerRemovedBridgeRequestToJson = function privateChannelEventListenerRemovedBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelEventListenerRemovedBridgeRequest")), null, 2);
  };
  Convert2.toPrivateChannelOnAddContextListenerAgentRequest = function toPrivateChannelOnAddContextListenerAgentRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelOnAddContextListenerAgentRequest"));
  };
  Convert2.privateChannelOnAddContextListenerAgentRequestToJson = function privateChannelOnAddContextListenerAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelOnAddContextListenerAgentRequest")), null, 2);
  };
  Convert2.toPrivateChannelOnAddContextListenerBridgeRequest = function toPrivateChannelOnAddContextListenerBridgeRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelOnAddContextListenerBridgeRequest"));
  };
  Convert2.privateChannelOnAddContextListenerBridgeRequestToJson = function privateChannelOnAddContextListenerBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelOnAddContextListenerBridgeRequest")), null, 2);
  };
  Convert2.toPrivateChannelOnDisconnectAgentRequest = function toPrivateChannelOnDisconnectAgentRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelOnDisconnectAgentRequest"));
  };
  Convert2.privateChannelOnDisconnectAgentRequestToJson = function privateChannelOnDisconnectAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelOnDisconnectAgentRequest")), null, 2);
  };
  Convert2.toPrivateChannelOnDisconnectBridgeRequest = function toPrivateChannelOnDisconnectBridgeRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelOnDisconnectBridgeRequest"));
  };
  Convert2.privateChannelOnDisconnectBridgeRequestToJson = function privateChannelOnDisconnectBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelOnDisconnectBridgeRequest")), null, 2);
  };
  Convert2.toPrivateChannelOnUnsubscribeAgentRequest = function toPrivateChannelOnUnsubscribeAgentRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelOnUnsubscribeAgentRequest"));
  };
  Convert2.privateChannelOnUnsubscribeAgentRequestToJson = function privateChannelOnUnsubscribeAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelOnUnsubscribeAgentRequest")), null, 2);
  };
  Convert2.toPrivateChannelOnUnsubscribeBridgeRequest = function toPrivateChannelOnUnsubscribeBridgeRequest(json) {
    return cast(JSON.parse(json), r("PrivateChannelOnUnsubscribeBridgeRequest"));
  };
  Convert2.privateChannelOnUnsubscribeBridgeRequestToJson = function privateChannelOnUnsubscribeBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("PrivateChannelOnUnsubscribeBridgeRequest")), null, 2);
  };
  Convert2.toRaiseIntentAgentErrorResponse = function toRaiseIntentAgentErrorResponse(json) {
    return cast(JSON.parse(json), r("RaiseIntentAgentErrorResponse"));
  };
  Convert2.raiseIntentAgentErrorResponseToJson = function raiseIntentAgentErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("RaiseIntentAgentErrorResponse")), null, 2);
  };
  Convert2.toRaiseIntentAgentRequest = function toRaiseIntentAgentRequest(json) {
    return cast(JSON.parse(json), r("RaiseIntentAgentRequest"));
  };
  Convert2.raiseIntentAgentRequestToJson = function raiseIntentAgentRequestToJson(value) {
    return JSON.stringify(uncast(value, r("RaiseIntentAgentRequest")), null, 2);
  };
  Convert2.toRaiseIntentAgentResponse = function toRaiseIntentAgentResponse(json) {
    return cast(JSON.parse(json), r("RaiseIntentAgentResponse"));
  };
  Convert2.raiseIntentAgentResponseToJson = function raiseIntentAgentResponseToJson(value) {
    return JSON.stringify(uncast(value, r("RaiseIntentAgentResponse")), null, 2);
  };
  Convert2.toRaiseIntentBridgeErrorResponse = function toRaiseIntentBridgeErrorResponse(json) {
    return cast(JSON.parse(json), r("RaiseIntentBridgeErrorResponse"));
  };
  Convert2.raiseIntentBridgeErrorResponseToJson = function raiseIntentBridgeErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("RaiseIntentBridgeErrorResponse")), null, 2);
  };
  Convert2.toRaiseIntentBridgeRequest = function toRaiseIntentBridgeRequest(json) {
    return cast(JSON.parse(json), r("RaiseIntentBridgeRequest"));
  };
  Convert2.raiseIntentBridgeRequestToJson = function raiseIntentBridgeRequestToJson(value) {
    return JSON.stringify(uncast(value, r("RaiseIntentBridgeRequest")), null, 2);
  };
  Convert2.toRaiseIntentBridgeResponse = function toRaiseIntentBridgeResponse(json) {
    return cast(JSON.parse(json), r("RaiseIntentBridgeResponse"));
  };
  Convert2.raiseIntentBridgeResponseToJson = function raiseIntentBridgeResponseToJson(value) {
    return JSON.stringify(uncast(value, r("RaiseIntentBridgeResponse")), null, 2);
  };
  Convert2.toRaiseIntentResultAgentErrorResponse = function toRaiseIntentResultAgentErrorResponse(json) {
    return cast(JSON.parse(json), r("RaiseIntentResultAgentErrorResponse"));
  };
  Convert2.raiseIntentResultAgentErrorResponseToJson = function raiseIntentResultAgentErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("RaiseIntentResultAgentErrorResponse")), null, 2);
  };
  Convert2.toRaiseIntentResultAgentResponse = function toRaiseIntentResultAgentResponse(json) {
    return cast(JSON.parse(json), r("RaiseIntentResultAgentResponse"));
  };
  Convert2.raiseIntentResultAgentResponseToJson = function raiseIntentResultAgentResponseToJson(value) {
    return JSON.stringify(uncast(value, r("RaiseIntentResultAgentResponse")), null, 2);
  };
  Convert2.toRaiseIntentResultBridgeErrorResponse = function toRaiseIntentResultBridgeErrorResponse(json) {
    return cast(JSON.parse(json), r("RaiseIntentResultBridgeErrorResponse"));
  };
  Convert2.raiseIntentResultBridgeErrorResponseToJson = function raiseIntentResultBridgeErrorResponseToJson(value) {
    return JSON.stringify(uncast(value, r("RaiseIntentResultBridgeErrorResponse")), null, 2);
  };
  Convert2.toRaiseIntentResultBridgeResponse = function toRaiseIntentResultBridgeResponse(json) {
    return cast(JSON.parse(json), r("RaiseIntentResultBridgeResponse"));
  };
  Convert2.raiseIntentResultBridgeResponseToJson = function raiseIntentResultBridgeResponseToJson(value) {
    return JSON.stringify(uncast(value, r("RaiseIntentResultBridgeResponse")), null, 2);
  };
  Convert2.toContext = function toContext(json) {
    return cast(JSON.parse(json), r("Context"));
  };
  Convert2.contextToJson = function contextToJson(value) {
    return JSON.stringify(uncast(value, r("Context")), null, 2);
  };
  return Convert2;
}();
function invalidValue(typ, val, key, parent) {
  if (parent === void 0) {
    parent = "";
  }
  var prettyTyp = prettyTypeName(typ);
  var parentText = parent ? " on " + parent : "";
  var keyText = key ? ' for key "' + key + '"' : "";
  throw Error("Invalid value" + keyText + parentText + ". Expected " + prettyTyp + " but got " + JSON.stringify(val));
}
function prettyTypeName(typ) {
  if (Array.isArray(typ)) {
    if (typ.length === 2 && typ[0] === void 0) {
      return "an optional " + prettyTypeName(typ[1]);
    } else {
      return "one of [" + typ.map(function(a2) {
        return prettyTypeName(a2);
      }).join(", ") + "]";
    }
  } else if (typeof typ === "object" && typ.literal !== void 0) {
    return typ.literal;
  } else {
    return typeof typ;
  }
}
function jsonToJSProps(typ) {
  if (typ.jsonToJS === void 0) {
    var map = {};
    typ.props.forEach(function(p) {
      return map[p.json] = {
        key: p.js,
        typ: p.typ
      };
    });
    typ.jsonToJS = map;
  }
  return typ.jsonToJS;
}
function jsToJSONProps(typ) {
  if (typ.jsToJSON === void 0) {
    var map = {};
    typ.props.forEach(function(p) {
      return map[p.js] = {
        key: p.json,
        typ: p.typ
      };
    });
    typ.jsToJSON = map;
  }
  return typ.jsToJSON;
}
function transform(val, typ, getProps, key, parent) {
  if (key === void 0) {
    key = "";
  }
  if (parent === void 0) {
    parent = "";
  }
  function transformPrimitive(typ2, val2) {
    if (typeof typ2 === typeof val2)
      return val2;
    return invalidValue(typ2, val2, key, parent);
  }
  function transformUnion(typs, val2) {
    var l2 = typs.length;
    for (var i = 0; i < l2; i++) {
      var _typ = typs[i];
      try {
        return transform(val2, _typ, getProps);
      } catch (_) {
      }
    }
    return invalidValue(typs, val2, key, parent);
  }
  function transformEnum(cases, val2) {
    if (cases.indexOf(val2) !== -1)
      return val2;
    return invalidValue(cases.map(function(a2) {
      return l(a2);
    }), val2, key, parent);
  }
  function transformArray(typ2, val2) {
    if (!Array.isArray(val2))
      return invalidValue(l("array"), val2, key, parent);
    return val2.map(function(el) {
      return transform(el, typ2, getProps);
    });
  }
  function transformDate(val2) {
    if (val2 === null) {
      return null;
    }
    var d = new Date(val2);
    if (isNaN(d.valueOf())) {
      return invalidValue(l("Date"), val2, key, parent);
    }
    return d;
  }
  function transformObject(props, additional, val2) {
    if (val2 === null || typeof val2 !== "object" || Array.isArray(val2)) {
      return invalidValue(l(ref || "object"), val2, key, parent);
    }
    var result = {};
    Object.getOwnPropertyNames(props).forEach(function(key2) {
      var prop = props[key2];
      var v = Object.prototype.hasOwnProperty.call(val2, key2) ? val2[key2] : void 0;
      result[prop.key] = transform(v, prop.typ, getProps, key2, ref);
    });
    Object.getOwnPropertyNames(val2).forEach(function(key2) {
      if (!Object.prototype.hasOwnProperty.call(props, key2)) {
        result[key2] = transform(val2[key2], additional, getProps, key2, ref);
      }
    });
    return result;
  }
  if (typ === "any")
    return val;
  if (typ === null) {
    if (val === null)
      return val;
    return invalidValue(typ, val, key, parent);
  }
  if (typ === false)
    return invalidValue(typ, val, key, parent);
  var ref = void 0;
  while (typeof typ === "object" && typ.ref !== void 0) {
    ref = typ.ref;
    typ = typeMap[typ.ref];
  }
  if (Array.isArray(typ))
    return transformEnum(typ, val);
  if (typeof typ === "object") {
    return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val) : typ.hasOwnProperty("arrayItems") ? transformArray(typ.arrayItems, val) : typ.hasOwnProperty("props") ? transformObject(getProps(typ), typ.additional, val) : invalidValue(typ, val, key, parent);
  }
  if (typ === Date && typeof val !== "number")
    return transformDate(val);
  return transformPrimitive(typ, val);
}
function cast(val, typ) {
  return transform(val, typ, jsonToJSProps);
}
function uncast(val, typ) {
  return transform(val, typ, jsToJSONProps);
}
function l(typ) {
  return {
    literal: typ
  };
}
function a(typ) {
  return {
    arrayItems: typ
  };
}
function u() {
  for (var _len = arguments.length, typs = new Array(_len), _key = 0; _key < _len; _key++) {
    typs[_key] = arguments[_key];
  }
  return {
    unionMembers: typs
  };
}
function o(props, additional) {
  return {
    props,
    additional
  };
}
function m(additional) {
  return {
    props: [],
    additional
  };
}
function r(name) {
  return {
    ref: name
  };
}
var typeMap = {
  BaseImplementationMetadata: o([{
    json: "fdc3Version",
    js: "fdc3Version",
    typ: ""
  }, {
    json: "optionalFeatures",
    js: "optionalFeatures",
    typ: r("BaseImplementationMetadataOptionalFeatures")
  }, {
    json: "provider",
    js: "provider",
    typ: ""
  }, {
    json: "providerVersion",
    js: "providerVersion",
    typ: u(void 0, "")
  }], false),
  BaseImplementationMetadataOptionalFeatures: o([{
    json: "DesktopAgentBridging",
    js: "DesktopAgentBridging",
    typ: true
  }, {
    json: "OriginatingAppMetadata",
    js: "OriginatingAppMetadata",
    typ: true
  }, {
    json: "UserChannelMembershipAPIs",
    js: "UserChannelMembershipAPIs",
    typ: true
  }], false),
  AgentErrorResponseMessage: o([{
    json: "meta",
    js: "meta",
    typ: r("AgentResponseMetadata")
  }, {
    json: "payload",
    js: "payload",
    typ: r("ErrorResponseMessagePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("ResponseMessageType")
  }], false),
  AgentResponseMetadata: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  ErrorResponseMessagePayload: o([{
    json: "error",
    js: "error",
    typ: r("ResponseErrorDetail")
  }], "any"),
  AgentRequestMessage: o([{
    json: "meta",
    js: "meta",
    typ: r("AgentRequestMetadata")
  }, {
    json: "payload",
    js: "payload",
    typ: m("any")
  }, {
    json: "type",
    js: "type",
    typ: r("RequestMessageType")
  }], false),
  AgentRequestMetadata: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("BridgeParticipantIdentifier"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: u(void 0, r("SourceIdentifier"))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  BridgeParticipantIdentifier: o([{
    json: "desktopAgent",
    js: "desktopAgent",
    typ: ""
  }, {
    json: "appId",
    js: "appId",
    typ: u(void 0, "")
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u(void 0, "")
  }], "any"),
  SourceIdentifier: o([{
    json: "appId",
    js: "appId",
    typ: u(void 0, "")
  }, {
    json: "desktopAgent",
    js: "desktopAgent",
    typ: u(void 0, "")
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u(void 0, "")
  }], "any"),
  AgentResponseMessage: o([{
    json: "meta",
    js: "meta",
    typ: r("AgentResponseMetadata")
  }, {
    json: "payload",
    js: "payload",
    typ: m("any")
  }, {
    json: "type",
    js: "type",
    typ: r("ResponseMessageType")
  }], false),
  BridgeErrorResponseMessage: o([{
    json: "meta",
    js: "meta",
    typ: r("BridgeErrorResponseMessageMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("ResponseErrorMessagePayload")
  }, {
    json: "type",
    js: "type",
    typ: ""
  }], false),
  BridgeErrorResponseMessageMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: a(r("ResponseErrorDetail"))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: a(r("DesktopAgentIdentifier"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  DesktopAgentIdentifier: o([{
    json: "desktopAgent",
    js: "desktopAgent",
    typ: ""
  }], "any"),
  ResponseErrorMessagePayload: o([{
    json: "error",
    js: "error",
    typ: u(void 0, r("ResponseErrorDetail"))
  }], "any"),
  BridgeRequestMessage: o([{
    json: "meta",
    js: "meta",
    typ: r("BridgeRequestMetadata")
  }, {
    json: "payload",
    js: "payload",
    typ: m("any")
  }, {
    json: "type",
    js: "type",
    typ: ""
  }], false),
  BridgeRequestMetadata: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("BridgeParticipantIdentifier"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("BridgeParticipantIdentifier")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  BridgeResponseMessage: o([{
    json: "meta",
    js: "meta",
    typ: r("BridgeResponseMessageMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: m("any")
  }, {
    json: "type",
    js: "type",
    typ: ""
  }], false),
  BridgeResponseMessageMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: u(void 0, a(r("ResponseErrorDetail")))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "sources",
    js: "sources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  BroadcastAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("BroadcastAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("BroadcastAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("BroadcastRequestMessageType")
  }], false),
  BroadcastAgentRequestMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("SourceObject")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  SourceObject: o([{
    json: "appId",
    js: "appId",
    typ: ""
  }, {
    json: "desktopAgent",
    js: "desktopAgent",
    typ: u(void 0, "")
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u(void 0, "")
  }], "any"),
  BroadcastAgentRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "context",
    js: "context",
    typ: r("ContextElement")
  }], false),
  ContextElement: o([{
    json: "id",
    js: "id",
    typ: u(void 0, m("any"))
  }, {
    json: "name",
    js: "name",
    typ: u(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: ""
  }], "any"),
  BroadcastBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("BroadcastBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("BroadcastBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("BroadcastRequestMessageType")
  }], false),
  BroadcastBridgeRequestMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSource")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  MetaSource: o([{
    json: "appId",
    js: "appId",
    typ: ""
  }, {
    json: "desktopAgent",
    js: "desktopAgent",
    typ: ""
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u(void 0, "")
  }], "any"),
  BroadcastBridgeRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "context",
    js: "context",
    typ: r("ContextElement")
  }], false),
  ConnectionStepMessage: o([{
    json: "meta",
    js: "meta",
    typ: r("ConnectionStepMetadata")
  }, {
    json: "payload",
    js: "payload",
    typ: m("any")
  }, {
    json: "type",
    js: "type",
    typ: r("ConnectionStepMessageType")
  }], false),
  ConnectionStepMetadata: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: u(void 0, "")
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: u(void 0, "")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  ConnectionStep2Hello: o([{
    json: "meta",
    js: "meta",
    typ: r("ConnectionStep2HelloMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("ConnectionStep2HelloPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("ConnectionStep2HelloType")
  }], false),
  ConnectionStep2HelloMeta: o([{
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  ConnectionStep2HelloPayload: o([{
    json: "authRequired",
    js: "authRequired",
    typ: true
  }, {
    json: "authToken",
    js: "authToken",
    typ: u(void 0, "")
  }, {
    json: "desktopAgentBridgeVersion",
    js: "desktopAgentBridgeVersion",
    typ: ""
  }, {
    json: "supportedFDC3Versions",
    js: "supportedFDC3Versions",
    typ: a("")
  }], false),
  ConnectionStep3Handshake: o([{
    json: "meta",
    js: "meta",
    typ: r("ConnectionStep3HandshakeMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("ConnectionStep3HandshakePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("ConnectionStep3HandshakeType")
  }], false),
  ConnectionStep3HandshakeMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  ConnectionStep3HandshakePayload: o([{
    json: "authToken",
    js: "authToken",
    typ: u(void 0, "")
  }, {
    json: "channelsState",
    js: "channelsState",
    typ: m(a(r("ContextElement")))
  }, {
    json: "implementationMetadata",
    js: "implementationMetadata",
    typ: r("ImplementationMetadataElement")
  }, {
    json: "requestedName",
    js: "requestedName",
    typ: ""
  }], false),
  ImplementationMetadataElement: o([{
    json: "fdc3Version",
    js: "fdc3Version",
    typ: ""
  }, {
    json: "optionalFeatures",
    js: "optionalFeatures",
    typ: r("ImplementationMetadataOptionalFeatures")
  }, {
    json: "provider",
    js: "provider",
    typ: ""
  }, {
    json: "providerVersion",
    js: "providerVersion",
    typ: u(void 0, "")
  }], false),
  ImplementationMetadataOptionalFeatures: o([{
    json: "DesktopAgentBridging",
    js: "DesktopAgentBridging",
    typ: true
  }, {
    json: "OriginatingAppMetadata",
    js: "OriginatingAppMetadata",
    typ: true
  }, {
    json: "UserChannelMembershipAPIs",
    js: "UserChannelMembershipAPIs",
    typ: true
  }], false),
  ConnectionStep4AuthenticationFailed: o([{
    json: "meta",
    js: "meta",
    typ: r("ConnectionStep4AuthenticationFailedMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("ConnectionStep4AuthenticationFailedPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("ConnectionStep4AuthenticationFailedType")
  }], false),
  ConnectionStep4AuthenticationFailedMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  ConnectionStep4AuthenticationFailedPayload: o([{
    json: "message",
    js: "message",
    typ: u(void 0, "")
  }], false),
  ConnectionStep6ConnectedAgentsUpdate: o([{
    json: "meta",
    js: "meta",
    typ: r("ConnectionStep6ConnectedAgentsUpdateMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("ConnectionStep6ConnectedAgentsUpdatePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("ConnectionStep6ConnectedAgentsUpdateType")
  }], false),
  ConnectionStep6ConnectedAgentsUpdateMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  ConnectionStep6ConnectedAgentsUpdatePayload: o([{
    json: "addAgent",
    js: "addAgent",
    typ: u(void 0, "")
  }, {
    json: "allAgents",
    js: "allAgents",
    typ: a(r("ImplementationMetadataElement"))
  }, {
    json: "channelsState",
    js: "channelsState",
    typ: u(void 0, m(a(r("ContextElement"))))
  }, {
    json: "removeAgent",
    js: "removeAgent",
    typ: u(void 0, "")
  }], false),
  FindInstancesAgentErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindInstancesAgentErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindInstancesAgentErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindInstancesResponseMessageType")
  }], false),
  FindInstancesAgentErrorResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindInstancesAgentErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("ErrorMessage")
  }], false),
  FindInstancesAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("FindInstancesAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindInstancesAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindInstancesRequestMessageType")
  }], false),
  FindInstancesAgentRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("DestinationObject"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: u(void 0, r("SourceIdentifier"))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  DestinationObject: o([{
    json: "desktopAgent",
    js: "desktopAgent",
    typ: ""
  }, {
    json: "appId",
    js: "appId",
    typ: u(void 0, "")
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u(void 0, "")
  }], "any"),
  FindInstancesAgentRequestPayload: o([{
    json: "app",
    js: "app",
    typ: r("AppIdentifier")
  }], false),
  AppIdentifier: o([{
    json: "appId",
    js: "appId",
    typ: ""
  }, {
    json: "desktopAgent",
    js: "desktopAgent",
    typ: u(void 0, "")
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u(void 0, "")
  }], "any"),
  FindInstancesAgentResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindInstancesAgentResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindInstancesAgentResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindInstancesResponseMessageType")
  }], false),
  FindInstancesAgentResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindInstancesAgentResponsePayload: o([{
    json: "appIdentifiers",
    js: "appIdentifiers",
    typ: a(r("AppMetadata"))
  }], false),
  AppMetadata: o([{
    json: "appId",
    js: "appId",
    typ: ""
  }, {
    json: "description",
    js: "description",
    typ: u(void 0, "")
  }, {
    json: "desktopAgent",
    js: "desktopAgent",
    typ: u(void 0, "")
  }, {
    json: "icons",
    js: "icons",
    typ: u(void 0, a(r("Icon")))
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u(void 0, "")
  }, {
    json: "instanceMetadata",
    js: "instanceMetadata",
    typ: u(void 0, m("any"))
  }, {
    json: "name",
    js: "name",
    typ: u(void 0, "")
  }, {
    json: "resultType",
    js: "resultType",
    typ: u(void 0, u(null, ""))
  }, {
    json: "screenshots",
    js: "screenshots",
    typ: u(void 0, a(r("Image")))
  }, {
    json: "title",
    js: "title",
    typ: u(void 0, "")
  }, {
    json: "tooltip",
    js: "tooltip",
    typ: u(void 0, "")
  }, {
    json: "version",
    js: "version",
    typ: u(void 0, "")
  }], false),
  Icon: o([{
    json: "size",
    js: "size",
    typ: u(void 0, "")
  }, {
    json: "src",
    js: "src",
    typ: ""
  }, {
    json: "type",
    js: "type",
    typ: u(void 0, "")
  }], false),
  Image: o([{
    json: "label",
    js: "label",
    typ: u(void 0, "")
  }, {
    json: "size",
    js: "size",
    typ: u(void 0, "")
  }, {
    json: "src",
    js: "src",
    typ: ""
  }, {
    json: "type",
    js: "type",
    typ: u(void 0, "")
  }], false),
  FindInstancesBridgeErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindInstancesBridgeErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindInstancesBridgeErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindInstancesResponseMessageType")
  }], false),
  FindInstancesBridgeErrorResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: a(r("ResponseErrorDetail"))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: a(r("DesktopAgentIdentifier"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindInstancesBridgeErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("ErrorMessage")
  }], false),
  FindInstancesBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("FindInstancesBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindInstancesBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindInstancesRequestMessageType")
  }], false),
  FindInstancesBridgeRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("DestinationObject"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSourceObject")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  MetaSourceObject: o([{
    json: "appId",
    js: "appId",
    typ: u(void 0, "")
  }, {
    json: "desktopAgent",
    js: "desktopAgent",
    typ: ""
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u(void 0, "")
  }], "any"),
  FindInstancesBridgeRequestPayload: o([{
    json: "app",
    js: "app",
    typ: r("AppIdentifier")
  }], false),
  FindInstancesBridgeResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindInstancesBridgeResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindInstancesBridgeResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindInstancesResponseMessageType")
  }], false),
  FindInstancesBridgeResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: u(void 0, a(r("ResponseErrorDetail")))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "sources",
    js: "sources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindInstancesBridgeResponsePayload: o([{
    json: "appIdentifiers",
    js: "appIdentifiers",
    typ: a(r("AppMetadata"))
  }], false),
  FindIntentAgentErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentAgentErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentAgentErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentResponseMessageType")
  }], false),
  FindIntentAgentErrorResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindIntentAgentErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("ErrorMessage")
  }], false),
  FindIntentAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentRequestMessageType")
  }], false),
  FindIntentAgentRequestMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: u(void 0, r("SourceIdentifier"))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }, {
    json: "destination",
    js: "destination",
    typ: u(void 0, r("BridgeParticipantIdentifier"))
  }], false),
  FindIntentAgentRequestPayload: o([{
    json: "context",
    js: "context",
    typ: u(void 0, r("ContextElement"))
  }, {
    json: "intent",
    js: "intent",
    typ: ""
  }], false),
  FindIntentAgentResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentAgentResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentAgentResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentResponseMessageType")
  }], false),
  FindIntentAgentResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindIntentAgentResponsePayload: o([{
    json: "appIntent",
    js: "appIntent",
    typ: r("AppIntent")
  }], false),
  AppIntent: o([{
    json: "apps",
    js: "apps",
    typ: a(r("AppMetadata"))
  }, {
    json: "intent",
    js: "intent",
    typ: r("IntentMetadata")
  }], false),
  IntentMetadata: o([{
    json: "displayName",
    js: "displayName",
    typ: ""
  }, {
    json: "name",
    js: "name",
    typ: ""
  }], false),
  FindIntentBridgeErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentBridgeErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentBridgeErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentResponseMessageType")
  }], false),
  FindIntentBridgeErrorResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: a(r("ResponseErrorDetail"))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: a(r("DesktopAgentIdentifier"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindIntentBridgeErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("ErrorMessage")
  }], false),
  FindIntentBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentRequestMessageType")
  }], false),
  FindIntentBridgeRequestMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("BridgeParticipantIdentifier")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }, {
    json: "destination",
    js: "destination",
    typ: u(void 0, r("BridgeParticipantIdentifier"))
  }], false),
  FindIntentBridgeRequestPayload: o([{
    json: "context",
    js: "context",
    typ: u(void 0, r("ContextElement"))
  }, {
    json: "intent",
    js: "intent",
    typ: ""
  }], false),
  FindIntentBridgeResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentBridgeResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentBridgeResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentResponseMessageType")
  }], false),
  FindIntentBridgeResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: u(void 0, a(r("ResponseErrorDetail")))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "sources",
    js: "sources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindIntentBridgeResponsePayload: o([{
    json: "appIntent",
    js: "appIntent",
    typ: r("AppIntent")
  }], false),
  FindIntentsByContextAgentErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentsByContextAgentErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentsByContextAgentErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentsByContextResponseMessageType")
  }], false),
  FindIntentsByContextAgentErrorResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindIntentsByContextAgentErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("ErrorMessage")
  }], false),
  FindIntentsByContextAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentsByContextAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentsByContextAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentsByContextRequestMessageType")
  }], false),
  FindIntentsByContextAgentRequestMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: u(void 0, r("SourceObject"))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }, {
    json: "destination",
    js: "destination",
    typ: u(void 0, r("BridgeParticipantIdentifier"))
  }], false),
  FindIntentsByContextAgentRequestPayload: o([{
    json: "context",
    js: "context",
    typ: r("ContextElement")
  }], false),
  FindIntentsByContextAgentResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentsByContextAgentResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentsByContextAgentResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentsByContextResponseMessageType")
  }], false),
  FindIntentsByContextAgentResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindIntentsByContextAgentResponsePayload: o([{
    json: "appIntents",
    js: "appIntents",
    typ: a(r("AppIntent"))
  }], false),
  FindIntentsByContextBridgeErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentsByContextBridgeErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentsByContextBridgeErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentsByContextResponseMessageType")
  }], false),
  FindIntentsByContextBridgeErrorResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: a(r("ResponseErrorDetail"))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: a(r("DesktopAgentIdentifier"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindIntentsByContextBridgeErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("ErrorMessage")
  }], false),
  FindIntentsByContextBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentsByContextBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentsByContextBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentsByContextRequestMessageType")
  }], false),
  FindIntentsByContextBridgeRequestMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSource")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }, {
    json: "destination",
    js: "destination",
    typ: u(void 0, r("BridgeParticipantIdentifier"))
  }], false),
  FindIntentsByContextBridgeRequestPayload: o([{
    json: "context",
    js: "context",
    typ: r("ContextElement")
  }], false),
  FindIntentsByContextBridgeResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("FindIntentsByContextBridgeResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("FindIntentsByContextBridgeResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("FindIntentsByContextResponseMessageType")
  }], false),
  FindIntentsByContextBridgeResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: u(void 0, a(r("ResponseErrorDetail")))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "sources",
    js: "sources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  FindIntentsByContextBridgeResponsePayload: o([{
    json: "appIntents",
    js: "appIntents",
    typ: a(r("AppIntent"))
  }], false),
  GetAppMetadataAgentErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("GetAppMetadataAgentErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("GetAppMetadataAgentErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("GetAppMetadataResponseMessageType")
  }], false),
  GetAppMetadataAgentErrorResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  GetAppMetadataAgentErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("ErrorMessage")
  }], false),
  GetAppMetadataAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("GetAppMetadataAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("GetAppMetadataAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("GetAppMetadataRequestMessageType")
  }], false),
  GetAppMetadataAgentRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("DestinationObject"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: u(void 0, r("SourceIdentifier"))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  GetAppMetadataAgentRequestPayload: o([{
    json: "app",
    js: "app",
    typ: r("AppDestinationIdentifier")
  }], false),
  AppDestinationIdentifier: o([{
    json: "desktopAgent",
    js: "desktopAgent",
    typ: ""
  }, {
    json: "appId",
    js: "appId",
    typ: ""
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u(void 0, "")
  }], "any"),
  GetAppMetadataAgentResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("GetAppMetadataAgentResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("GetAppMetadataAgentResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("GetAppMetadataResponseMessageType")
  }], false),
  GetAppMetadataAgentResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  GetAppMetadataAgentResponsePayload: o([{
    json: "appMetadata",
    js: "appMetadata",
    typ: r("AppMetadata")
  }], false),
  GetAppMetadataBridgeErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("GetAppMetadataBridgeErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("GetAppMetadataBridgeErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("GetAppMetadataResponseMessageType")
  }], false),
  GetAppMetadataBridgeErrorResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: a(r("ResponseErrorDetail"))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: a(r("DesktopAgentIdentifier"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  GetAppMetadataBridgeErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("ErrorMessage")
  }], false),
  GetAppMetadataBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("GetAppMetadataBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("GetAppMetadataBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("GetAppMetadataRequestMessageType")
  }], false),
  GetAppMetadataBridgeRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("DestinationObject"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSourceObject")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  GetAppMetadataBridgeRequestPayload: o([{
    json: "app",
    js: "app",
    typ: r("AppDestinationIdentifier")
  }], false),
  GetAppMetadataBridgeResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("GetAppMetadataBridgeResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("GetAppMetadataBridgeResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("GetAppMetadataResponseMessageType")
  }], false),
  GetAppMetadataBridgeResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: u(void 0, a(r("ResponseErrorDetail")))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "sources",
    js: "sources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  GetAppMetadataBridgeResponsePayload: o([{
    json: "appMetadata",
    js: "appMetadata",
    typ: r("AppMetadata")
  }], false),
  OpenAgentErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("OpenAgentErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("OpenAgentErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("OpenResponseMessageType")
  }], false),
  OpenAgentErrorResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  OpenAgentErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("OpenErrorMessage")
  }], false),
  OpenAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("OpenAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("OpenAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("OpenRequestMessageType")
  }], false),
  OpenAgentRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("DestinationObject"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("SourceObject")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  OpenAgentRequestPayload: o([{
    json: "app",
    js: "app",
    typ: r("AppToOpen")
  }, {
    json: "context",
    js: "context",
    typ: u(void 0, r("ContextElement"))
  }], false),
  AppToOpen: o([{
    json: "desktopAgent",
    js: "desktopAgent",
    typ: ""
  }, {
    json: "appId",
    js: "appId",
    typ: ""
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u(void 0, "")
  }], "any"),
  OpenAgentResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("OpenAgentResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("OpenAgentResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("OpenResponseMessageType")
  }], false),
  OpenAgentResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  OpenAgentResponsePayload: o([{
    json: "appIdentifier",
    js: "appIdentifier",
    typ: r("AppIdentifier")
  }], false),
  OpenBridgeErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("OpenBridgeErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("OpenBridgeErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("OpenResponseMessageType")
  }], false),
  OpenBridgeErrorResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: a(r("ResponseErrorDetail"))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: a(r("DesktopAgentIdentifier"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  OpenBridgeErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("OpenErrorMessage")
  }], false),
  OpenBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("OpenBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("OpenBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("OpenRequestMessageType")
  }], false),
  OpenBridgeRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("DestinationObject"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSource")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  OpenBridgeRequestPayload: o([{
    json: "app",
    js: "app",
    typ: r("AppToOpen")
  }, {
    json: "context",
    js: "context",
    typ: u(void 0, r("ContextElement"))
  }], false),
  OpenBridgeResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("OpenBridgeResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("OpenBridgeResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("OpenResponseMessageType")
  }], false),
  OpenBridgeResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: u(void 0, a(r("ResponseErrorDetail")))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "sources",
    js: "sources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  OpenBridgeResponsePayload: o([{
    json: "appIdentifier",
    js: "appIdentifier",
    typ: r("AppIdentifier")
  }], false),
  PrivateChannelBroadcastAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("PrivateChannelBroadcastAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelBroadcastAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelBroadcastMessageType")
  }], false),
  PrivateChannelBroadcastAgentRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: u(void 0, r("SourceObject"))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  MetaDestination: o([{
    json: "desktopAgent",
    js: "desktopAgent",
    typ: ""
  }, {
    json: "appId",
    js: "appId",
    typ: ""
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u(void 0, "")
  }], "any"),
  PrivateChannelBroadcastAgentRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "context",
    js: "context",
    typ: r("ContextElement")
  }], false),
  PrivateChannelBroadcastBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("PrivateChannelBroadcastBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelBroadcastBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelBroadcastMessageType")
  }], false),
  PrivateChannelBroadcastBridgeRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSource")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  PrivateChannelBroadcastBridgeRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "context",
    js: "context",
    typ: r("ContextElement")
  }], false),
  PrivateChannelEventListenerAddedAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("PrivateChannelEventListenerAddedAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelEventListenerAddedAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelEventListenerAddedMessageType")
  }], false),
  PrivateChannelEventListenerAddedAgentRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: u(void 0, r("SourceObject"))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  PrivateChannelEventListenerAddedAgentRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "listenerType",
    js: "listenerType",
    typ: r("PrivateChannelEventListenerTypes")
  }], false),
  PrivateChannelEventListenerAddedBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("PrivateChannelEventListenerAddedBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelEventListenerAddedBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelEventListenerAddedMessageType")
  }], false),
  PrivateChannelEventListenerAddedBridgeRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSource")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  PrivateChannelEventListenerAddedBridgeRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "listenerType",
    js: "listenerType",
    typ: r("PrivateChannelEventListenerTypes")
  }], false),
  PrivateChannelEventListenerRemovedAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("PrivateChannelEventListenerRemovedAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelEventListenerRemovedAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelEventListenerRemovedMessageType")
  }], false),
  PrivateChannelEventListenerRemovedAgentRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: u(void 0, r("SourceObject"))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  PrivateChannelEventListenerRemovedAgentRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "listenerType",
    js: "listenerType",
    typ: r("PrivateChannelEventListenerTypes")
  }], false),
  PrivateChannelEventListenerRemovedBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("PrivateChannelEventListenerRemovedBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelEventListenerRemovedBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelEventListenerRemovedMessageType")
  }], false),
  PrivateChannelEventListenerRemovedBridgeRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSource")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  PrivateChannelEventListenerRemovedBridgeRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "listenerType",
    js: "listenerType",
    typ: r("PrivateChannelEventListenerTypes")
  }], false),
  PrivateChannelOnAddContextListenerAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("PrivateChannelOnAddContextListenerAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelOnAddContextListenerAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelOnAddContextListenerMessageType")
  }], false),
  PrivateChannelOnAddContextListenerAgentRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: u(void 0, r("SourceObject"))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  PrivateChannelOnAddContextListenerAgentRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "contextType",
    js: "contextType",
    typ: ""
  }], false),
  PrivateChannelOnAddContextListenerBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("PrivateChannelOnAddContextListenerBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelOnAddContextListenerBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelOnAddContextListenerMessageType")
  }], false),
  PrivateChannelOnAddContextListenerBridgeRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSource")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  PrivateChannelOnAddContextListenerBridgeRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "contextType",
    js: "contextType",
    typ: ""
  }], false),
  PrivateChannelOnDisconnectAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("PrivateChannelOnDisconnectAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelOnDisconnectAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelOnDisconnectMessageType")
  }], false),
  PrivateChannelOnDisconnectAgentRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: u(void 0, r("SourceObject"))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  PrivateChannelOnDisconnectAgentRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }], false),
  PrivateChannelOnDisconnectBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("PrivateChannelOnDisconnectBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelOnDisconnectBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelOnDisconnectMessageType")
  }], false),
  PrivateChannelOnDisconnectBridgeRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSource")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  PrivateChannelOnDisconnectBridgeRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }], false),
  PrivateChannelOnUnsubscribeAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("PrivateChannelOnUnsubscribeAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelOnUnsubscribeAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelOnUnsubscribeMessageType")
  }], false),
  PrivateChannelOnUnsubscribeAgentRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: u(void 0, r("SourceObject"))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  PrivateChannelOnUnsubscribeAgentRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "contextType",
    js: "contextType",
    typ: ""
  }], false),
  PrivateChannelOnUnsubscribeBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("ERequestMetadata")
  }, {
    json: "payload",
    js: "payload",
    typ: r("PrivateChannelOnUnsubscribeBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("PrivateChannelOnUnsubscribeMessageType")
  }], false),
  ERequestMetadata: o([{
    json: "destination",
    js: "destination",
    typ: u(void 0, r("MetaDestination"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSource")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  PrivateChannelOnUnsubscribeBridgeRequestPayload: o([{
    json: "channelId",
    js: "channelId",
    typ: ""
  }, {
    json: "contextType",
    js: "contextType",
    typ: ""
  }], false),
  RaiseIntentAgentErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("RaiseIntentAgentErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("RaiseIntentAgentErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("RaiseIntentResponseMessageType")
  }], false),
  RaiseIntentAgentErrorResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  RaiseIntentAgentErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("ErrorMessage")
  }], false),
  RaiseIntentAgentRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("RaiseIntentAgentRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("RaiseIntentAgentRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("RaiseIntentRequestMessageType")
  }], false),
  RaiseIntentAgentRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: r("MetaDestination")
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("SourceObject")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  RaiseIntentAgentRequestPayload: o([{
    json: "app",
    js: "app",
    typ: r("AppDestinationIdentifier")
  }, {
    json: "context",
    js: "context",
    typ: r("ContextElement")
  }, {
    json: "intent",
    js: "intent",
    typ: ""
  }], false),
  RaiseIntentAgentResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("RaiseIntentAgentResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("RaiseIntentAgentResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("RaiseIntentResponseMessageType")
  }], false),
  RaiseIntentAgentResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  RaiseIntentAgentResponsePayload: o([{
    json: "intentResolution",
    js: "intentResolution",
    typ: r("IntentResolution")
  }], false),
  IntentResolution: o([{
    json: "intent",
    js: "intent",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("AppIdentifier")
  }, {
    json: "version",
    js: "version",
    typ: u(void 0, "")
  }], false),
  RaiseIntentBridgeErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("RaiseIntentBridgeErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("RaiseIntentBridgeErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("RaiseIntentResponseMessageType")
  }], false),
  RaiseIntentBridgeErrorResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: a(r("ResponseErrorDetail"))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: a(r("DesktopAgentIdentifier"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  RaiseIntentBridgeErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("ErrorMessage")
  }], false),
  RaiseIntentBridgeRequest: o([{
    json: "meta",
    js: "meta",
    typ: r("RaiseIntentBridgeRequestMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("RaiseIntentBridgeRequestPayload")
  }, {
    json: "type",
    js: "type",
    typ: r("RaiseIntentRequestMessageType")
  }], false),
  RaiseIntentBridgeRequestMeta: o([{
    json: "destination",
    js: "destination",
    typ: r("MetaDestination")
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "source",
    js: "source",
    typ: r("MetaSource")
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  RaiseIntentBridgeRequestPayload: o([{
    json: "app",
    js: "app",
    typ: r("AppDestinationIdentifier")
  }, {
    json: "context",
    js: "context",
    typ: r("ContextElement")
  }, {
    json: "intent",
    js: "intent",
    typ: ""
  }], false),
  RaiseIntentBridgeResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("RaiseIntentBridgeResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("RaiseIntentBridgeResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("RaiseIntentResponseMessageType")
  }], false),
  RaiseIntentBridgeResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: u(void 0, a(r("ResponseErrorDetail")))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "sources",
    js: "sources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  RaiseIntentBridgeResponsePayload: o([{
    json: "intentResolution",
    js: "intentResolution",
    typ: r("IntentResolution")
  }], false),
  RaiseIntentResultAgentErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("RaiseIntentResultAgentErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("RaiseIntentResultAgentErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("RaiseIntentResultResponseMessageType")
  }], false),
  RaiseIntentResultAgentErrorResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  RaiseIntentResultAgentErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("RaiseIntentResultErrorMessage")
  }], false),
  RaiseIntentResultAgentResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("RaiseIntentResultAgentResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("RaiseIntentResultAgentResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("RaiseIntentResultResponseMessageType")
  }], false),
  RaiseIntentResultAgentResponseMeta: o([{
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  RaiseIntentResultAgentResponsePayload: o([{
    json: "intentResult",
    js: "intentResult",
    typ: r("IntentResult")
  }], false),
  IntentResult: o([{
    json: "context",
    js: "context",
    typ: u(void 0, r("ContextElement"))
  }, {
    json: "channel",
    js: "channel",
    typ: u(void 0, r("Channel"))
  }], false),
  Channel: o([{
    json: "displayMetadata",
    js: "displayMetadata",
    typ: u(void 0, r("DisplayMetadata"))
  }, {
    json: "id",
    js: "id",
    typ: ""
  }, {
    json: "type",
    js: "type",
    typ: r("Type")
  }], false),
  DisplayMetadata: o([{
    json: "color",
    js: "color",
    typ: u(void 0, "")
  }, {
    json: "glyph",
    js: "glyph",
    typ: u(void 0, "")
  }, {
    json: "name",
    js: "name",
    typ: u(void 0, "")
  }], false),
  RaiseIntentResultBridgeErrorResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("RaiseIntentResultBridgeErrorResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("RaiseIntentResultBridgeErrorResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("RaiseIntentResultResponseMessageType")
  }], false),
  RaiseIntentResultBridgeErrorResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: a(r("ResponseErrorDetail"))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: a(r("DesktopAgentIdentifier"))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  RaiseIntentResultBridgeErrorResponsePayload: o([{
    json: "error",
    js: "error",
    typ: r("RaiseIntentResultErrorMessage")
  }], false),
  RaiseIntentResultBridgeResponse: o([{
    json: "meta",
    js: "meta",
    typ: r("RaiseIntentResultBridgeResponseMeta")
  }, {
    json: "payload",
    js: "payload",
    typ: r("RaiseIntentResultBridgeResponsePayload")
  }, {
    json: "type",
    js: "type",
    typ: r("RaiseIntentResultResponseMessageType")
  }], false),
  RaiseIntentResultBridgeResponseMeta: o([{
    json: "errorDetails",
    js: "errorDetails",
    typ: u(void 0, a(r("ResponseErrorDetail")))
  }, {
    json: "errorSources",
    js: "errorSources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "requestUuid",
    js: "requestUuid",
    typ: ""
  }, {
    json: "responseUuid",
    js: "responseUuid",
    typ: ""
  }, {
    json: "sources",
    js: "sources",
    typ: u(void 0, a(r("DesktopAgentIdentifier")))
  }, {
    json: "timestamp",
    js: "timestamp",
    typ: Date
  }], false),
  RaiseIntentResultBridgeResponsePayload: o([{
    json: "intentResult",
    js: "intentResult",
    typ: r("IntentResult")
  }], false),
  Context: o([{
    json: "id",
    js: "id",
    typ: u(void 0, m("any"))
  }, {
    json: "name",
    js: "name",
    typ: u(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: ""
  }], "any"),
  ResponseErrorDetail: ["AccessDenied", "AgentDisconnected", "AppNotFound", "AppTimeout", "CreationFailed", "DesktopAgentNotFound", "ErrorOnLaunch", "IntentDeliveryFailed", "IntentHandlerRejected", "MalformedContext", "MalformedMessage", "NoAppsFound", "NoChannelFound", "NoResultReturned", "NotConnectedToBridge", "ResolverTimeout", "ResolverUnavailable", "ResponseToBridgeTimedOut", "TargetAppUnavailable", "TargetInstanceUnavailable", "UserCancelledResolution"],
  ResponseMessageType: ["findInstancesResponse", "findIntentResponse", "findIntentsByContextResponse", "getAppMetadataResponse", "openResponse", "raiseIntentResponse", "raiseIntentResultResponse"],
  RequestMessageType: ["broadcastRequest", "findInstancesRequest", "findIntentRequest", "findIntentsByContextRequest", "getAppMetadataRequest", "openRequest", "PrivateChannel.broadcast", "PrivateChannel.eventListenerAdded", "PrivateChannel.eventListenerRemoved", "PrivateChannel.onAddContextListener", "PrivateChannel.onDisconnect", "PrivateChannel.onUnsubscribe", "raiseIntentRequest"],
  BroadcastRequestMessageType: ["broadcastRequest"],
  ConnectionStepMessageType: ["authenticationFailed", "connectedAgentsUpdate", "handshake", "hello"],
  ConnectionStep2HelloType: ["hello"],
  ConnectionStep3HandshakeType: ["handshake"],
  ConnectionStep4AuthenticationFailedType: ["authenticationFailed"],
  ConnectionStep6ConnectedAgentsUpdateType: ["connectedAgentsUpdate"],
  ErrorMessage: ["AgentDisconnected", "DesktopAgentNotFound", "IntentDeliveryFailed", "MalformedContext", "MalformedMessage", "NoAppsFound", "NotConnectedToBridge", "ResolverTimeout", "ResolverUnavailable", "ResponseToBridgeTimedOut", "TargetAppUnavailable", "TargetInstanceUnavailable", "UserCancelledResolution"],
  FindInstancesResponseMessageType: ["findInstancesResponse"],
  FindInstancesRequestMessageType: ["findInstancesRequest"],
  FindIntentResponseMessageType: ["findIntentResponse"],
  FindIntentRequestMessageType: ["findIntentRequest"],
  FindIntentsByContextResponseMessageType: ["findIntentsByContextResponse"],
  FindIntentsByContextRequestMessageType: ["findIntentsByContextRequest"],
  GetAppMetadataResponseMessageType: ["getAppMetadataResponse"],
  GetAppMetadataRequestMessageType: ["getAppMetadataRequest"],
  OpenErrorMessage: ["AgentDisconnected", "AppNotFound", "AppTimeout", "DesktopAgentNotFound", "ErrorOnLaunch", "MalformedContext", "MalformedMessage", "NotConnectedToBridge", "ResolverUnavailable", "ResponseToBridgeTimedOut"],
  OpenResponseMessageType: ["openResponse"],
  OpenRequestMessageType: ["openRequest"],
  PrivateChannelBroadcastMessageType: ["PrivateChannel.broadcast"],
  PrivateChannelEventListenerTypes: ["onAddContextListener", "onDisconnect", "onUnsubscribe"],
  PrivateChannelEventListenerAddedMessageType: ["PrivateChannel.eventListenerAdded"],
  PrivateChannelEventListenerRemovedMessageType: ["PrivateChannel.eventListenerRemoved"],
  PrivateChannelOnAddContextListenerMessageType: ["PrivateChannel.onAddContextListener"],
  PrivateChannelOnDisconnectMessageType: ["PrivateChannel.onDisconnect"],
  PrivateChannelOnUnsubscribeMessageType: ["PrivateChannel.onUnsubscribe"],
  RaiseIntentResponseMessageType: ["raiseIntentResponse"],
  RaiseIntentRequestMessageType: ["raiseIntentRequest"],
  RaiseIntentResultErrorMessage: ["AgentDisconnected", "IntentHandlerRejected", "MalformedMessage", "NoResultReturned", "NotConnectedToBridge", "ResponseToBridgeTimedOut"],
  RaiseIntentResultResponseMessageType: ["raiseIntentResultResponse"],
  Type: ["app", "private", "user"]
};
var BridgingTypes = {
  __proto__: null,
  Convert
};
var OpenError;
(function(OpenError2) {
  OpenError2["AppNotFound"] = "AppNotFound";
  OpenError2["ErrorOnLaunch"] = "ErrorOnLaunch";
  OpenError2["AppTimeout"] = "AppTimeout";
  OpenError2["ResolverUnavailable"] = "ResolverUnavailable";
  OpenError2["MalformedContext"] = "MalformedContext";
  OpenError2["DesktopAgentNotFound"] = "DesktopAgentNotFound";
})(OpenError || (OpenError = {}));
var ResolveError;
(function(ResolveError2) {
  ResolveError2["NoAppsFound"] = "NoAppsFound";
  ResolveError2["ResolverUnavailable"] = "ResolverUnavailable";
  ResolveError2["UserCancelled"] = "UserCancelledResolution";
  ResolveError2["ResolverTimeout"] = "ResolverTimeout";
  ResolveError2["TargetAppUnavailable"] = "TargetAppUnavailable";
  ResolveError2["TargetInstanceUnavailable"] = "TargetInstanceUnavailable";
  ResolveError2["IntentDeliveryFailed"] = "IntentDeliveryFailed";
  ResolveError2["MalformedContext"] = "MalformedContext";
  ResolveError2["DesktopAgentNotFound"] = "DesktopAgentNotFound";
})(ResolveError || (ResolveError = {}));
var ResultError;
(function(ResultError2) {
  ResultError2["NoResultReturned"] = "NoResultReturned";
  ResultError2["IntentHandlerRejected"] = "IntentHandlerRejected";
})(ResultError || (ResultError = {}));
var ChannelError;
(function(ChannelError2) {
  ChannelError2["NoChannelFound"] = "NoChannelFound";
  ChannelError2["AccessDenied"] = "AccessDenied";
  ChannelError2["CreationFailed"] = "CreationFailed";
  ChannelError2["MalformedContext"] = "MalformedContext";
})(ChannelError || (ChannelError = {}));
var BridgingError;
(function(BridgingError2) {
  BridgingError2["ResponseTimedOut"] = "ResponseToBridgeTimedOut";
  BridgingError2["AgentDisconnected"] = "AgentDisconnected";
  BridgingError2["NotConnectedToBridge"] = "NotConnectedToBridge";
  BridgingError2["MalformedMessage"] = "MalformedMessage";
})(BridgingError || (BridgingError = {}));
function _regeneratorRuntime() {
  _regeneratorRuntime = function() {
    return exports;
  };
  var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key, desc) {
    obj[key] = desc.value;
  }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function() {
    return this;
  });
  var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg, value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
          invoke("next", value2, resolve, reject);
        }, function(err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function(unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function(error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function(method, arg) {
      if ("executing" === state)
        throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method)
          throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg; ; ) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel)
              continue;
            return delegateResult;
          }
        }
        if ("next" === context.method)
          context.sent = context._sent = context.arg;
        else if ("throw" === context.method) {
          if ("suspendedStart" === state)
            throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else
          "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
            continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method, method = delegate.iterator[methodName];
    if (void 0 === method)
      return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type)
      return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod)
        return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next)
        return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1, next = function next2() {
          for (; ++i < iterable.length; )
            if (hasOwn.call(iterable, i))
              return next2.value = iterable[i], next2.done = false, next2;
          return next2.value = void 0, next2.done = true, next2;
        };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: void 0,
      done: true
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: true
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: true
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function(genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function(arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
    return this;
  }), define(Gp, "toString", function() {
    return "[object Generator]";
  }), exports.keys = function(val) {
    var object = Object(val), keys = [];
    for (var key in object)
      keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length; ) {
        var key2 = keys.pop();
        if (key2 in object)
          return next.value = key2, next.done = false, next;
      }
      return next.done = true, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
        for (var name in this)
          "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
    },
    stop: function() {
      this.done = true;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type)
        throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function(exception) {
      if (this.done)
        throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i], record = entry.completion;
        if ("root" === entry.tryLoc)
          return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc)
              return handle(entry.catchLoc, true);
          } else {
            if (!hasFinally)
              throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc)
              return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function(record, afterLoc) {
      if ("throw" === record.type)
        throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc)
          return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName,
        nextLoc
      }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
var DEFAULT_TIMEOUT = 5e3;
var UnavailableError = new Error("FDC3 DesktopAgent not available at `window.fdc3`.");
var TimeoutError = new Error("Timed out waiting for `fdc3Ready` event.");
var UnexpectedError = new Error("`fdc3Ready` event fired, but `window.fdc3` not set to DesktopAgent.");
function rejectIfNoGlobal(f) {
  return window.fdc3 ? f() : Promise.reject(UnavailableError);
}
var fdc3Ready = function() {
  var _ref = _asyncToGenerator(_regeneratorRuntime().mark(function _callee(waitForMs) {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1)
        switch (_context.prev = _context.next) {
          case 0:
            if (waitForMs === void 0) {
              waitForMs = DEFAULT_TIMEOUT;
            }
            return _context.abrupt("return", new Promise(function(resolve, reject) {
              if (window.fdc3) {
                resolve();
              } else {
                var timeout = setTimeout(function() {
                  return window.fdc3 ? resolve() : reject(TimeoutError);
                }, waitForMs);
                window.addEventListener("fdc3Ready", function() {
                  clearTimeout(timeout);
                  window.fdc3 ? resolve() : reject(UnexpectedError);
                }, {
                  once: true
                });
              }
            }));
          case 2:
          case "end":
            return _context.stop();
        }
    }, _callee);
  }));
  return function fdc3Ready2(_x) {
    return _ref.apply(this, arguments);
  };
}();
function isString(app) {
  return !!app && typeof app === "string";
}
function open(app, context) {
  if (isString(app)) {
    return rejectIfNoGlobal(function() {
      return window.fdc3.open(app, context);
    });
  } else {
    return rejectIfNoGlobal(function() {
      return window.fdc3.open(app, context);
    });
  }
}
function findIntent(intent, context, resultType) {
  return rejectIfNoGlobal(function() {
    return window.fdc3.findIntent(intent, context, resultType);
  });
}
function findIntentsByContext(context, resultType) {
  return rejectIfNoGlobal(function() {
    return window.fdc3.findIntentsByContext(context, resultType);
  });
}
function broadcast(context) {
  return rejectIfNoGlobal(function() {
    return window.fdc3.broadcast(context);
  });
}
function raiseIntent(intent, context, app) {
  if (isString(app)) {
    return rejectIfNoGlobal(function() {
      return window.fdc3.raiseIntent(intent, context, app);
    });
  } else {
    return rejectIfNoGlobal(function() {
      return window.fdc3.raiseIntent(intent, context, app);
    });
  }
}
function raiseIntentForContext(context, app) {
  if (isString(app)) {
    return rejectIfNoGlobal(function() {
      return window.fdc3.raiseIntentForContext(context, app);
    });
  } else {
    return rejectIfNoGlobal(function() {
      return window.fdc3.raiseIntentForContext(context, app);
    });
  }
}
function addIntentListener(intent, handler) {
  return rejectIfNoGlobal(function() {
    return window.fdc3.addIntentListener(intent, handler);
  });
}
function addContextListener(contextTypeOrHandler, handler) {
  if (typeof contextTypeOrHandler !== "function") {
    return rejectIfNoGlobal(function() {
      return window.fdc3.addContextListener(contextTypeOrHandler, handler);
    });
  } else {
    return rejectIfNoGlobal(function() {
      return window.fdc3.addContextListener(null, contextTypeOrHandler);
    });
  }
}
function getUserChannels() {
  return rejectIfNoGlobal(function() {
    if (window.fdc3.getUserChannels) {
      return window.fdc3.getUserChannels();
    } else {
      return window.fdc3.getSystemChannels();
    }
  });
}
function getSystemChannels() {
  return getUserChannels();
}
function joinUserChannel(channelId) {
  return rejectIfNoGlobal(function() {
    if (window.fdc3.joinUserChannel) {
      return window.fdc3.joinUserChannel(channelId);
    } else {
      return window.fdc3.joinChannel(channelId);
    }
  });
}
function joinChannel(channelId) {
  return joinUserChannel(channelId);
}
function getOrCreateChannel(channelId) {
  return rejectIfNoGlobal(function() {
    return window.fdc3.getOrCreateChannel(channelId);
  });
}
function getCurrentChannel() {
  return rejectIfNoGlobal(function() {
    return window.fdc3.getCurrentChannel();
  });
}
function leaveCurrentChannel() {
  return rejectIfNoGlobal(function() {
    return window.fdc3.leaveCurrentChannel();
  });
}
function createPrivateChannel() {
  return rejectIfNoGlobal(function() {
    return window.fdc3.createPrivateChannel();
  });
}
function getInfo() {
  return rejectIfNoGlobal(function() {
    return window.fdc3.getInfo();
  });
}
function getAppMetadata(app) {
  return rejectIfNoGlobal(function() {
    return window.fdc3.getAppMetadata(app);
  });
}
function findInstances(app) {
  return rejectIfNoGlobal(function() {
    return window.fdc3.findInstances(app);
  });
}
var compareVersionNumbers = function compareVersionNumbers2(a2, b) {
  try {
    var aVerArr = a2.split(".").map(Number);
    var bVerArr = b.split(".").map(Number);
    for (var index = 0; index < Math.max(aVerArr.length, bVerArr.length); index++) {
      if (index === aVerArr.length || aVerArr[index] < bVerArr[index]) {
        return -1;
      } else if (index === bVerArr.length || aVerArr[index] > bVerArr[index]) {
        return 1;
      }
    }
    return 0;
  } catch (e) {
    console.error("Failed to compare version strings", e);
    return null;
  }
};
var versionIsAtLeast = function versionIsAtLeast2(metadata, version) {
  var comparison = compareVersionNumbers(metadata.fdc3Version, version);
  return comparison === null ? null : comparison >= 0 ? true : false;
};
var ContextTypes;
(function(ContextTypes2) {
  ContextTypes2["Chart"] = "fdc3.chart";
  ContextTypes2["ChatInitSettings"] = "fdc3.chat.initSettings";
  ContextTypes2["ChatRoom"] = "fdc3.chat.room";
  ContextTypes2["Contact"] = "fdc3.contact";
  ContextTypes2["ContactList"] = "fdc3.contactList";
  ContextTypes2["Country"] = "fdc3.country";
  ContextTypes2["Currency"] = "fdc3.currency";
  ContextTypes2["Email"] = "fdc3.email";
  ContextTypes2["Instrument"] = "fdc3.instrument";
  ContextTypes2["InstrumentList"] = "fdc3.instrumentList";
  ContextTypes2["Interaction"] = "fdc3.interaction";
  ContextTypes2["Nothing"] = "fdc3.nothing";
  ContextTypes2["Organization"] = "fdc3.organization";
  ContextTypes2["Portfolio"] = "fdc3.portfolio";
  ContextTypes2["Position"] = "fdc3.position";
  ContextTypes2["ChatSearchCriteria"] = "fdc3.chat.searchCriteria";
  ContextTypes2["TimeRange"] = "fdc3.timerange";
  ContextTypes2["TransactionResult"] = "fdc3.transactionResult";
  ContextTypes2["Valuation"] = "fdc3.valuation";
})(ContextTypes || (ContextTypes = {}));
var Convert$1 = function() {
  function Convert2() {
  }
  Convert2.toAction = function toAction(json) {
    return cast$1(JSON.parse(json), r$1("Action"));
  };
  Convert2.actionToJson = function actionToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Action")), null, 2);
  };
  Convert2.toChart = function toChart(json) {
    return cast$1(JSON.parse(json), r$1("Chart"));
  };
  Convert2.chartToJson = function chartToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Chart")), null, 2);
  };
  Convert2.toChatInitSettings = function toChatInitSettings(json) {
    return cast$1(JSON.parse(json), r$1("ChatInitSettings"));
  };
  Convert2.chatInitSettingsToJson = function chatInitSettingsToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("ChatInitSettings")), null, 2);
  };
  Convert2.toChatMessage = function toChatMessage(json) {
    return cast$1(JSON.parse(json), r$1("ChatMessage"));
  };
  Convert2.chatMessageToJson = function chatMessageToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("ChatMessage")), null, 2);
  };
  Convert2.toChatRoom = function toChatRoom(json) {
    return cast$1(JSON.parse(json), r$1("ChatRoom"));
  };
  Convert2.chatRoomToJson = function chatRoomToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("ChatRoom")), null, 2);
  };
  Convert2.toChatSearchCriteria = function toChatSearchCriteria(json) {
    return cast$1(JSON.parse(json), r$1("ChatSearchCriteria"));
  };
  Convert2.chatSearchCriteriaToJson = function chatSearchCriteriaToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("ChatSearchCriteria")), null, 2);
  };
  Convert2.toContact = function toContact(json) {
    return cast$1(JSON.parse(json), r$1("Contact"));
  };
  Convert2.contactToJson = function contactToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Contact")), null, 2);
  };
  Convert2.toContactList = function toContactList(json) {
    return cast$1(JSON.parse(json), r$1("ContactList"));
  };
  Convert2.contactListToJson = function contactListToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("ContactList")), null, 2);
  };
  Convert2.toContext = function toContext(json) {
    return cast$1(JSON.parse(json), r$1("Context"));
  };
  Convert2.contextToJson = function contextToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Context")), null, 2);
  };
  Convert2.toCountry = function toCountry(json) {
    return cast$1(JSON.parse(json), r$1("Country"));
  };
  Convert2.countryToJson = function countryToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Country")), null, 2);
  };
  Convert2.toCurrency = function toCurrency(json) {
    return cast$1(JSON.parse(json), r$1("Currency"));
  };
  Convert2.currencyToJson = function currencyToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Currency")), null, 2);
  };
  Convert2.toEmail = function toEmail(json) {
    return cast$1(JSON.parse(json), r$1("Email"));
  };
  Convert2.emailToJson = function emailToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Email")), null, 2);
  };
  Convert2.toInstrument = function toInstrument(json) {
    return cast$1(JSON.parse(json), r$1("Instrument"));
  };
  Convert2.instrumentToJson = function instrumentToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Instrument")), null, 2);
  };
  Convert2.toInstrumentList = function toInstrumentList(json) {
    return cast$1(JSON.parse(json), r$1("InstrumentList"));
  };
  Convert2.instrumentListToJson = function instrumentListToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("InstrumentList")), null, 2);
  };
  Convert2.toInteraction = function toInteraction(json) {
    return cast$1(JSON.parse(json), r$1("Interaction"));
  };
  Convert2.interactionToJson = function interactionToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Interaction")), null, 2);
  };
  Convert2.toMessage = function toMessage(json) {
    return cast$1(JSON.parse(json), r$1("Message"));
  };
  Convert2.messageToJson = function messageToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Message")), null, 2);
  };
  Convert2.toNothing = function toNothing(json) {
    return cast$1(JSON.parse(json), r$1("Nothing"));
  };
  Convert2.nothingToJson = function nothingToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Nothing")), null, 2);
  };
  Convert2.toOrder = function toOrder(json) {
    return cast$1(JSON.parse(json), r$1("Order"));
  };
  Convert2.orderToJson = function orderToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Order")), null, 2);
  };
  Convert2.toOrderList = function toOrderList(json) {
    return cast$1(JSON.parse(json), r$1("OrderList"));
  };
  Convert2.orderListToJson = function orderListToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("OrderList")), null, 2);
  };
  Convert2.toOrganization = function toOrganization(json) {
    return cast$1(JSON.parse(json), r$1("Organization"));
  };
  Convert2.organizationToJson = function organizationToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Organization")), null, 2);
  };
  Convert2.toPortfolio = function toPortfolio(json) {
    return cast$1(JSON.parse(json), r$1("Portfolio"));
  };
  Convert2.portfolioToJson = function portfolioToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Portfolio")), null, 2);
  };
  Convert2.toPosition = function toPosition(json) {
    return cast$1(JSON.parse(json), r$1("Position"));
  };
  Convert2.positionToJson = function positionToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Position")), null, 2);
  };
  Convert2.toProduct = function toProduct(json) {
    return cast$1(JSON.parse(json), r$1("Product"));
  };
  Convert2.productToJson = function productToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Product")), null, 2);
  };
  Convert2.toTimeRange = function toTimeRange(json) {
    return cast$1(JSON.parse(json), r$1("TimeRange"));
  };
  Convert2.timeRangeToJson = function timeRangeToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("TimeRange")), null, 2);
  };
  Convert2.toTrade = function toTrade(json) {
    return cast$1(JSON.parse(json), r$1("Trade"));
  };
  Convert2.tradeToJson = function tradeToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Trade")), null, 2);
  };
  Convert2.toTradeList = function toTradeList(json) {
    return cast$1(JSON.parse(json), r$1("TradeList"));
  };
  Convert2.tradeListToJson = function tradeListToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("TradeList")), null, 2);
  };
  Convert2.toTransactionResult = function toTransactionResult(json) {
    return cast$1(JSON.parse(json), r$1("TransactionResult"));
  };
  Convert2.transactionResultToJson = function transactionResultToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("TransactionResult")), null, 2);
  };
  Convert2.toValuation = function toValuation(json) {
    return cast$1(JSON.parse(json), r$1("Valuation"));
  };
  Convert2.valuationToJson = function valuationToJson(value) {
    return JSON.stringify(uncast$1(value, r$1("Valuation")), null, 2);
  };
  return Convert2;
}();
function invalidValue$1(typ, val, key, parent) {
  if (parent === void 0) {
    parent = "";
  }
  var prettyTyp = prettyTypeName$1(typ);
  var parentText = parent ? " on " + parent : "";
  var keyText = key ? ' for key "' + key + '"' : "";
  throw Error("Invalid value" + keyText + parentText + ". Expected " + prettyTyp + " but got " + JSON.stringify(val));
}
function prettyTypeName$1(typ) {
  if (Array.isArray(typ)) {
    if (typ.length === 2 && typ[0] === void 0) {
      return "an optional " + prettyTypeName$1(typ[1]);
    } else {
      return "one of [" + typ.map(function(a2) {
        return prettyTypeName$1(a2);
      }).join(", ") + "]";
    }
  } else if (typeof typ === "object" && typ.literal !== void 0) {
    return typ.literal;
  } else {
    return typeof typ;
  }
}
function jsonToJSProps$1(typ) {
  if (typ.jsonToJS === void 0) {
    var map = {};
    typ.props.forEach(function(p) {
      return map[p.json] = {
        key: p.js,
        typ: p.typ
      };
    });
    typ.jsonToJS = map;
  }
  return typ.jsonToJS;
}
function jsToJSONProps$1(typ) {
  if (typ.jsToJSON === void 0) {
    var map = {};
    typ.props.forEach(function(p) {
      return map[p.js] = {
        key: p.json,
        typ: p.typ
      };
    });
    typ.jsToJSON = map;
  }
  return typ.jsToJSON;
}
function transform$1(val, typ, getProps, key, parent) {
  if (key === void 0) {
    key = "";
  }
  if (parent === void 0) {
    parent = "";
  }
  function transformPrimitive(typ2, val2) {
    if (typeof typ2 === typeof val2)
      return val2;
    return invalidValue$1(typ2, val2, key, parent);
  }
  function transformUnion(typs, val2) {
    var l2 = typs.length;
    for (var i = 0; i < l2; i++) {
      var _typ = typs[i];
      try {
        return transform$1(val2, _typ, getProps);
      } catch (_) {
      }
    }
    return invalidValue$1(typs, val2, key, parent);
  }
  function transformEnum(cases, val2) {
    if (cases.indexOf(val2) !== -1)
      return val2;
    return invalidValue$1(cases.map(function(a2) {
      return l$1(a2);
    }), val2, key, parent);
  }
  function transformArray(typ2, val2) {
    if (!Array.isArray(val2))
      return invalidValue$1(l$1("array"), val2, key, parent);
    return val2.map(function(el) {
      return transform$1(el, typ2, getProps);
    });
  }
  function transformDate(val2) {
    if (val2 === null) {
      return null;
    }
    var d = new Date(val2);
    if (isNaN(d.valueOf())) {
      return invalidValue$1(l$1("Date"), val2, key, parent);
    }
    return d;
  }
  function transformObject(props, additional, val2) {
    if (val2 === null || typeof val2 !== "object" || Array.isArray(val2)) {
      return invalidValue$1(l$1(ref || "object"), val2, key, parent);
    }
    var result = {};
    Object.getOwnPropertyNames(props).forEach(function(key2) {
      var prop = props[key2];
      var v = Object.prototype.hasOwnProperty.call(val2, key2) ? val2[key2] : void 0;
      result[prop.key] = transform$1(v, prop.typ, getProps, key2, ref);
    });
    Object.getOwnPropertyNames(val2).forEach(function(key2) {
      if (!Object.prototype.hasOwnProperty.call(props, key2)) {
        result[key2] = transform$1(val2[key2], additional, getProps, key2, ref);
      }
    });
    return result;
  }
  if (typ === "any")
    return val;
  if (typ === null) {
    if (val === null)
      return val;
    return invalidValue$1(typ, val, key, parent);
  }
  if (typ === false)
    return invalidValue$1(typ, val, key, parent);
  var ref = void 0;
  while (typeof typ === "object" && typ.ref !== void 0) {
    ref = typ.ref;
    typ = typeMap$1[typ.ref];
  }
  if (Array.isArray(typ))
    return transformEnum(typ, val);
  if (typeof typ === "object") {
    return typ.hasOwnProperty("unionMembers") ? transformUnion(typ.unionMembers, val) : typ.hasOwnProperty("arrayItems") ? transformArray(typ.arrayItems, val) : typ.hasOwnProperty("props") ? transformObject(getProps(typ), typ.additional, val) : invalidValue$1(typ, val, key, parent);
  }
  if (typ === Date && typeof val !== "number")
    return transformDate(val);
  return transformPrimitive(typ, val);
}
function cast$1(val, typ) {
  return transform$1(val, typ, jsonToJSProps$1);
}
function uncast$1(val, typ) {
  return transform$1(val, typ, jsToJSONProps$1);
}
function l$1(typ) {
  return {
    literal: typ
  };
}
function a$1(typ) {
  return {
    arrayItems: typ
  };
}
function u$1() {
  for (var _len = arguments.length, typs = new Array(_len), _key = 0; _key < _len; _key++) {
    typs[_key] = arguments[_key];
  }
  return {
    unionMembers: typs
  };
}
function o$1(props, additional) {
  return {
    props,
    additional
  };
}
function m$1(additional) {
  return {
    props: [],
    additional
  };
}
function r$1(name) {
  return {
    ref: name
  };
}
var typeMap$1 = {
  Action: o$1([{
    json: "app",
    js: "app",
    typ: u$1(void 0, r$1("ActionTargetApp"))
  }, {
    json: "context",
    js: "context",
    typ: r$1("ContextElement")
  }, {
    json: "intent",
    js: "intent",
    typ: u$1(void 0, "")
  }, {
    json: "title",
    js: "title",
    typ: ""
  }, {
    json: "type",
    js: "type",
    typ: r$1("ActionType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  ActionTargetApp: o$1([{
    json: "appId",
    js: "appId",
    typ: ""
  }, {
    json: "desktopAgent",
    js: "desktopAgent",
    typ: u$1(void 0, "")
  }, {
    json: "instanceId",
    js: "instanceId",
    typ: u$1(void 0, "")
  }], "any"),
  ContextElement: o$1([{
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: ""
  }], "any"),
  Chart: o$1([{
    json: "instruments",
    js: "instruments",
    typ: a$1(r$1("InstrumentElement"))
  }, {
    json: "otherConfig",
    js: "otherConfig",
    typ: u$1(void 0, a$1(r$1("ContextElement")))
  }, {
    json: "range",
    js: "range",
    typ: u$1(void 0, r$1("TimeRangeObject"))
  }, {
    json: "style",
    js: "style",
    typ: u$1(void 0, r$1("ChartStyle"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("ChartType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  InstrumentElement: o$1([{
    json: "id",
    js: "id",
    typ: r$1("PurpleInstrumentIdentifiers")
  }, {
    json: "market",
    js: "market",
    typ: u$1(void 0, r$1("OrganizationMarket"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("PurpleInteractionType")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  PurpleInstrumentIdentifiers: o$1([{
    json: "BBG",
    js: "BBG",
    typ: u$1(void 0, "")
  }, {
    json: "CUSIP",
    js: "CUSIP",
    typ: u$1(void 0, "")
  }, {
    json: "FDS_ID",
    js: "FDS_ID",
    typ: u$1(void 0, "")
  }, {
    json: "FIGI",
    js: "FIGI",
    typ: u$1(void 0, "")
  }, {
    json: "ISIN",
    js: "ISIN",
    typ: u$1(void 0, "")
  }, {
    json: "PERMID",
    js: "PERMID",
    typ: u$1(void 0, "")
  }, {
    json: "RIC",
    js: "RIC",
    typ: u$1(void 0, "")
  }, {
    json: "SEDOL",
    js: "SEDOL",
    typ: u$1(void 0, "")
  }, {
    json: "ticker",
    js: "ticker",
    typ: u$1(void 0, "")
  }], "any"),
  OrganizationMarket: o$1([{
    json: "BBG",
    js: "BBG",
    typ: u$1(void 0, "")
  }, {
    json: "COUNTRY_ISOALPHA2",
    js: "COUNTRY_ISOALPHA2",
    typ: u$1(void 0, "")
  }, {
    json: "MIC",
    js: "MIC",
    typ: u$1(void 0, "")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  TimeRangeObject: o$1([{
    json: "endTime",
    js: "endTime",
    typ: u$1(void 0, Date)
  }, {
    json: "startTime",
    js: "startTime",
    typ: u$1(void 0, Date)
  }, {
    json: "type",
    js: "type",
    typ: r$1("TimeRangeType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  ChatInitSettings: o$1([{
    json: "chatName",
    js: "chatName",
    typ: u$1(void 0, "")
  }, {
    json: "members",
    js: "members",
    typ: u$1(void 0, r$1("ContactListObject"))
  }, {
    json: "message",
    js: "message",
    typ: u$1(void 0, u$1(r$1("MessageObject"), ""))
  }, {
    json: "options",
    js: "options",
    typ: u$1(void 0, r$1("ChatOptions"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("ChatInitSettingsType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  ContactListObject: o$1([{
    json: "contacts",
    js: "contacts",
    typ: a$1(r$1("ContactElement"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("ContactListType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  ContactElement: o$1([{
    json: "id",
    js: "id",
    typ: r$1("PurpleContactIdentifiers")
  }, {
    json: "type",
    js: "type",
    typ: r$1("FluffyInteractionType")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  PurpleContactIdentifiers: o$1([{
    json: "email",
    js: "email",
    typ: u$1(void 0, "")
  }, {
    json: "FDS_ID",
    js: "FDS_ID",
    typ: u$1(void 0, "")
  }], "any"),
  MessageObject: o$1([{
    json: "entities",
    js: "entities",
    typ: u$1(void 0, m$1(r$1("PurpleAction")))
  }, {
    json: "text",
    js: "text",
    typ: u$1(void 0, r$1("PurpleMessageText"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("MessageType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  PurpleAction: o$1([{
    json: "app",
    js: "app",
    typ: u$1(void 0, r$1("ActionTargetApp"))
  }, {
    json: "context",
    js: "context",
    typ: u$1(void 0, r$1("ContextElement"))
  }, {
    json: "intent",
    js: "intent",
    typ: u$1(void 0, "")
  }, {
    json: "title",
    js: "title",
    typ: u$1(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: r$1("EntityType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "data",
    js: "data",
    typ: u$1(void 0, r$1("PurpleData"))
  }], "any"),
  PurpleData: o$1([{
    json: "dataUri",
    js: "dataUri",
    typ: ""
  }, {
    json: "name",
    js: "name",
    typ: ""
  }], "any"),
  PurpleMessageText: o$1([{
    json: "text/markdown",
    js: "text/markdown",
    typ: u$1(void 0, "")
  }, {
    json: "text/plain",
    js: "text/plain",
    typ: u$1(void 0, "")
  }], "any"),
  ChatOptions: o$1([{
    json: "allowAddUser",
    js: "allowAddUser",
    typ: u$1(void 0, true)
  }, {
    json: "allowHistoryBrowsing",
    js: "allowHistoryBrowsing",
    typ: u$1(void 0, true)
  }, {
    json: "allowMessageCopy",
    js: "allowMessageCopy",
    typ: u$1(void 0, true)
  }, {
    json: "groupRecipients",
    js: "groupRecipients",
    typ: u$1(void 0, true)
  }, {
    json: "isPublic",
    js: "isPublic",
    typ: u$1(void 0, true)
  }], "any"),
  ChatMessage: o$1([{
    json: "chatRoom",
    js: "chatRoom",
    typ: r$1("ChatRoomObject")
  }, {
    json: "message",
    js: "message",
    typ: u$1(r$1("MessageObject"), "")
  }, {
    json: "type",
    js: "type",
    typ: r$1("ChatMessageType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  ChatRoomObject: o$1([{
    json: "id",
    js: "id",
    typ: m$1("any")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "providerName",
    js: "providerName",
    typ: ""
  }, {
    json: "type",
    js: "type",
    typ: r$1("ChatRoomType")
  }, {
    json: "url",
    js: "url",
    typ: u$1(void 0, "")
  }], "any"),
  ChatRoom: o$1([{
    json: "id",
    js: "id",
    typ: m$1("any")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "providerName",
    js: "providerName",
    typ: ""
  }, {
    json: "type",
    js: "type",
    typ: r$1("ChatRoomType")
  }, {
    json: "url",
    js: "url",
    typ: u$1(void 0, "")
  }], "any"),
  ChatSearchCriteria: o$1([{
    json: "criteria",
    js: "criteria",
    typ: a$1(u$1(r$1("OrganizationObject"), ""))
  }, {
    json: "type",
    js: "type",
    typ: r$1("ChatSearchCriteriaType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  OrganizationObject: o$1([{
    json: "id",
    js: "id",
    typ: r$1("Identifiers")
  }, {
    json: "market",
    js: "market",
    typ: u$1(void 0, r$1("OrganizationMarket"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("TentacledInteractionType")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  Identifiers: o$1([{
    json: "BBG",
    js: "BBG",
    typ: u$1(void 0, "")
  }, {
    json: "CUSIP",
    js: "CUSIP",
    typ: u$1(void 0, "")
  }, {
    json: "FDS_ID",
    js: "FDS_ID",
    typ: u$1(void 0, "")
  }, {
    json: "FIGI",
    js: "FIGI",
    typ: u$1(void 0, "")
  }, {
    json: "ISIN",
    js: "ISIN",
    typ: u$1(void 0, "")
  }, {
    json: "PERMID",
    js: "PERMID",
    typ: u$1(void 0, "")
  }, {
    json: "RIC",
    js: "RIC",
    typ: u$1(void 0, "")
  }, {
    json: "SEDOL",
    js: "SEDOL",
    typ: u$1(void 0, "")
  }, {
    json: "ticker",
    js: "ticker",
    typ: u$1(void 0, "")
  }, {
    json: "LEI",
    js: "LEI",
    typ: u$1(void 0, "")
  }, {
    json: "email",
    js: "email",
    typ: u$1(void 0, "")
  }], "any"),
  Contact: o$1([{
    json: "id",
    js: "id",
    typ: r$1("FluffyContactIdentifiers")
  }, {
    json: "type",
    js: "type",
    typ: r$1("FluffyInteractionType")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  FluffyContactIdentifiers: o$1([{
    json: "email",
    js: "email",
    typ: u$1(void 0, "")
  }, {
    json: "FDS_ID",
    js: "FDS_ID",
    typ: u$1(void 0, "")
  }], "any"),
  ContactList: o$1([{
    json: "contacts",
    js: "contacts",
    typ: a$1(r$1("ContactElement"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("ContactListType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  Context: o$1([{
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: ""
  }], "any"),
  Country: o$1([{
    json: "id",
    js: "id",
    typ: r$1("CountryID")
  }, {
    json: "type",
    js: "type",
    typ: r$1("CountryType")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  CountryID: o$1([{
    json: "COUNTRY_ISOALPHA2",
    js: "COUNTRY_ISOALPHA2",
    typ: u$1(void 0, "")
  }, {
    json: "COUNTRY_ISOALPHA3",
    js: "COUNTRY_ISOALPHA3",
    typ: u$1(void 0, "")
  }, {
    json: "ISOALPHA2",
    js: "ISOALPHA2",
    typ: u$1(void 0, "")
  }, {
    json: "ISOALPHA3",
    js: "ISOALPHA3",
    typ: u$1(void 0, "")
  }], "any"),
  Currency: o$1([{
    json: "id",
    js: "id",
    typ: r$1("CurrencyID")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: r$1("CurrencyType")
  }], "any"),
  CurrencyID: o$1([{
    json: "CURRENCY_ISOCODE",
    js: "CURRENCY_ISOCODE",
    typ: u$1(void 0, "")
  }], "any"),
  Email: o$1([{
    json: "recipients",
    js: "recipients",
    typ: r$1("EmailRecipients")
  }, {
    json: "subject",
    js: "subject",
    typ: u$1(void 0, "")
  }, {
    json: "textBody",
    js: "textBody",
    typ: u$1(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: r$1("EmailType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  EmailRecipients: o$1([{
    json: "id",
    js: "id",
    typ: u$1(void 0, r$1("EmailRecipientsID"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("EmailRecipientsType")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "contacts",
    js: "contacts",
    typ: u$1(void 0, a$1(r$1("ContactElement")))
  }], "any"),
  EmailRecipientsID: o$1([{
    json: "email",
    js: "email",
    typ: u$1(void 0, "")
  }, {
    json: "FDS_ID",
    js: "FDS_ID",
    typ: u$1(void 0, "")
  }], "any"),
  Instrument: o$1([{
    json: "id",
    js: "id",
    typ: r$1("FluffyInstrumentIdentifiers")
  }, {
    json: "market",
    js: "market",
    typ: u$1(void 0, r$1("PurpleMarket"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("PurpleInteractionType")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  FluffyInstrumentIdentifiers: o$1([{
    json: "BBG",
    js: "BBG",
    typ: u$1(void 0, "")
  }, {
    json: "CUSIP",
    js: "CUSIP",
    typ: u$1(void 0, "")
  }, {
    json: "FDS_ID",
    js: "FDS_ID",
    typ: u$1(void 0, "")
  }, {
    json: "FIGI",
    js: "FIGI",
    typ: u$1(void 0, "")
  }, {
    json: "ISIN",
    js: "ISIN",
    typ: u$1(void 0, "")
  }, {
    json: "PERMID",
    js: "PERMID",
    typ: u$1(void 0, "")
  }, {
    json: "RIC",
    js: "RIC",
    typ: u$1(void 0, "")
  }, {
    json: "SEDOL",
    js: "SEDOL",
    typ: u$1(void 0, "")
  }, {
    json: "ticker",
    js: "ticker",
    typ: u$1(void 0, "")
  }], "any"),
  PurpleMarket: o$1([{
    json: "BBG",
    js: "BBG",
    typ: u$1(void 0, "")
  }, {
    json: "COUNTRY_ISOALPHA2",
    js: "COUNTRY_ISOALPHA2",
    typ: u$1(void 0, "")
  }, {
    json: "MIC",
    js: "MIC",
    typ: u$1(void 0, "")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  InstrumentList: o$1([{
    json: "instruments",
    js: "instruments",
    typ: a$1(r$1("InstrumentElement"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("InstrumentListType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  Interaction: o$1([{
    json: "description",
    js: "description",
    typ: ""
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, r$1("InteractionID"))
  }, {
    json: "initiator",
    js: "initiator",
    typ: u$1(void 0, r$1("ContactElement"))
  }, {
    json: "interactionType",
    js: "interactionType",
    typ: ""
  }, {
    json: "origin",
    js: "origin",
    typ: u$1(void 0, "")
  }, {
    json: "participants",
    js: "participants",
    typ: r$1("ContactListObject")
  }, {
    json: "timeRange",
    js: "timeRange",
    typ: r$1("TimeRangeObject")
  }, {
    json: "type",
    js: "type",
    typ: r$1("InteractionType")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  InteractionID: o$1([{
    json: "SALESFORCE",
    js: "SALESFORCE",
    typ: u$1(void 0, "")
  }, {
    json: "SINGLETRACK",
    js: "SINGLETRACK",
    typ: u$1(void 0, "")
  }, {
    json: "URI",
    js: "URI",
    typ: u$1(void 0, "")
  }], "any"),
  Message: o$1([{
    json: "entities",
    js: "entities",
    typ: u$1(void 0, m$1(r$1("FluffyAction")))
  }, {
    json: "text",
    js: "text",
    typ: u$1(void 0, r$1("FluffyMessageText"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("MessageType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  FluffyAction: o$1([{
    json: "app",
    js: "app",
    typ: u$1(void 0, r$1("ActionTargetApp"))
  }, {
    json: "context",
    js: "context",
    typ: u$1(void 0, r$1("ContextElement"))
  }, {
    json: "intent",
    js: "intent",
    typ: u$1(void 0, "")
  }, {
    json: "title",
    js: "title",
    typ: u$1(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: r$1("EntityType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "data",
    js: "data",
    typ: u$1(void 0, r$1("FluffyData"))
  }], "any"),
  FluffyData: o$1([{
    json: "dataUri",
    js: "dataUri",
    typ: ""
  }, {
    json: "name",
    js: "name",
    typ: ""
  }], "any"),
  FluffyMessageText: o$1([{
    json: "text/markdown",
    js: "text/markdown",
    typ: u$1(void 0, "")
  }, {
    json: "text/plain",
    js: "text/plain",
    typ: u$1(void 0, "")
  }], "any"),
  Nothing: o$1([{
    json: "type",
    js: "type",
    typ: r$1("NothingType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  Order: o$1([{
    json: "details",
    js: "details",
    typ: u$1(void 0, r$1("PurpleOrderDetails"))
  }, {
    json: "id",
    js: "id",
    typ: m$1("")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: r$1("OrderType")
  }], "any"),
  PurpleOrderDetails: o$1([{
    json: "product",
    js: "product",
    typ: u$1(void 0, r$1("ProductObject"))
  }], "any"),
  ProductObject: o$1([{
    json: "id",
    js: "id",
    typ: m$1("")
  }, {
    json: "instrument",
    js: "instrument",
    typ: u$1(void 0, r$1("InstrumentElement"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: r$1("ProductType")
  }], "any"),
  OrderList: o$1([{
    json: "orders",
    js: "orders",
    typ: a$1(r$1("OrderElement"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("OrderListType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  OrderElement: o$1([{
    json: "details",
    js: "details",
    typ: u$1(void 0, r$1("FluffyOrderDetails"))
  }, {
    json: "id",
    js: "id",
    typ: m$1("")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: r$1("OrderType")
  }], "any"),
  FluffyOrderDetails: o$1([{
    json: "product",
    js: "product",
    typ: u$1(void 0, r$1("ProductObject"))
  }], "any"),
  Organization: o$1([{
    json: "id",
    js: "id",
    typ: r$1("OrganizationIdentifiers")
  }, {
    json: "type",
    js: "type",
    typ: r$1("StickyInteractionType")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  OrganizationIdentifiers: o$1([{
    json: "FDS_ID",
    js: "FDS_ID",
    typ: u$1(void 0, "")
  }, {
    json: "LEI",
    js: "LEI",
    typ: u$1(void 0, "")
  }, {
    json: "PERMID",
    js: "PERMID",
    typ: u$1(void 0, "")
  }], "any"),
  Portfolio: o$1([{
    json: "positions",
    js: "positions",
    typ: a$1(r$1("PositionElement"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("PortfolioType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  PositionElement: o$1([{
    json: "holding",
    js: "holding",
    typ: 3.14
  }, {
    json: "instrument",
    js: "instrument",
    typ: r$1("InstrumentElement")
  }, {
    json: "type",
    js: "type",
    typ: r$1("PositionType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  Position: o$1([{
    json: "holding",
    js: "holding",
    typ: 3.14
  }, {
    json: "instrument",
    js: "instrument",
    typ: r$1("InstrumentElement")
  }, {
    json: "type",
    js: "type",
    typ: r$1("PositionType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  Product: o$1([{
    json: "id",
    js: "id",
    typ: m$1("")
  }, {
    json: "instrument",
    js: "instrument",
    typ: u$1(void 0, r$1("InstrumentElement"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "type",
    js: "type",
    typ: r$1("ProductType")
  }], "any"),
  TimeRange: o$1([{
    json: "endTime",
    js: "endTime",
    typ: u$1(void 0, Date)
  }, {
    json: "startTime",
    js: "startTime",
    typ: u$1(void 0, Date)
  }, {
    json: "type",
    js: "type",
    typ: r$1("TimeRangeType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  Trade: o$1([{
    json: "id",
    js: "id",
    typ: m$1("")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "product",
    js: "product",
    typ: r$1("ProductObject")
  }, {
    json: "type",
    js: "type",
    typ: r$1("TradeType")
  }], "any"),
  TradeList: o$1([{
    json: "trades",
    js: "trades",
    typ: a$1(r$1("TradeElement"))
  }, {
    json: "type",
    js: "type",
    typ: r$1("TradeListType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  TradeElement: o$1([{
    json: "id",
    js: "id",
    typ: m$1("")
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }, {
    json: "product",
    js: "product",
    typ: r$1("ProductObject")
  }, {
    json: "type",
    js: "type",
    typ: r$1("TradeType")
  }], "any"),
  TransactionResult: o$1([{
    json: "context",
    js: "context",
    typ: u$1(void 0, r$1("ContextElement"))
  }, {
    json: "status",
    js: "status",
    typ: r$1("TransactionStatus")
  }, {
    json: "type",
    js: "type",
    typ: r$1("TransactionResultType")
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  Valuation: o$1([{
    json: "CURRENCY_ISOCODE",
    js: "CURRENCY_ISOCODE",
    typ: ""
  }, {
    json: "expiryTime",
    js: "expiryTime",
    typ: u$1(void 0, Date)
  }, {
    json: "price",
    js: "price",
    typ: u$1(void 0, 3.14)
  }, {
    json: "type",
    js: "type",
    typ: r$1("ValuationType")
  }, {
    json: "valuationTime",
    js: "valuationTime",
    typ: u$1(void 0, Date)
  }, {
    json: "value",
    js: "value",
    typ: 3.14
  }, {
    json: "id",
    js: "id",
    typ: u$1(void 0, m$1("any"))
  }, {
    json: "name",
    js: "name",
    typ: u$1(void 0, "")
  }], "any"),
  ActionType: ["fdc3.action"],
  PurpleInteractionType: ["fdc3.instrument"],
  TimeRangeType: ["fdc3.timerange"],
  ChartStyle: ["bar", "candle", "custom", "heatmap", "histogram", "line", "mountain", "pie", "scatter", "stacked-bar"],
  ChartType: ["fdc3.chart"],
  FluffyInteractionType: ["fdc3.contact"],
  ContactListType: ["fdc3.contactList"],
  EntityType: ["fdc3.action", "fdc3.entity.fileAttachment"],
  MessageType: ["fdc3.message"],
  ChatInitSettingsType: ["fdc3.chat.initSettings"],
  ChatRoomType: ["fdc3.chat.room"],
  ChatMessageType: ["fdc3.chat.message"],
  TentacledInteractionType: ["fdc3.contact", "fdc3.instrument", "fdc3.organization"],
  ChatSearchCriteriaType: ["fdc3.chat.searchCriteria"],
  CountryType: ["fdc3.country"],
  CurrencyType: ["fdc3.currency"],
  EmailRecipientsType: ["fdc3.contact", "fdc3.contactList"],
  EmailType: ["fdc3.email"],
  InstrumentListType: ["fdc3.instrumentList"],
  InteractionType: ["fdc3.interaction"],
  NothingType: ["fdc3.nothing"],
  ProductType: ["fdc3.product"],
  OrderType: ["fdc3.order"],
  OrderListType: ["fdc3.orderList"],
  StickyInteractionType: ["fdc3.organization"],
  PositionType: ["fdc3.position"],
  PortfolioType: ["fdc3.portfolio"],
  TradeType: ["fdc3.trade"],
  TradeListType: ["fdc3.tradeList"],
  TransactionStatus: ["Created", "Deleted", "Failed", "Updated"],
  TransactionResultType: ["fdc3.transactionResult"],
  ValuationType: ["fdc3.valuation"]
};
var Intents;
(function(Intents2) {
  Intents2["CreateInteraction"] = "CreateInteraction";
  Intents2["SendChatMessage"] = "SendChatMessage";
  Intents2["StartCall"] = "StartCall";
  Intents2["StartChat"] = "StartChat";
  Intents2["StartEmail"] = "StartEmail";
  Intents2["ViewAnalysis"] = "ViewAnalysis";
  Intents2["ViewChat"] = "ViewChat";
  Intents2["ViewChart"] = "ViewChart";
  Intents2["ViewContact"] = "ViewContact";
  Intents2["ViewHoldings"] = "ViewHoldings";
  Intents2["ViewInstrument"] = "ViewInstrument";
  Intents2["ViewInteractions"] = "ViewInteractions";
  Intents2["ViewMessages"] = "ViewMessages";
  Intents2["ViewNews"] = "ViewNews";
  Intents2["ViewOrders"] = "ViewOrders";
  Intents2["ViewProfile"] = "ViewProfile";
  Intents2["ViewQuote"] = "ViewQuote";
  Intents2["ViewResearch"] = "ViewResearch";
})(Intents || (Intents = {}));
export {
  BridgingError,
  BridgingTypes,
  ChannelError,
  ContextTypes,
  Convert$1 as Convert,
  Intents,
  OpenError,
  ResolveError,
  ResultError,
  addContextListener,
  addIntentListener,
  broadcast,
  compareVersionNumbers,
  createPrivateChannel,
  fdc3Ready,
  findInstances,
  findIntent,
  findIntentsByContext,
  getAppMetadata,
  getCurrentChannel,
  getInfo,
  getOrCreateChannel,
  getSystemChannels,
  getUserChannels,
  joinChannel,
  joinUserChannel,
  leaveCurrentChannel,
  open,
  raiseIntent,
  raiseIntentForContext,
  versionIsAtLeast
};
//# sourceMappingURL=@finos_fdc3.js.map
